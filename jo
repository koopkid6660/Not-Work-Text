--[=[
 d888b  db    db d888888b      .d888b.      db      db    db  .d8b.  
88' Y8b 88    88   `88'        VP  `8D      88      88    88 d8' `8b 
88      88    88    88            odD'      88      88    88 88ooo88 
88  ooo 88    88    88          .88'        88      88    88 88~~~88 
88. ~8~ 88b  d88   .88.        j88.         88booo. 88b  d88 88   88 
 Y888P  ~Y8888P' Y888888P      888888D      Y88888P ~Y8888P' YP   YP  CONVERTER FROM MorrisBr
]=]


-- Instances: 101 | Scripts: ?? | Modules: ??

local G2L = {}

-- Require G2L wrapper
local G2L_REQUIRE = require;
local G2L_MODULES = {};
local function require(Module:ModuleScript)
    local ModuleState = G2L_MODULES[Module];
    if ModuleState then
        if not ModuleState.Required then
            ModuleState.Required = true;
            ModuleState.Value = ModuleState.Closure();
        end
        return ModuleState.Value;
    end;
    return G2L_REQUIRE(Module);
end


--[[
    Instances:
--]]

--JOHNDOE
G2L["0"] = Instance.new("ScreenGui")

--JOHNDOE.Main
G2L["1"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow
G2L["2"] = Instance.new("Folder")

--JOHNDOE.Main.Shadow.Frame
G2L["3"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame
G2L["4"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame.Frame
G2L["5"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame.Frame
G2L["6"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame.Frame.TextLabel
G2L["7"] = Instance.new("TextLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute
G2L["8"] = Instance.new("TextButton")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.Frame
G2L["9"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE
G2L["10"] = Instance.new("LocalScript")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.UseParentColor
G2L["11"] = Instance.new("BoolValue")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.DropShadow3
G2L["12"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.animated_Rounded
G2L["13"] = Instance.new("ImageLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.Transparency
G2L["14"] = Instance.new("BoolValue")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.shadow
G2L["15"] = Instance.new("ImageLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.animated_Color
G2L["16"] = Instance.new("Color3Value")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.Ripplename
G2L["17"] = Instance.new("StringValue")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.RippleContainer
G2L["18"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.RippleContainer.ImageLabel
G2L["19"] = Instance.new("ImageLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.Tooltip
G2L["20"] = Instance.new("StringValue")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.TooltipFrame
G2L["21"] = Instance.new("ImageLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.TooltipFrame.TextLabel
G2L["22"] = Instance.new("TextLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear
G2L["23"] = Instance.new("TextButton")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.Frame
G2L["24"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE
G2L["25"] = Instance.new("LocalScript")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.UseParentColor
G2L["26"] = Instance.new("BoolValue")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.DropShadow3
G2L["27"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.animated_Rounded
G2L["28"] = Instance.new("ImageLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.Transparency
G2L["29"] = Instance.new("BoolValue")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.shadow
G2L["30"] = Instance.new("ImageLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.animated_Color
G2L["31"] = Instance.new("Color3Value")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.Ripplename
G2L["32"] = Instance.new("StringValue")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.RippleContainer
G2L["33"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.RippleContainer.ImageLabel
G2L["34"] = Instance.new("ImageLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.Tooltip
G2L["35"] = Instance.new("StringValue")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.TooltipFrame
G2L["36"] = Instance.new("ImageLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.TooltipFrame.TextLabel
G2L["37"] = Instance.new("TextLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.cleAR
G2L["38"] = Instance.new("LocalScript")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext
G2L["39"] = Instance.new("TextButton")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.switch
G2L["40"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.switch.animated
G2L["41"] = Instance.new("ImageLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.switch.animated_Rounded
G2L["42"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.Value
G2L["43"] = Instance.new("BoolValue")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE
G2L["44"] = Instance.new("LocalScript")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.UseParentColor
G2L["45"] = Instance.new("BoolValue")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.DropShadow3
G2L["46"] = Instance.new("Frame")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.backPointClosein_mouseUP
G2L["47"] = Instance.new("BoolValue")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.animated_Rounded
G2L["48"] = Instance.new("ImageLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.trans
G2L["49"] = Instance.new("BoolValue")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.shadow
G2L["50"] = Instance.new("ImageLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.animated_Color
G2L["51"] = Instance.new("Color3Value")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox
G2L["52"] = Instance.new("TextBox")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.LocalScript
G2L["53"] = Instance.new("LocalScript")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.LocalScript.animated_Rounded
G2L["54"] = Instance.new("ImageLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Lines
G2L["55"] = Instance.new("TextLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Comments_
G2L["56"] = Instance.new("TextLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Globals_
G2L["57"] = Instance.new("TextLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Keywords_
G2L["58"] = Instance.new("TextLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Numbers_
G2L["59"] = Instance.new("TextLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.RemoteHighlight_
G2L["60"] = Instance.new("TextLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Strings_
G2L["61"] = Instance.new("TextLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Tokens_
G2L["62"] = Instance.new("TextLabel")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.chathaxerino
G2L["63"] = Instance.new("LocalScript")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.chathaxerino.Script
G2L["64"] = Instance.new("Script")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.chathaxerino.RemoteEvent
G2L["65"] = Instance.new("RemoteEvent")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.scripthuberino
G2L["66"] = Instance.new("LocalScript")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.scripthuberino.Script
G2L["67"] = Instance.new("Script")

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.scripthuberino.RemoteEvent
G2L["68"] = Instance.new("RemoteEvent")

--JOHNDOE.Main.Shadow.Frame.Frame.LocalScript
G2L["69"] = Instance.new("LocalScript")

--JOHNDOE.Main.Shadow.Frame.Frame.highlight
G2L["70"] = Instance.new("LocalScript")

--JOHNDOE.Main.Shadow.Frame.RemoteHandle
G2L["71"] = Instance.new("Script")

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring
G2L["72"] = Instance.new("ModuleScript")

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaZ
G2L["73"] = Instance.new("ModuleScript")

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaX
G2L["74"] = Instance.new("ModuleScript")

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaY
G2L["75"] = Instance.new("ModuleScript")

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaK
G2L["76"] = Instance.new("ModuleScript")

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaU
G2L["77"] = Instance.new("ModuleScript")

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaP
G2L["78"] = Instance.new("ModuleScript")

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.Rerubi
G2L["79"] = Instance.new("ModuleScript")

--JOHNDOE.Main.Shadow.Frame.Remote
G2L["80"] = Instance.new("RemoteEvent")

--JOHNDOE.Main.Dragify
G2L["81"] = Instance.new("LocalScript")

--JOHNDOE.handlerlol
G2L["82"] = Instance.new("Script")

--JOHNDOE.Folder
G2L["83"] = Instance.new("Folder")

--JOHNDOE.loader
G2L["84"] = Instance.new("Frame")

--JOHNDOE.loader.Frame
G2L["85"] = Instance.new("Frame")

--JOHNDOE.loader.Frame.Frame
G2L["86"] = Instance.new("Frame")

--JOHNDOE.loader.Frame.Frame
G2L["87"] = Instance.new("Frame")

--JOHNDOE.loader.Frame.Frame.TextLabel
G2L["88"] = Instance.new("TextLabel")

--JOHNDOE.loader.Frame.Frame.TextLabel
G2L["89"] = Instance.new("TextLabel")

--JOHNDOE.loader.Frame.Frame.button
G2L["90"] = Instance.new("TextBox")

--JOHNDOE.loader.Frame.Frame.button.bar2_Roundify_12px
G2L["91"] = Instance.new("ImageLabel")

--JOHNDOE.loader.Frame.Frame.button.bar2_Roundify_12px.manager
G2L["92"] = Instance.new("LocalScript")

--JOHNDOE.loader.Frame.Frame.button.bar2_Roundify_12px.txt
G2L["93"] = Instance.new("TextLabel")

--JOHNDOE.loader.Frame.newscreen
G2L["94"] = Instance.new("Frame")

--JOHNDOE.loader.Frame.newscreen.WelcomeBack
G2L["95"] = Instance.new("TextLabel")

--JOHNDOE.loader.Frame.newscreen.WelcomeBack.LocalScript
G2L["96"] = Instance.new("LocalScript")

--JOHNDOE.loader.Frame.newscreen.user
G2L["97"] = Instance.new("TextLabel")

--JOHNDOE.loader.Frame.newscreen.user.fade
G2L["98"] = Instance.new("LocalScript")

--JOHNDOE.loader.Frame.newscreen.user.usermanage
G2L["99"] = Instance.new("LocalScript")

--JOHNDOE.loader.Frame.Dragify
G2L["100"] = Instance.new("LocalScript")



--[[
    Properties:
--]]
--JOHNDOE
G2L["0"].Name = [[JOHNDOE]]
G2L["0"].Enabled = true
G2L["0"].ZIndexBehavior = Enum.ZIndexBehavior.Sibling
G2L["0"].Parent = game.Players.LocalPlayer.PlayerGui

--JOHNDOE.Main
G2L["1"].Name = [[Main]]
G2L["1"].Active = false
G2L["1"].AnchorPoint = Vector2.new(0, 0)
G2L["1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["1"].BackgroundTransparency = 1
G2L["1"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["1"].BorderSizePixel = 0
G2L["1"].ClipsDescendants = false
G2L["1"].Draggable = false
G2L["1"].Position = UDim2.new(0.2857756, 0, 0.28219172, 0)
G2L["1"].Rotation = 0
G2L["1"].Selectable = false
G2L["1"].SelectionOrder = 0
G2L["1"].Size = UDim2.new(0, 550, 0, 330)
G2L["1"].Visible = false
G2L["1"].ZIndex = 1
G2L["1"].Parent = G2L["0"]

--JOHNDOE.Main.Shadow
G2L["2"].Name = [[Shadow]]
G2L["2"].Parent = G2L["1"]

--JOHNDOE.Main.Shadow.Frame
G2L["3"].Name = [[Frame]]
G2L["3"].Active = false
G2L["3"].AnchorPoint = Vector2.new(0, 0)
G2L["3"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["3"].BackgroundTransparency = 0
G2L["3"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["3"].BorderSizePixel = 0
G2L["3"].ClipsDescendants = false
G2L["3"].Draggable = false
G2L["3"].Position = UDim2.new(0, -4, 0, -4)
G2L["3"].Rotation = 0
G2L["3"].Selectable = false
G2L["3"].SelectionOrder = 0
G2L["3"].Size = UDim2.new(1, 8, 1, 8)
G2L["3"].Visible = true
G2L["3"].ZIndex = 1
G2L["3"].Parent = G2L["2"]

--JOHNDOE.Main.Shadow.Frame.Frame
G2L["4"].Name = [[Frame]]
G2L["4"].Active = false
G2L["4"].AnchorPoint = Vector2.new(0, 0)
G2L["4"].BackgroundColor3 = Color3.fromRGB(76, 76, 76)
G2L["4"].BackgroundTransparency = 0
G2L["4"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["4"].BorderSizePixel = 0
G2L["4"].ClipsDescendants = false
G2L["4"].Draggable = false
G2L["4"].Position = UDim2.new(0, -4, 0, -4)
G2L["4"].Rotation = 0
G2L["4"].Selectable = false
G2L["4"].SelectionOrder = 0
G2L["4"].Size = UDim2.new(1, 8, 1, 8)
G2L["4"].Visible = true
G2L["4"].ZIndex = 1
G2L["4"].Parent = G2L["3"]

--JOHNDOE.Main.Shadow.Frame.Frame.Frame
G2L["5"].Name = [[Frame]]
G2L["5"].Active = false
G2L["5"].AnchorPoint = Vector2.new(0, 0)
G2L["5"].BackgroundColor3 = Color3.fromRGB(221.00002, 147, 0)
G2L["5"].BackgroundTransparency = 0
G2L["5"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["5"].BorderSizePixel = 0
G2L["5"].ClipsDescendants = false
G2L["5"].Draggable = false
G2L["5"].Position = UDim2.new(0, 0, 0, 0)
G2L["5"].Rotation = 0
G2L["5"].Selectable = false
G2L["5"].SelectionOrder = 0
G2L["5"].Size = UDim2.new(0, 550, 0, 16)
G2L["5"].Visible = true
G2L["5"].ZIndex = 1
G2L["5"].Parent = G2L["4"]

--JOHNDOE.Main.Shadow.Frame.Frame.Frame
G2L["6"].Name = [[Frame]]
G2L["6"].Active = false
G2L["6"].AnchorPoint = Vector2.new(0, 0)
G2L["6"].BackgroundColor3 = Color3.fromRGB(255, 170, 0)
G2L["6"].BackgroundTransparency = 0
G2L["6"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["6"].BorderSizePixel = 0
G2L["6"].ClipsDescendants = false
G2L["6"].Draggable = false
G2L["6"].Position = UDim2.new(0, 0, 0.045454547, 0)
G2L["6"].Rotation = 0
G2L["6"].Selectable = false
G2L["6"].SelectionOrder = 0
G2L["6"].Size = UDim2.new(0, 550, 0, 29)
G2L["6"].Visible = true
G2L["6"].ZIndex = 1
G2L["6"].Parent = G2L["4"]

--JOHNDOE.Main.Shadow.Frame.Frame.Frame.TextLabel
G2L["7"].Name = [[TextLabel]]
G2L["7"].FontFace = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["7"].Text = [[JOHN DOE SERVERSIDE]]
G2L["7"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["7"].TextScaled = false
G2L["7"].TextSize = 20
G2L["7"].TextStrokeColor3 = Color3.fromRGB(241.00002, 241.00002, 241.00002)
G2L["7"].TextStrokeTransparency = 0.9
G2L["7"].TextWrapped = true
G2L["7"].TextXAlignment = Enum.TextXAlignment.Center
G2L["7"].TextYAlignment = Enum.TextYAlignment.Center
G2L["7"].Active = false
G2L["7"].AnchorPoint = Vector2.new(0, 0)
G2L["7"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["7"].BackgroundTransparency = 1
G2L["7"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["7"].BorderSizePixel = 1
G2L["7"].ClipsDescendants = false
G2L["7"].Draggable = false
G2L["7"].Position = UDim2.new(0, 0, 0, 0)
G2L["7"].Rotation = 0
G2L["7"].Selectable = false
G2L["7"].SelectionOrder = 0
G2L["7"].Size = UDim2.new(0, 253, 0, 29)
G2L["7"].Visible = true
G2L["7"].ZIndex = 1
G2L["7"].Parent = G2L["6"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute
G2L["8"].Name = [[Execute]]
G2L["8"].FontFace = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["8"].Text = [[EXECUTE]]
G2L["8"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["8"].TextScaled = false
G2L["8"].TextSize = 17
G2L["8"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["8"].TextStrokeTransparency = 1
G2L["8"].TextWrapped = true
G2L["8"].TextXAlignment = Enum.TextXAlignment.Center
G2L["8"].TextYAlignment = Enum.TextYAlignment.Center
G2L["8"].Active = true
G2L["8"].AnchorPoint = Vector2.new(0, 0)
G2L["8"].BackgroundColor3 = Color3.fromRGB(85, 85, 85)
G2L["8"].BackgroundTransparency = 0
G2L["8"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["8"].BorderSizePixel = 0
G2L["8"].ClipsDescendants = false
G2L["8"].Draggable = false
G2L["8"].Position = UDim2.new(0.021818181, 0, 0.8787879, 0)
G2L["8"].Rotation = 0
G2L["8"].Selectable = true
G2L["8"].SelectionOrder = 0
G2L["8"].Size = UDim2.new(0, 220, 0, 30)
G2L["8"].Visible = true
G2L["8"].ZIndex = 1
G2L["8"].Parent = G2L["4"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.Frame
G2L["9"].Name = [[Frame]]
G2L["9"].Active = false
G2L["9"].AnchorPoint = Vector2.new(0, 0)
G2L["9"].BackgroundColor3 = Color3.fromRGB(255, 170, 0)
G2L["9"].BackgroundTransparency = 0
G2L["9"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["9"].BorderSizePixel = 0
G2L["9"].ClipsDescendants = false
G2L["9"].Draggable = false
G2L["9"].Position = UDim2.new(0, 0, 0.93333334, 0)
G2L["9"].Rotation = 0
G2L["9"].Selectable = true
G2L["9"].SelectionOrder = 0
G2L["9"].Size = UDim2.new(0, 220, 0, 2)
G2L["9"].Visible = true
G2L["9"].ZIndex = 1
G2L["9"].Parent = G2L["8"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE
G2L["10"].Name = [[RIPPLE]]
G2L["10"].Parent = G2L["8"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.UseParentColor
G2L["11"].Name = [[UseParentColor]]
G2L["11"].Parent = G2L["10"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.DropShadow3
G2L["12"].Name = [[DropShadow3]]
G2L["12"].Active = false
G2L["12"].AnchorPoint = Vector2.new(0, 0)
G2L["12"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["12"].BackgroundTransparency = 0
G2L["12"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["12"].BorderSizePixel = 1
G2L["12"].ClipsDescendants = false
G2L["12"].Draggable = false
G2L["12"].Position = UDim2.new(0, -5, 0, -5)
G2L["12"].Rotation = 0
G2L["12"].Selectable = false
G2L["12"].SelectionOrder = 0
G2L["12"].Size = UDim2.new(1, 10, 1, 10)
G2L["12"].Visible = false
G2L["12"].ZIndex = -1
G2L["12"].Parent = G2L["10"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.animated_Rounded
G2L["13"].Name = [[animated_Rounded]]
G2L["13"].Image = [[rbxassetid://1217158727]]
G2L["13"].ImageColor3 = Color3.fromRGB(79, 79, 79)
G2L["13"].ScaleType = Enum.ScaleType.Stretch
G2L["13"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["13"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["13"].Active = false
G2L["13"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["13"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["13"].BackgroundTransparency = 1
G2L["13"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["13"].BorderSizePixel = 0
G2L["13"].ClipsDescendants = false
G2L["13"].Draggable = false
G2L["13"].Position = UDim2.new(-0.5, 0, -0.5, 0)
G2L["13"].Rotation = 0
G2L["13"].Selectable = false
G2L["13"].SelectionOrder = 0
G2L["13"].Size = UDim2.new(1, 0, 1, 0)
G2L["13"].Visible = true
G2L["13"].ZIndex = 3
G2L["13"].Parent = G2L["10"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.Transparency
G2L["14"].Name = [[Transparency]]
G2L["14"].Parent = G2L["10"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.shadow
G2L["15"].Name = [[shadow]]
G2L["15"].Image = [[rbxassetid://1542279314]]
G2L["15"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["15"].ScaleType = Enum.ScaleType.Slice
G2L["15"].SliceCenter = Rect.new(500, 500, 500, 500)
G2L["15"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["15"].Active = false
G2L["15"].AnchorPoint = Vector2.new(0.5, 0)
G2L["15"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["15"].BackgroundTransparency = 1
G2L["15"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["15"].BorderSizePixel = 1
G2L["15"].ClipsDescendants = false
G2L["15"].Draggable = false
G2L["15"].Position = UDim2.new(0.5, 0, 0, -4)
G2L["15"].Rotation = 0
G2L["15"].Selectable = false
G2L["15"].SelectionOrder = 0
G2L["15"].Size = UDim2.new(1, 10, 1, 11)
G2L["15"].Visible = false
G2L["15"].ZIndex = 1
G2L["15"].Parent = G2L["10"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.animated_Color
G2L["16"].Name = [[animated_Color]]
G2L["16"].Parent = G2L["10"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.Ripplename
G2L["17"].Name = [[Ripplename]]
G2L["17"].Parent = G2L["10"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.RippleContainer
G2L["18"].Name = [[RippleContainer]]
G2L["18"].Active = false
G2L["18"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["18"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["18"].BackgroundTransparency = 1
G2L["18"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["18"].BorderSizePixel = 0
G2L["18"].ClipsDescendants = true
G2L["18"].Draggable = false
G2L["18"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["18"].Rotation = 0
G2L["18"].Selectable = false
G2L["18"].SelectionOrder = 0
G2L["18"].Size = UDim2.new(1, 0, 1, 0)
G2L["18"].Visible = true
G2L["18"].ZIndex = 3
G2L["18"].Parent = G2L["10"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.RippleContainer.ImageLabel
G2L["19"].Name = [[ImageLabel]]
G2L["19"].Image = [[]]
G2L["19"].ImageColor3 = Color3.fromRGB(255, 255, 255)
G2L["19"].ScaleType = Enum.ScaleType.Stretch
G2L["19"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["19"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["19"].Active = false
G2L["19"].AnchorPoint = Vector2.new(0, 0)
G2L["19"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["19"].BackgroundTransparency = 1
G2L["19"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["19"].BorderSizePixel = 1
G2L["19"].ClipsDescendants = true
G2L["19"].Draggable = false
G2L["19"].Position = UDim2.new(0, 0, 0, 0)
G2L["19"].Rotation = 0
G2L["19"].Selectable = false
G2L["19"].SelectionOrder = 0
G2L["19"].Size = UDim2.new(1, 0, 1, 0)
G2L["19"].Visible = true
G2L["19"].ZIndex = 1
G2L["19"].Parent = G2L["18"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.Tooltip
G2L["20"].Name = [[Tooltip]]
G2L["20"].Parent = G2L["10"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.TooltipFrame
G2L["21"].Name = [[TooltipFrame]]
G2L["21"].Image = [[rbxassetid://1934624205]]
G2L["21"].ImageColor3 = Color3.fromRGB(97.00001, 97.00001, 97.00001)
G2L["21"].ScaleType = Enum.ScaleType.Slice
G2L["21"].SliceCenter = Rect.new(4, 4, 252, 252)
G2L["21"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["21"].Active = false
G2L["21"].AnchorPoint = Vector2.new(0.5, 0)
G2L["21"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["21"].BackgroundTransparency = 1
G2L["21"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["21"].BorderSizePixel = 1
G2L["21"].ClipsDescendants = false
G2L["21"].Draggable = false
G2L["21"].Position = UDim2.new(0.5, 0, 1, 8)
G2L["21"].Rotation = 0
G2L["21"].Selectable = false
G2L["21"].SelectionOrder = 0
G2L["21"].Size = UDim2.new(0, 20, 0, 20)
G2L["21"].Visible = true
G2L["21"].ZIndex = 2
G2L["21"].Parent = G2L["10"]

--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE.TooltipFrame.TextLabel
G2L["22"].Name = [[TextLabel]]
G2L["22"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
G2L["22"].Text = [[]]
G2L["22"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["22"].TextScaled = false
G2L["22"].TextSize = 12
G2L["22"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["22"].TextStrokeTransparency = 1
G2L["22"].TextWrapped = false
G2L["22"].TextXAlignment = Enum.TextXAlignment.Center
G2L["22"].TextYAlignment = Enum.TextYAlignment.Center
G2L["22"].Active = false
G2L["22"].AnchorPoint = Vector2.new(0, 0)
G2L["22"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["22"].BackgroundTransparency = 1
G2L["22"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["22"].BorderSizePixel = 1
G2L["22"].ClipsDescendants = false
G2L["22"].Draggable = false
G2L["22"].Position = UDim2.new(0, 0, 0, 0)
G2L["22"].Rotation = 0
G2L["22"].Selectable = false
G2L["22"].SelectionOrder = 0
G2L["22"].Size = UDim2.new(1, 0, 1, 0)
G2L["22"].Visible = true
G2L["22"].ZIndex = 3
G2L["22"].Parent = G2L["21"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear
G2L["23"].Name = [[Clear]]
G2L["23"].FontFace = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["23"].Text = [[CLEAR]]
G2L["23"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["23"].TextScaled = false
G2L["23"].TextSize = 17
G2L["23"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["23"].TextStrokeTransparency = 1
G2L["23"].TextWrapped = true
G2L["23"].TextXAlignment = Enum.TextXAlignment.Center
G2L["23"].TextYAlignment = Enum.TextYAlignment.Center
G2L["23"].Active = true
G2L["23"].AnchorPoint = Vector2.new(0, 0)
G2L["23"].BackgroundColor3 = Color3.fromRGB(85, 85, 85)
G2L["23"].BackgroundTransparency = 0
G2L["23"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["23"].BorderSizePixel = 0
G2L["23"].ClipsDescendants = false
G2L["23"].Draggable = false
G2L["23"].Position = UDim2.new(0.44129682, 0, 0.8787879, 0)
G2L["23"].Rotation = 0
G2L["23"].Selectable = true
G2L["23"].SelectionOrder = 0
G2L["23"].Size = UDim2.new(0, 220, 0, 30)
G2L["23"].Visible = true
G2L["23"].ZIndex = 1
G2L["23"].Parent = G2L["4"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.Frame
G2L["24"].Name = [[Frame]]
G2L["24"].Active = false
G2L["24"].AnchorPoint = Vector2.new(0, 0)
G2L["24"].BackgroundColor3 = Color3.fromRGB(255, 170, 0)
G2L["24"].BackgroundTransparency = 0
G2L["24"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["24"].BorderSizePixel = 0
G2L["24"].ClipsDescendants = false
G2L["24"].Draggable = false
G2L["24"].Position = UDim2.new(0, 0, 0.93333334, 0)
G2L["24"].Rotation = 0
G2L["24"].Selectable = false
G2L["24"].SelectionOrder = 0
G2L["24"].Size = UDim2.new(0, 220, 0, 2)
G2L["24"].Visible = true
G2L["24"].ZIndex = 1
G2L["24"].Parent = G2L["23"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE
G2L["25"].Name = [[RIPPLE]]
G2L["25"].Parent = G2L["23"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.UseParentColor
G2L["26"].Name = [[UseParentColor]]
G2L["26"].Parent = G2L["25"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.DropShadow3
G2L["27"].Name = [[DropShadow3]]
G2L["27"].Active = false
G2L["27"].AnchorPoint = Vector2.new(0, 0)
G2L["27"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["27"].BackgroundTransparency = 0
G2L["27"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["27"].BorderSizePixel = 1
G2L["27"].ClipsDescendants = false
G2L["27"].Draggable = false
G2L["27"].Position = UDim2.new(0, -5, 0, -5)
G2L["27"].Rotation = 0
G2L["27"].Selectable = false
G2L["27"].SelectionOrder = 0
G2L["27"].Size = UDim2.new(1, 10, 1, 10)
G2L["27"].Visible = false
G2L["27"].ZIndex = -1
G2L["27"].Parent = G2L["25"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.animated_Rounded
G2L["28"].Name = [[animated_Rounded]]
G2L["28"].Image = [[rbxassetid://1217158727]]
G2L["28"].ImageColor3 = Color3.fromRGB(79, 79, 79)
G2L["28"].ScaleType = Enum.ScaleType.Stretch
G2L["28"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["28"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["28"].Active = false
G2L["28"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["28"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["28"].BackgroundTransparency = 1
G2L["28"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["28"].BorderSizePixel = 0
G2L["28"].ClipsDescendants = false
G2L["28"].Draggable = false
G2L["28"].Position = UDim2.new(-0.5, 0, -0.5, 0)
G2L["28"].Rotation = 0
G2L["28"].Selectable = false
G2L["28"].SelectionOrder = 0
G2L["28"].Size = UDim2.new(1, 0, 1, 0)
G2L["28"].Visible = true
G2L["28"].ZIndex = 3
G2L["28"].Parent = G2L["25"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.Transparency
G2L["29"].Name = [[Transparency]]
G2L["29"].Parent = G2L["25"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.shadow
G2L["30"].Name = [[shadow]]
G2L["30"].Image = [[rbxassetid://1542279314]]
G2L["30"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["30"].ScaleType = Enum.ScaleType.Slice
G2L["30"].SliceCenter = Rect.new(500, 500, 500, 500)
G2L["30"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["30"].Active = false
G2L["30"].AnchorPoint = Vector2.new(0.5, 0)
G2L["30"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["30"].BackgroundTransparency = 1
G2L["30"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["30"].BorderSizePixel = 1
G2L["30"].ClipsDescendants = false
G2L["30"].Draggable = false
G2L["30"].Position = UDim2.new(0.5, 0, 0, -4)
G2L["30"].Rotation = 0
G2L["30"].Selectable = false
G2L["30"].SelectionOrder = 0
G2L["30"].Size = UDim2.new(1, 10, 1, 11)
G2L["30"].Visible = false
G2L["30"].ZIndex = 1
G2L["30"].Parent = G2L["25"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.animated_Color
G2L["31"].Name = [[animated_Color]]
G2L["31"].Parent = G2L["25"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.Ripplename
G2L["32"].Name = [[Ripplename]]
G2L["32"].Parent = G2L["25"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.RippleContainer
G2L["33"].Name = [[RippleContainer]]
G2L["33"].Active = false
G2L["33"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["33"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["33"].BackgroundTransparency = 1
G2L["33"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["33"].BorderSizePixel = 0
G2L["33"].ClipsDescendants = true
G2L["33"].Draggable = false
G2L["33"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["33"].Rotation = 0
G2L["33"].Selectable = false
G2L["33"].SelectionOrder = 0
G2L["33"].Size = UDim2.new(1, 0, 1, 0)
G2L["33"].Visible = true
G2L["33"].ZIndex = 3
G2L["33"].Parent = G2L["25"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.RippleContainer.ImageLabel
G2L["34"].Name = [[ImageLabel]]
G2L["34"].Image = [[]]
G2L["34"].ImageColor3 = Color3.fromRGB(255, 255, 255)
G2L["34"].ScaleType = Enum.ScaleType.Stretch
G2L["34"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["34"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["34"].Active = false
G2L["34"].AnchorPoint = Vector2.new(0, 0)
G2L["34"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["34"].BackgroundTransparency = 1
G2L["34"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["34"].BorderSizePixel = 1
G2L["34"].ClipsDescendants = true
G2L["34"].Draggable = false
G2L["34"].Position = UDim2.new(0, 0, 0, 0)
G2L["34"].Rotation = 0
G2L["34"].Selectable = false
G2L["34"].SelectionOrder = 0
G2L["34"].Size = UDim2.new(1, 0, 1, 0)
G2L["34"].Visible = true
G2L["34"].ZIndex = 1
G2L["34"].Parent = G2L["33"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.Tooltip
G2L["35"].Name = [[Tooltip]]
G2L["35"].Parent = G2L["25"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.TooltipFrame
G2L["36"].Name = [[TooltipFrame]]
G2L["36"].Image = [[rbxassetid://1934624205]]
G2L["36"].ImageColor3 = Color3.fromRGB(97.00001, 97.00001, 97.00001)
G2L["36"].ScaleType = Enum.ScaleType.Slice
G2L["36"].SliceCenter = Rect.new(4, 4, 252, 252)
G2L["36"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["36"].Active = false
G2L["36"].AnchorPoint = Vector2.new(0.5, 0)
G2L["36"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["36"].BackgroundTransparency = 1
G2L["36"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["36"].BorderSizePixel = 1
G2L["36"].ClipsDescendants = false
G2L["36"].Draggable = false
G2L["36"].Position = UDim2.new(0.5, 0, 1, 8)
G2L["36"].Rotation = 0
G2L["36"].Selectable = false
G2L["36"].SelectionOrder = 0
G2L["36"].Size = UDim2.new(0, 20, 0, 20)
G2L["36"].Visible = true
G2L["36"].ZIndex = 2
G2L["36"].Parent = G2L["25"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE.TooltipFrame.TextLabel
G2L["37"].Name = [[TextLabel]]
G2L["37"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
G2L["37"].Text = [[]]
G2L["37"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["37"].TextScaled = false
G2L["37"].TextSize = 12
G2L["37"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["37"].TextStrokeTransparency = 1
G2L["37"].TextWrapped = false
G2L["37"].TextXAlignment = Enum.TextXAlignment.Center
G2L["37"].TextYAlignment = Enum.TextYAlignment.Center
G2L["37"].Active = false
G2L["37"].AnchorPoint = Vector2.new(0, 0)
G2L["37"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["37"].BackgroundTransparency = 1
G2L["37"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["37"].BorderSizePixel = 1
G2L["37"].ClipsDescendants = false
G2L["37"].Draggable = false
G2L["37"].Position = UDim2.new(0, 0, 0, 0)
G2L["37"].Rotation = 0
G2L["37"].Selectable = false
G2L["37"].SelectionOrder = 0
G2L["37"].Size = UDim2.new(1, 0, 1, 0)
G2L["37"].Visible = true
G2L["37"].ZIndex = 3
G2L["37"].Parent = G2L["36"]

--JOHNDOE.Main.Shadow.Frame.Frame.Clear.cleAR
G2L["38"].Name = [[cleAR]]
G2L["38"].Parent = G2L["23"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext
G2L["39"].Name = [[hidetext]]
G2L["39"].FontFace = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["39"].Text = [[HIDE TEXT]]
G2L["39"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["39"].TextScaled = false
G2L["39"].TextSize = 12
G2L["39"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["39"].TextStrokeTransparency = 1
G2L["39"].TextWrapped = true
G2L["39"].TextXAlignment = Enum.TextXAlignment.Center
G2L["39"].TextYAlignment = Enum.TextYAlignment.Center
G2L["39"].Active = true
G2L["39"].AnchorPoint = Vector2.new(0, 0)
G2L["39"].BackgroundColor3 = Color3.fromRGB(85, 85, 85)
G2L["39"].BackgroundTransparency = 0
G2L["39"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["39"].BorderSizePixel = 0
G2L["39"].ClipsDescendants = false
G2L["39"].Draggable = false
G2L["39"].Position = UDim2.new(0.8586364, 0, 0.88000005, 0)
G2L["39"].Rotation = 0
G2L["39"].Selectable = true
G2L["39"].SelectionOrder = 0
G2L["39"].Size = UDim2.new(0, 68, 0, 30)
G2L["39"].Visible = true
G2L["39"].ZIndex = 1
G2L["39"].Parent = G2L["4"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.switch
G2L["40"].Name = [[switch]]
G2L["40"].Active = false
G2L["40"].AnchorPoint = Vector2.new(0, 0)
G2L["40"].BackgroundColor3 = Color3.fromRGB(94, 94, 94)
G2L["40"].BackgroundTransparency = 0
G2L["40"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["40"].BorderSizePixel = 0
G2L["40"].ClipsDescendants = false
G2L["40"].Draggable = false
G2L["40"].Position = UDim2.new(0, 0, 1.0666667, -4)
G2L["40"].Rotation = 0
G2L["40"].Selectable = false
G2L["40"].SelectionOrder = 0
G2L["40"].Size = UDim2.new(1, 0, -0.06666667, 4)
G2L["40"].Visible = true
G2L["40"].ZIndex = 1
G2L["40"].Parent = G2L["39"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.switch.animated
G2L["41"].Name = [[animated]]
G2L["41"].Image = [[rbxassetid://1217158727]]
G2L["41"].ImageColor3 = Color3.fromRGB(67, 137, 208.00002)
G2L["41"].ScaleType = Enum.ScaleType.Stretch
G2L["41"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["41"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["41"].Active = false
G2L["41"].AnchorPoint = Vector2.new(0, 0)
G2L["41"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["41"].BackgroundTransparency = 1
G2L["41"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["41"].BorderSizePixel = 0
G2L["41"].ClipsDescendants = false
G2L["41"].Draggable = false
G2L["41"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["41"].Rotation = 0
G2L["41"].Selectable = false
G2L["41"].SelectionOrder = 0
G2L["41"].Size = UDim2.new(0, 0, 0, 0)
G2L["41"].Visible = true
G2L["41"].ZIndex = 3
G2L["41"].Parent = G2L["40"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.switch.animated_Rounded
G2L["42"].Name = [[animated_Rounded]]
G2L["42"].Active = false
G2L["42"].AnchorPoint = Vector2.new(0, 0)
G2L["42"].BackgroundColor3 = Color3.fromRGB(255, 170, 0)
G2L["42"].BackgroundTransparency = 0
G2L["42"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["42"].BorderSizePixel = 0
G2L["42"].ClipsDescendants = false
G2L["42"].Draggable = false
G2L["42"].Position = UDim2.new(0.5, 0, 0, 0)
G2L["42"].Rotation = 0
G2L["42"].Selectable = false
G2L["42"].SelectionOrder = 0
G2L["42"].Size = UDim2.new(0, 0, 1, 0)
G2L["42"].Visible = true
G2L["42"].ZIndex = 1
G2L["42"].Parent = G2L["40"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.Value
G2L["43"].Name = [[Value]]
G2L["43"].Parent = G2L["39"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE
G2L["44"].Name = [[RIPPLE]]
G2L["44"].Parent = G2L["39"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.UseParentColor
G2L["45"].Name = [[UseParentColor]]
G2L["45"].Parent = G2L["44"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.DropShadow3
G2L["46"].Name = [[DropShadow3]]
G2L["46"].Active = false
G2L["46"].AnchorPoint = Vector2.new(0, 0)
G2L["46"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["46"].BackgroundTransparency = 1
G2L["46"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["46"].BorderSizePixel = 1
G2L["46"].ClipsDescendants = false
G2L["46"].Draggable = false
G2L["46"].Position = UDim2.new(0, -5, 0, -5)
G2L["46"].Rotation = 0
G2L["46"].Selectable = false
G2L["46"].SelectionOrder = 0
G2L["46"].Size = UDim2.new(1, 10, 1, 10)
G2L["46"].Visible = false
G2L["46"].ZIndex = -1
G2L["46"].Parent = G2L["44"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.backPointClosein_mouseUP
G2L["47"].Name = [[backPointClosein_mouseUP]]
G2L["47"].Parent = G2L["44"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.animated_Rounded
G2L["48"].Name = [[animated_Rounded]]
G2L["48"].Image = [[rbxassetid://1217158727]]
G2L["48"].ImageColor3 = Color3.fromRGB(79, 79, 79)
G2L["48"].ScaleType = Enum.ScaleType.Stretch
G2L["48"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["48"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["48"].Active = false
G2L["48"].AnchorPoint = Vector2.new(0, 0)
G2L["48"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["48"].BackgroundTransparency = 1
G2L["48"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["48"].BorderSizePixel = 0
G2L["48"].ClipsDescendants = false
G2L["48"].Draggable = false
G2L["48"].Position = UDim2.new(-0.5, 0, -0.5, 0)
G2L["48"].Rotation = 0
G2L["48"].Selectable = false
G2L["48"].SelectionOrder = 0
G2L["48"].Size = UDim2.new(1, 0, 1, 0)
G2L["48"].Visible = true
G2L["48"].ZIndex = 1
G2L["48"].Parent = G2L["44"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.trans
G2L["49"].Name = [[trans]]
G2L["49"].Parent = G2L["44"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.shadow
G2L["50"].Name = [[shadow]]
G2L["50"].Image = [[rbxassetid://1542279314]]
G2L["50"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["50"].ScaleType = Enum.ScaleType.Slice
G2L["50"].SliceCenter = Rect.new(500, 500, 500, 500)
G2L["50"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["50"].Active = false
G2L["50"].AnchorPoint = Vector2.new(0.5, 0)
G2L["50"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["50"].BackgroundTransparency = 1
G2L["50"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["50"].BorderSizePixel = 1
G2L["50"].ClipsDescendants = false
G2L["50"].Draggable = false
G2L["50"].Position = UDim2.new(0.5, 0, 0, -4)
G2L["50"].Rotation = 0
G2L["50"].Selectable = false
G2L["50"].SelectionOrder = 0
G2L["50"].Size = UDim2.new(1, 10, 1, 11)
G2L["50"].Visible = false
G2L["50"].ZIndex = -1
G2L["50"].Parent = G2L["44"]

--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE.animated_Color
G2L["51"].Name = [[animated_Color]]
G2L["51"].Parent = G2L["44"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox
G2L["52"].Name = [[TextBox]]
G2L["52"].FontFace = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["52"].MultiLine = false
G2L["52"].PlaceholderColor3 = Color3.new(0.69803923, 0.69803923, 0.69803923)
G2L["52"].PlaceholderText = [[]]
G2L["52"].Text = [[]]
G2L["52"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["52"].TextScaled = false
G2L["52"].TextSize = 14
G2L["52"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["52"].TextStrokeTransparency = 1
G2L["52"].TextWrapped = false
G2L["52"].TextXAlignment = Enum.TextXAlignment.Left
G2L["52"].TextYAlignment = Enum.TextYAlignment.Top
G2L["52"].Active = true
G2L["52"].AnchorPoint = Vector2.new(0, 0)
G2L["52"].BackgroundColor3 = Color3.fromRGB(80, 80, 80)
G2L["52"].BackgroundTransparency = 0
G2L["52"].BorderColor3 = Color3.fromRGB(255, 170, 0)
G2L["52"].BorderSizePixel = 0
G2L["52"].ClipsDescendants = false
G2L["52"].Draggable = false
G2L["52"].Position = UDim2.new(0.046099965, 0, 0.16060606, 0)
G2L["52"].Rotation = 0
G2L["52"].Selectable = true
G2L["52"].SelectionOrder = 0
G2L["52"].Size = UDim2.new(0, 514, 0, 227)
G2L["52"].Visible = true
G2L["52"].ZIndex = 1
G2L["52"].Parent = G2L["4"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.LocalScript
G2L["53"].Name = [[LocalScript]]
G2L["53"].Parent = G2L["52"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.LocalScript.animated_Rounded
G2L["54"].Name = [[animated_Rounded]]
G2L["54"].Image = [[rbxassetid://1217158727]]
G2L["54"].ImageColor3 = Color3.fromRGB(90, 90, 90)
G2L["54"].ScaleType = Enum.ScaleType.Stretch
G2L["54"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["54"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["54"].Active = false
G2L["54"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["54"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["54"].BackgroundTransparency = 1
G2L["54"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["54"].BorderSizePixel = 0
G2L["54"].ClipsDescendants = false
G2L["54"].Draggable = false
G2L["54"].Position = UDim2.new(0, 0, 0.5, 0)
G2L["54"].Rotation = 0
G2L["54"].Selectable = false
G2L["54"].SelectionOrder = 0
G2L["54"].Size = UDim2.new(0, 0, 0, 0)
G2L["54"].Visible = true
G2L["54"].ZIndex = 3
G2L["54"].Parent = G2L["53"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Lines
G2L["55"].Name = [[Lines]]
G2L["55"].FontFace = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["55"].Text = [[1]]
G2L["55"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["55"].TextScaled = false
G2L["55"].TextSize = 14
G2L["55"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["55"].TextStrokeTransparency = 1
G2L["55"].TextWrapped = false
G2L["55"].TextXAlignment = Enum.TextXAlignment.Center
G2L["55"].TextYAlignment = Enum.TextYAlignment.Top
G2L["55"].Active = false
G2L["55"].AnchorPoint = Vector2.new(0, 0)
G2L["55"].BackgroundColor3 = Color3.fromRGB(80, 80, 80)
G2L["55"].BackgroundTransparency = 0
G2L["55"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["55"].BorderSizePixel = 0
G2L["55"].ClipsDescendants = false
G2L["55"].Draggable = false
G2L["55"].Position = UDim2.new(-0.031128405, 0, 0.004405286, 0)
G2L["55"].Rotation = 0
G2L["55"].Selectable = false
G2L["55"].SelectionOrder = 0
G2L["55"].Size = UDim2.new(0, 13, 0, 227)
G2L["55"].Visible = true
G2L["55"].ZIndex = 2
G2L["55"].Parent = G2L["52"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Comments_
G2L["56"].Name = [[Comments_]]
G2L["56"].FontFace = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["56"].Text = [[]]
G2L["56"].TextColor3 = Color3.fromRGB(59.000004, 200.00002, 59.000004)
G2L["56"].TextScaled = false
G2L["56"].TextSize = 15
G2L["56"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["56"].TextStrokeTransparency = 1
G2L["56"].TextWrapped = false
G2L["56"].TextXAlignment = Enum.TextXAlignment.Left
G2L["56"].TextYAlignment = Enum.TextYAlignment.Top
G2L["56"].Active = false
G2L["56"].AnchorPoint = Vector2.new(0, 0)
G2L["56"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["56"].BackgroundTransparency = 1
G2L["56"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["56"].BorderSizePixel = 1
G2L["56"].ClipsDescendants = false
G2L["56"].Draggable = false
G2L["56"].Position = UDim2.new(-0.0019455253, 0, 0.013177746, 0)
G2L["56"].Rotation = 0
G2L["56"].Selectable = false
G2L["56"].SelectionOrder = 0
G2L["56"].Size = UDim2.new(1.0019455, 0, 1.0000575, 0)
G2L["56"].Visible = true
G2L["56"].ZIndex = 5
G2L["56"].Parent = G2L["52"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Globals_
G2L["57"].Name = [[Globals_]]
G2L["57"].FontFace = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["57"].Text = [[]]
G2L["57"].TextColor3 = Color3.fromRGB(132, 214.00002, 247.00002)
G2L["57"].TextScaled = false
G2L["57"].TextSize = 15
G2L["57"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["57"].TextStrokeTransparency = 1
G2L["57"].TextWrapped = false
G2L["57"].TextXAlignment = Enum.TextXAlignment.Left
G2L["57"].TextYAlignment = Enum.TextYAlignment.Top
G2L["57"].Active = false
G2L["57"].AnchorPoint = Vector2.new(0, 0)
G2L["57"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["57"].BackgroundTransparency = 1
G2L["57"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["57"].BorderSizePixel = 1
G2L["57"].ClipsDescendants = false
G2L["57"].Draggable = false
G2L["57"].Position = UDim2.new(-0.0019455253, 0, 0.013177746, 0)
G2L["57"].Rotation = 0
G2L["57"].Selectable = false
G2L["57"].SelectionOrder = 0
G2L["57"].Size = UDim2.new(1.0019455, 0, 1.0000575, 0)
G2L["57"].Visible = true
G2L["57"].ZIndex = 5
G2L["57"].Parent = G2L["52"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Keywords_
G2L["58"].Name = [[Keywords_]]
G2L["58"].FontFace = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["58"].Text = [[]]
G2L["58"].TextColor3 = Color3.fromRGB(248.00002, 109.00001, 124.00001)
G2L["58"].TextScaled = false
G2L["58"].TextSize = 15
G2L["58"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["58"].TextStrokeTransparency = 1
G2L["58"].TextWrapped = false
G2L["58"].TextXAlignment = Enum.TextXAlignment.Left
G2L["58"].TextYAlignment = Enum.TextYAlignment.Top
G2L["58"].Active = false
G2L["58"].AnchorPoint = Vector2.new(0, 0)
G2L["58"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["58"].BackgroundTransparency = 1
G2L["58"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["58"].BorderSizePixel = 1
G2L["58"].ClipsDescendants = false
G2L["58"].Draggable = false
G2L["58"].Position = UDim2.new(-0.0019455253, 0, 0.013177746, 0)
G2L["58"].Rotation = 0
G2L["58"].Selectable = false
G2L["58"].SelectionOrder = 0
G2L["58"].Size = UDim2.new(1.0019455, 0, 1.0000575, 0)
G2L["58"].Visible = true
G2L["58"].ZIndex = 5
G2L["58"].Parent = G2L["52"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Numbers_
G2L["59"].Name = [[Numbers_]]
G2L["59"].FontFace = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["59"].Text = [[]]
G2L["59"].TextColor3 = Color3.fromRGB(255, 198.00002, 0)
G2L["59"].TextScaled = false
G2L["59"].TextSize = 15
G2L["59"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["59"].TextStrokeTransparency = 1
G2L["59"].TextWrapped = false
G2L["59"].TextXAlignment = Enum.TextXAlignment.Left
G2L["59"].TextYAlignment = Enum.TextYAlignment.Top
G2L["59"].Active = false
G2L["59"].AnchorPoint = Vector2.new(0, 0)
G2L["59"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["59"].BackgroundTransparency = 1
G2L["59"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["59"].BorderSizePixel = 1
G2L["59"].ClipsDescendants = false
G2L["59"].Draggable = false
G2L["59"].Position = UDim2.new(-0.0019455253, 0, 0.013177746, 0)
G2L["59"].Rotation = 0
G2L["59"].Selectable = false
G2L["59"].SelectionOrder = 0
G2L["59"].Size = UDim2.new(1.0019455, 0, 1.0000575, 0)
G2L["59"].Visible = true
G2L["59"].ZIndex = 4
G2L["59"].Parent = G2L["52"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.RemoteHighlight_
G2L["60"].Name = [[RemoteHighlight_]]
G2L["60"].FontFace = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["60"].Text = [[]]
G2L["60"].TextColor3 = Color3.fromRGB(0, 144.99988, 255)
G2L["60"].TextScaled = false
G2L["60"].TextSize = 15
G2L["60"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["60"].TextStrokeTransparency = 1
G2L["60"].TextWrapped = false
G2L["60"].TextXAlignment = Enum.TextXAlignment.Left
G2L["60"].TextYAlignment = Enum.TextYAlignment.Top
G2L["60"].Active = false
G2L["60"].AnchorPoint = Vector2.new(0, 0)
G2L["60"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["60"].BackgroundTransparency = 1
G2L["60"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["60"].BorderSizePixel = 1
G2L["60"].ClipsDescendants = false
G2L["60"].Draggable = false
G2L["60"].Position = UDim2.new(-0.0019455253, 0, 0.013177746, 0)
G2L["60"].Rotation = 0
G2L["60"].Selectable = false
G2L["60"].SelectionOrder = 0
G2L["60"].Size = UDim2.new(1.0019455, 0, 1.0000575, 0)
G2L["60"].Visible = true
G2L["60"].ZIndex = 5
G2L["60"].Parent = G2L["52"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Strings_
G2L["61"].Name = [[Strings_]]
G2L["61"].FontFace = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["61"].Text = [[]]
G2L["61"].TextColor3 = Color3.fromRGB(173, 241.00002, 149)
G2L["61"].TextScaled = false
G2L["61"].TextSize = 15
G2L["61"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["61"].TextStrokeTransparency = 1
G2L["61"].TextWrapped = false
G2L["61"].TextXAlignment = Enum.TextXAlignment.Left
G2L["61"].TextYAlignment = Enum.TextYAlignment.Top
G2L["61"].Active = false
G2L["61"].AnchorPoint = Vector2.new(0, 0)
G2L["61"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["61"].BackgroundTransparency = 1
G2L["61"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["61"].BorderSizePixel = 1
G2L["61"].ClipsDescendants = false
G2L["61"].Draggable = false
G2L["61"].Position = UDim2.new(-0.0019455253, 0, 0.013177746, 0)
G2L["61"].Rotation = 0
G2L["61"].Selectable = false
G2L["61"].SelectionOrder = 0
G2L["61"].Size = UDim2.new(1.0019455, 0, 1.0000575, 0)
G2L["61"].Visible = true
G2L["61"].ZIndex = 5
G2L["61"].Parent = G2L["52"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.Tokens_
G2L["62"].Name = [[Tokens_]]
G2L["62"].FontFace = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["62"].Text = [[]]
G2L["62"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["62"].TextScaled = false
G2L["62"].TextSize = 15
G2L["62"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["62"].TextStrokeTransparency = 1
G2L["62"].TextWrapped = false
G2L["62"].TextXAlignment = Enum.TextXAlignment.Left
G2L["62"].TextYAlignment = Enum.TextYAlignment.Top
G2L["62"].Active = false
G2L["62"].AnchorPoint = Vector2.new(0, 0)
G2L["62"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["62"].BackgroundTransparency = 1
G2L["62"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["62"].BorderSizePixel = 1
G2L["62"].ClipsDescendants = false
G2L["62"].Draggable = false
G2L["62"].Position = UDim2.new(-0.0019455253, 0, 0.013177746, 0)
G2L["62"].Rotation = 0
G2L["62"].Selectable = false
G2L["62"].SelectionOrder = 0
G2L["62"].Size = UDim2.new(1.0019455, 0, 1.0000575, 0)
G2L["62"].Visible = true
G2L["62"].ZIndex = 5
G2L["62"].Parent = G2L["52"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.chathaxerino
G2L["63"].Name = [[chathaxerino]]
G2L["63"].Parent = G2L["52"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.chathaxerino.Script
G2L["64"].Name = [[Script]]
G2L["64"].Parent = G2L["63"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.chathaxerino.RemoteEvent
G2L["65"].Name = [[RemoteEvent]]
G2L["65"].Parent = G2L["63"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.scripthuberino
G2L["66"].Name = [[scripthuberino]]
G2L["66"].Parent = G2L["52"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.scripthuberino.Script
G2L["67"].Name = [[Script]]
G2L["67"].Parent = G2L["66"]

--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.scripthuberino.RemoteEvent
G2L["68"].Name = [[RemoteEvent]]
G2L["68"].Parent = G2L["66"]

--JOHNDOE.Main.Shadow.Frame.Frame.LocalScript
G2L["69"].Name = [[LocalScript]]
G2L["69"].Parent = G2L["4"]

--JOHNDOE.Main.Shadow.Frame.Frame.highlight
G2L["70"].Name = [[highlight]]
G2L["70"].Parent = G2L["4"]

--JOHNDOE.Main.Shadow.Frame.RemoteHandle
G2L["71"].Name = [[RemoteHandle]]
G2L["71"].Parent = G2L["3"]

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring
G2L["72"].Name = [[Loadstring]]
G2L["72"].Parent = G2L["71"]

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaZ
G2L["73"].Name = [[LuaZ]]
G2L["73"].Parent = G2L["72"]

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaX
G2L["74"].Name = [[LuaX]]
G2L["74"].Parent = G2L["72"]

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaY
G2L["75"].Name = [[LuaY]]
G2L["75"].Parent = G2L["72"]

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaK
G2L["76"].Name = [[LuaK]]
G2L["76"].Parent = G2L["72"]

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaU
G2L["77"].Name = [[LuaU]]
G2L["77"].Parent = G2L["72"]

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaP
G2L["78"].Name = [[LuaP]]
G2L["78"].Parent = G2L["72"]

--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.Rerubi
G2L["79"].Name = [[Rerubi]]
G2L["79"].Parent = G2L["72"]

--JOHNDOE.Main.Shadow.Frame.Remote
G2L["80"].Name = [[Remote]]
G2L["80"].Parent = G2L["3"]

--JOHNDOE.Main.Dragify
G2L["81"].Name = [[Dragify]]
G2L["81"].Parent = G2L["1"]

--JOHNDOE.handlerlol
G2L["82"].Name = [[handlerlol]]
G2L["82"].Parent = G2L["0"]

--JOHNDOE.Folder
G2L["83"].Name = [[Folder]]
G2L["83"].Parent = G2L["0"]

--JOHNDOE.loader
G2L["84"].Name = [[loader]]
G2L["84"].Active = false
G2L["84"].AnchorPoint = Vector2.new(0, 0)
G2L["84"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["84"].BackgroundTransparency = 1
G2L["84"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["84"].BorderSizePixel = 0
G2L["84"].ClipsDescendants = false
G2L["84"].Draggable = false
G2L["84"].Position = UDim2.new(0.30446723, 0, 0.3130797, 0)
G2L["84"].Rotation = 0
G2L["84"].Selectable = false
G2L["84"].SelectionOrder = 0
G2L["84"].Size = UDim2.new(0, 319, 0, 177)
G2L["84"].Visible = true
G2L["84"].ZIndex = 1
G2L["84"].Parent = G2L["0"]

--JOHNDOE.loader.Frame
G2L["85"].Name = [[Frame]]
G2L["85"].Active = false
G2L["85"].AnchorPoint = Vector2.new(0, 0)
G2L["85"].BackgroundColor3 = Color3.fromRGB(76, 76, 76)
G2L["85"].BackgroundTransparency = 0
G2L["85"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["85"].BorderSizePixel = 0
G2L["85"].ClipsDescendants = false
G2L["85"].Draggable = false
G2L["85"].Position = UDim2.new(0, 70, 0, 71)
G2L["85"].Rotation = 0
G2L["85"].Selectable = false
G2L["85"].SelectionOrder = 0
G2L["85"].Size = UDim2.new(1, 8, 1, 8)
G2L["85"].Visible = true
G2L["85"].ZIndex = 1
G2L["85"].Parent = G2L["84"]

--JOHNDOE.loader.Frame.Frame
G2L["86"].Name = [[Frame]]
G2L["86"].Active = false
G2L["86"].AnchorPoint = Vector2.new(0, 0)
G2L["86"].BackgroundColor3 = Color3.fromRGB(221.00002, 147, 0)
G2L["86"].BackgroundTransparency = 0
G2L["86"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["86"].BorderSizePixel = 0
G2L["86"].ClipsDescendants = false
G2L["86"].Draggable = false
G2L["86"].Position = UDim2.new(0, 0, 0, 0)
G2L["86"].Rotation = 0
G2L["86"].Selectable = false
G2L["86"].SelectionOrder = 0
G2L["86"].Size = UDim2.new(0, 327, 0, 16)
G2L["86"].Visible = true
G2L["86"].ZIndex = 1
G2L["86"].Parent = G2L["85"]

--JOHNDOE.loader.Frame.Frame
G2L["87"].Name = [[Frame]]
G2L["87"].Active = false
G2L["87"].AnchorPoint = Vector2.new(0, 0)
G2L["87"].BackgroundColor3 = Color3.fromRGB(255, 170, 0)
G2L["87"].BackgroundTransparency = 0
G2L["87"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["87"].BorderSizePixel = 0
G2L["87"].ClipsDescendants = false
G2L["87"].Draggable = false
G2L["87"].Position = UDim2.new(0, 0, 0.045454532, 0)
G2L["87"].Rotation = 0
G2L["87"].Selectable = false
G2L["87"].SelectionOrder = 0
G2L["87"].Size = UDim2.new(0, 327, 0, 29)
G2L["87"].Visible = true
G2L["87"].ZIndex = 1
G2L["87"].Parent = G2L["85"]

--JOHNDOE.loader.Frame.Frame.TextLabel
G2L["88"].Name = [[TextLabel]]
G2L["88"].FontFace = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["88"].Text = [[LOADER]]
G2L["88"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["88"].TextScaled = false
G2L["88"].TextSize = 20
G2L["88"].TextStrokeColor3 = Color3.fromRGB(241.00002, 241.00002, 241.00002)
G2L["88"].TextStrokeTransparency = 0.9
G2L["88"].TextWrapped = true
G2L["88"].TextXAlignment = Enum.TextXAlignment.Center
G2L["88"].TextYAlignment = Enum.TextYAlignment.Center
G2L["88"].Active = false
G2L["88"].AnchorPoint = Vector2.new(0, 0)
G2L["88"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["88"].BackgroundTransparency = 1
G2L["88"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["88"].BorderSizePixel = 1
G2L["88"].ClipsDescendants = false
G2L["88"].Draggable = false
G2L["88"].Position = UDim2.new(0.113149844, 0, 0, 0)
G2L["88"].Rotation = 0
G2L["88"].Selectable = false
G2L["88"].SelectionOrder = 0
G2L["88"].Size = UDim2.new(0, 232, 0, 29)
G2L["88"].Visible = true
G2L["88"].ZIndex = 1
G2L["88"].Parent = G2L["87"]

--JOHNDOE.loader.Frame.Frame.TextLabel
G2L["89"].Name = [[TextLabel]]
G2L["89"].FontFace = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["89"].Text = [[ui by arti#1337]]
G2L["89"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["89"].TextScaled = false
G2L["89"].TextSize = 10
G2L["89"].TextStrokeColor3 = Color3.fromRGB(241.00002, 241.00002, 241.00002)
G2L["89"].TextStrokeTransparency = 0.9
G2L["89"].TextWrapped = true
G2L["89"].TextXAlignment = Enum.TextXAlignment.Center
G2L["89"].TextYAlignment = Enum.TextYAlignment.Center
G2L["89"].Active = false
G2L["89"].AnchorPoint = Vector2.new(0, 0)
G2L["89"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["89"].BackgroundTransparency = 1
G2L["89"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["89"].BorderSizePixel = 1
G2L["89"].ClipsDescendants = false
G2L["89"].Draggable = false
G2L["89"].Position = UDim2.new(0.10091743, 0, 5.413793, 0)
G2L["89"].Rotation = 0
G2L["89"].Selectable = false
G2L["89"].SelectionOrder = 0
G2L["89"].Size = UDim2.new(0, 261, 0, 19)
G2L["89"].Visible = true
G2L["89"].ZIndex = 1
G2L["89"].Parent = G2L["87"]

--JOHNDOE.loader.Frame.Frame.button
G2L["90"].Name = [[button]]
G2L["90"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["90"].MultiLine = false
G2L["90"].PlaceholderColor3 = Color3.new(0.7, 0.7, 0.7)
G2L["90"].PlaceholderText = [[]]
G2L["90"].Text = [[]]
G2L["90"].TextColor3 = Color3.fromRGB(0, 0, 0)
G2L["90"].TextScaled = false
G2L["90"].TextSize = 14
G2L["90"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["90"].TextStrokeTransparency = 1
G2L["90"].TextWrapped = false
G2L["90"].TextXAlignment = Enum.TextXAlignment.Center
G2L["90"].TextYAlignment = Enum.TextYAlignment.Center
G2L["90"].Active = true
G2L["90"].AnchorPoint = Vector2.new(0, 0)
G2L["90"].BackgroundColor3 = Color3.fromRGB(255, 170, 0)
G2L["90"].BackgroundTransparency = 1
G2L["90"].BorderColor3 = Color3.fromRGB(255, 170, 0)
G2L["90"].BorderSizePixel = 0
G2L["90"].ClipsDescendants = false
G2L["90"].Draggable = false
G2L["90"].Position = UDim2.new(0, 40, 0.23, 118)
G2L["90"].Rotation = 0
G2L["90"].Selectable = true
G2L["90"].SelectionOrder = 0
G2L["90"].Size = UDim2.new(0, 243, 0, -22)
G2L["90"].Visible = true
G2L["90"].ZIndex = 1
G2L["90"].Parent = G2L["87"]

--JOHNDOE.loader.Frame.Frame.button.bar2_Roundify_12px
G2L["91"].Name = [[bar2_Roundify_12px]]
G2L["91"].Image = [[rbxassetid://2851926732]]
G2L["91"].ImageColor3 = Color3.fromRGB(255, 170, 0)
G2L["91"].ScaleType = Enum.ScaleType.Slice
G2L["91"].SliceCenter = Rect.new(12, 12, 12, 12)
G2L["91"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["91"].Active = false
G2L["91"].AnchorPoint = Vector2.new(0, 0)
G2L["91"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["91"].BackgroundTransparency = 1
G2L["91"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["91"].BorderSizePixel = 1
G2L["91"].ClipsDescendants = false
G2L["91"].Draggable = false
G2L["91"].Position = UDim2.new(0.008230452, 0, 1.0454545, 0)
G2L["91"].Rotation = 0
G2L["91"].Selectable = false
G2L["91"].SelectionOrder = 0
G2L["91"].Size = UDim2.new(1, 0, 1, 0)
G2L["91"].Visible = true
G2L["91"].ZIndex = 1
G2L["91"].Parent = G2L["90"]

--JOHNDOE.loader.Frame.Frame.button.bar2_Roundify_12px.manager
G2L["92"].Name = [[manager]]
G2L["92"].Parent = G2L["91"]

--JOHNDOE.loader.Frame.Frame.button.bar2_Roundify_12px.txt
G2L["93"].Name = [[txt]]
G2L["93"].FontFace = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["93"].Text = [[LOADING]]
G2L["93"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["93"].TextScaled = false
G2L["93"].TextSize = 20
G2L["93"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["93"].TextStrokeTransparency = 1
G2L["93"].TextWrapped = false
G2L["93"].TextXAlignment = Enum.TextXAlignment.Left
G2L["93"].TextYAlignment = Enum.TextYAlignment.Center
G2L["93"].Active = false
G2L["93"].AnchorPoint = Vector2.new(0, 0)
G2L["93"].BackgroundColor3 = Color3.fromRGB(255, 170, 0)
G2L["93"].BackgroundTransparency = 0
G2L["93"].BorderColor3 = Color3.fromRGB(255, 170, 0)
G2L["93"].BorderSizePixel = 1
G2L["93"].ClipsDescendants = false
G2L["93"].Draggable = false
G2L["93"].Position = UDim2.new(0, 72, 0.5, -1)
G2L["93"].Rotation = 0
G2L["93"].Selectable = false
G2L["93"].SelectionOrder = 0
G2L["93"].Size = UDim2.new(1.0123457, -208, -0.3636363, 11)
G2L["93"].Visible = true
G2L["93"].ZIndex = 2
G2L["93"].Parent = G2L["91"]

--JOHNDOE.loader.Frame.newscreen
G2L["94"].Name = [[newscreen]]
G2L["94"].Active = false
G2L["94"].AnchorPoint = Vector2.new(0, 0)
G2L["94"].BackgroundColor3 = Color3.fromRGB(18, 18, 18)
G2L["94"].BackgroundTransparency = 1
G2L["94"].BorderColor3 = Color3.fromRGB(18, 18, 18)
G2L["94"].BorderSizePixel = 1
G2L["94"].ClipsDescendants = false
G2L["94"].Draggable = false
G2L["94"].Position = UDim2.new(0.059174236, 0, 0.30020306, 0)
G2L["94"].Rotation = 0
G2L["94"].Selectable = false
G2L["94"].SelectionOrder = 0
G2L["94"].Size = UDim2.new(0, 288, 0, 81)
G2L["94"].Visible = true
G2L["94"].ZIndex = 1
G2L["94"].Parent = G2L["85"]

--JOHNDOE.loader.Frame.newscreen.WelcomeBack
G2L["95"].Name = [[WelcomeBack]]
G2L["95"].FontFace = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal)
G2L["95"].Text = [[Welcome Back]]
G2L["95"].TextColor3 = Color3.fromRGB(255, 170, 0)
G2L["95"].TextScaled = false
G2L["95"].TextSize = 25
G2L["95"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["95"].TextStrokeTransparency = 1
G2L["95"].TextWrapped = false
G2L["95"].TextXAlignment = Enum.TextXAlignment.Left
G2L["95"].TextYAlignment = Enum.TextYAlignment.Center
G2L["95"].Active = false
G2L["95"].AnchorPoint = Vector2.new(0, 0)
G2L["95"].BackgroundColor3 = Color3.fromRGB(18, 18, 18)
G2L["95"].BackgroundTransparency = 1
G2L["95"].BorderColor3 = Color3.fromRGB(18, 18, 18)
G2L["95"].BorderSizePixel = 1
G2L["95"].ClipsDescendants = false
G2L["95"].Draggable = false
G2L["95"].Position = UDim2.new(0.19791667, 0, -0.05355345, 0)
G2L["95"].Rotation = 0
G2L["95"].Selectable = false
G2L["95"].SelectionOrder = 0
G2L["95"].Size = UDim2.new(0, 132, 0, 36)
G2L["95"].Visible = true
G2L["95"].ZIndex = 1
G2L["95"].Parent = G2L["94"]

--JOHNDOE.loader.Frame.newscreen.WelcomeBack.LocalScript
G2L["96"].Name = [[LocalScript]]
G2L["96"].Parent = G2L["95"]

--JOHNDOE.loader.Frame.newscreen.user
G2L["97"].Name = [[user]]
G2L["97"].FontFace = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal)
G2L["97"].Text = [[beast4]]
G2L["97"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["97"].TextScaled = false
G2L["97"].TextSize = 16
G2L["97"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["97"].TextStrokeTransparency = 1
G2L["97"].TextWrapped = false
G2L["97"].TextXAlignment = Enum.TextXAlignment.Center
G2L["97"].TextYAlignment = Enum.TextYAlignment.Center
G2L["97"].Active = false
G2L["97"].AnchorPoint = Vector2.new(0, 0)
G2L["97"].BackgroundColor3 = Color3.fromRGB(18, 18, 18)
G2L["97"].BackgroundTransparency = 1
G2L["97"].BorderColor3 = Color3.fromRGB(18, 18, 18)
G2L["97"].BorderSizePixel = 1
G2L["97"].ClipsDescendants = false
G2L["97"].Draggable = false
G2L["97"].Position = UDim2.new(0.19444445, 0, 0.2877878, 0)
G2L["97"].Rotation = 0
G2L["97"].Selectable = false
G2L["97"].SelectionOrder = 0
G2L["97"].Size = UDim2.new(0, 175, 0, 32)
G2L["97"].Visible = true
G2L["97"].ZIndex = 1
G2L["97"].Parent = G2L["94"]

--JOHNDOE.loader.Frame.newscreen.user.fade
G2L["98"].Name = [[fade]]
G2L["98"].Parent = G2L["97"]

--JOHNDOE.loader.Frame.newscreen.user.usermanage
G2L["99"].Name = [[usermanage]]
G2L["99"].Parent = G2L["97"]

--JOHNDOE.loader.Frame.Dragify
G2L["100"].Name = [[Dragify]]
G2L["100"].Parent = G2L["85"]

--[[
    Scripts
--]]
--JOHNDOE.Main.Shadow.Frame.Frame.Execute.RIPPLE
local function C_G2L_10()
local script = G2L["10"]
-- This file was generated using Luraph Obfuscator v11.5 by memcorrupt.

local executeripplellIIiii11iI1ilii1l1 = assert local executerippleili11lIIi1ilIi11li1 = select local executeripplelIl1llIiiIll11i11iIIi = tonumber local executerippleii1Ii11iii11l11liII = unpack local executeripplei1Iii11IllillIliill = pcall local executeripplelilillllllllIiI1Ii1 = setfenv local executerippleIlilliiI1IlI1lIli1I = setmetatable local executerippleiiii1Iil1II1lIIi1iI = type local executerippleIIiiIllI1II11iI1ili = getfenv local executerippleIi1IlI11iiiilliIlII = tostring local executeripplei11I1IIi11i11II1II1 = error local executeripplei111Ii1IIlilll1l1il = string.sub local executeripplelIl1ll11iili1lIIlllli = string.byte local executeripplelii1IIiI1il1I1lIliI = string.char local executeripplel1lllIill1I111I1iIl = string.rep local executeripplell111iiIl11l1lIlII1 = string.gsub local executeripplei111lilllI1IliiiIii = string.match local executerippleIil1II11iiiiI11l111 = 1 local function executeripplelIlI1llIl1l1liliIIii1(executerippleIIIlliIiliIiI1lIlii, executeripplelIl111iillll1lI11l1iI) local executeripplei1lIllIi111Ii11lllI executerippleIIIlliIiliIiI1lIlii = executeripplell111iiIl11l1lIlII1(executeripplei111Ii1IIlilll1l1il(executerippleIIIlliIiliIiI1lIlii, 5), "..", function(executeripplei1i1illIII1ll1iII1i) if executeripplelIl1ll11iili1lIIlllli(executeripplei1i1illIII1ll1iII1i, 2) == 71 then executeripplei1lIllIi111Ii11lllI = executeripplelIl1llIiiIll11i11iIIi(executeripplei111Ii1IIlilll1l1il(executeripplei1i1illIII1ll1iII1i, 1, 1)) return "" else local executerippleI111II1llll11I1Il11 = executeripplelii1IIiI1il1I1lIliI(executeripplelIl1llIiiIll11i11iIIi(executeripplei1i1illIII1ll1iII1i, 16)) if executeripplei1lIllIi111Ii11lllI then local executeripplel1I1Il1Ii1i1iililli = executeripplel1lllIill1I111I1iIl(executerippleI111II1llll11I1Il11, executeripplei1lIllIi111Ii11lllI) executeripplei1lIllIi111Ii11lllI = nil return executeripplel1I1Il1Ii1i1iililli else return executerippleI111II1llll11I1Il11 end end end) local function executerippleiIIiIIi1liiI1ll11li() local executerippleililiIliii111iIil11 = executeripplelIl1ll11iili1lIIlllli(executerippleIIIlliIiliIiI1lIlii, executerippleIil1II11iiiiI11l111, executerippleIil1II11iiiiI11l111) executerippleIil1II11iiiiI11l111 = executerippleIil1II11iiiiI11l111 + 1 return executerippleililiIliii111iIil11 end local function executeripplelIll1iiill1i1I11iI1li() local executerippleililiIliii111iIil11, executerippleI111II1llll11I1Il11, executeripplel1I1Il1Ii1i1iililli, executeripplelIlil1IIiIi1li1llII1I = executeripplelIl1ll11iili1lIIlllli(executerippleIIIlliIiliIiI1lIlii, executerippleIil1II11iiiiI11l111, executerippleIil1II11iiiiI11l111 + 3) executerippleIil1II11iiiiI11l111 = executerippleIil1II11iiiiI11l111 + 4 return executeripplelIlil1IIiIi1li1llII1I * 16777216 + executeripplel1I1Il1Ii1i1iililli * 65536 + executerippleI111II1llll11I1Il11 * 256 + executerippleililiIliii111iIil11 end local function executeripplelIlI1IliiIIiIlli1lIii(executeripplelIliI1IIiiiIlII1l1lIl, executerippleIliIiiIlI1l1I1iIlII, executeripplellI11iiI1I1i1I1I1lI) if executeripplellI11iiI1I1i1I1I1lI then local executerippleIi1i1l1ii1i1I11IIII, executeripplelIlIiiIiiilIiI1iiIl = 0, 0 for executerippleiI1II1111l1iiiill1I = executerippleIliIiiIlI1l1I1iIlII, executeripplellI11iiI1I1i1I1I1lI do executerippleIi1i1l1ii1i1I11IIII = executerippleIi1i1l1ii1i1I11IIII + 2 ^ executeripplelIlIiiIiiilIiI1iiIl * executeripplelIlI1IliiIIiIlli1lIii(executeripplelIliI1IIiiiIlII1l1lIl, executerippleiI1II1111l1iiiill1I) executeripplelIlIiiIiiilIiI1iiIl = executeripplelIlIiiIiiilIiI1iiIl + 1 end return executerippleIi1i1l1ii1i1I11IIII else local executerippleli1iil1IlIl1l11l1il = 2 ^ (executerippleIliIiiIlI1l1I1iIlII - 1) return executerippleli1iil1IlIl1l11l1il <= executeripplelIliI1IIiiiIlII1l1lIl % (executerippleli1iil1IlIl1l11l1il + executerippleli1iil1IlIl1l11l1il) and 1 or 0 end end local function executeripplelIl1Illll11Ii1Ii1IiIi() local executerippleililiIliii111iIil11, executerippleI111II1llll11I1Il11 = executeripplelIll1iiill1i1I11iI1li(), executeripplelIll1iiill1i1I11iI1li() if executerippleililiIliii111iIil11 == 0 and executerippleI111II1llll11I1Il11 == 0 then return 0 end return (-2 * executeripplelIlI1IliiIIiIlli1lIii(executerippleI111II1llll11I1Il11, 32) + 1) * 2 ^ (executeripplelIlI1IliiIIiIlli1lIii(executerippleI111II1llll11I1Il11, 21, 31) - 1023) * ((executeripplelIlI1IliiIIiIlli1lIii(executerippleI111II1llll11I1Il11, 1, 20) * 4294967296 + executerippleililiIliii111iIil11) / 4503599627370496 + 1) end local function executeripplelIl1llI1iI1lIlIIiiIl1(executeripplel1iI11iI1llIIli11Ii) local executeripplelllllIIlilII1ll1I1I = { executeripplelIl1ll11iili1lIIlllli(executerippleIIIlliIiliIiI1lIlii, executerippleIil1II11iiiiI11l111, executerippleIil1II11iiiiI11l111 + 3) } executerippleIil1II11iiiiI11l111 = executerippleIil1II11iiiiI11l111 + 4 local executerippleIi1I1lIl1l1Iii1I11I = { nil, nil, nil, nil, nil, nil, nil, nil } for executerippleiI1II1111l1iiiill1I = 1, 8 do executerippleIi1I1lIl1l1Iii1I11I[executerippleiI1II1111l1iiiill1I] = executeripplelIlI1IliiIIiIlli1lIii(executeripplel1iI11iI1llIIli11Ii, executerippleiI1II1111l1iiiill1I) end local executeripplelIl1iiIlli11I11l1liI1 = "" for executerippleiI1II1111l1iiiill1I = 1, 4 do local executerippleIi1i1l1ii1i1I11IIII, executeripplelIlIiiIiiilIiI1iiIl = 0, 0 for executeripplellIIiII1I11l1IillI1 = 1, 8 do local executerippleIIlliIl1iilIlIi1I1I = executeripplelIlI1IliiIIiIlli1lIii(executeripplelllllIIlilII1ll1I1I[executerippleiI1II1111l1iiiill1I], executeripplellIIiII1I11l1IillI1) if executerippleIi1I1lIl1l1Iii1I11I[executeripplellIIiII1I11l1IillI1] == 1 then executerippleIIlliIl1iilIlIi1I1I = executerippleIIlliIl1iilIlIi1I1I == 1 and 0 or 1 end executerippleIi1i1l1ii1i1I11IIII = executerippleIi1i1l1ii1i1I11IIII + 2 ^ executeripplelIlIiiIiiilIiI1iiIl * executerippleIIlliIl1iilIlIi1I1I executeripplelIlIiiIiiilIiI1iiIl = executeripplelIlIiiIiiilIiI1iiIl + 1 end executeripplelIl1iiIlli11I11l1liI1 = executeripplelIl1iiIlli11I11l1liI1 .. executeripplelIl1iiIlli11I11l1liI1.char(executerippleIi1i1l1ii1i1I11IIII) end local executerippleililiIliii111iIil11, executerippleI111II1llll11I1Il11, executeripplel1I1Il1Ii1i1iililli, executeripplelIlil1IIiIi1li1llII1I = executeripplelIl1ll11iili1lIIlllli(executeripplelIl1iiIlli11I11l1liI1, 1, 4) return executeripplelIlil1IIiIi1li1llII1I * 16777216 + executeripplel1I1Il1Ii1i1iililli * 65536 + executerippleI111II1llll11I1Il11 * 256 + executerippleililiIliii111iIil11 end local function executerippleliIli1l1l1Iil1iI1iI(executeripplel1iI11iI1llIIli11Ii) local executeripplelIl111lIliiIIIi11llIl = executeripplelIll1iiill1i1I11iI1li() executerippleIil1II11iiiiI11l111 = executerippleIil1II11iiiiI11l111 + executeripplelIl111lIliiIIIi11llIl local executerippleIi1I1lIl1l1Iii1I11I = { nil, nil, nil, nil, nil, nil, nil, nil } for executerippleiI1II1111l1iiiill1I = 1, 8 do executerippleIi1I1lIl1l1Iii1I11I[executerippleiI1II1111l1iiiill1I] = executeripplelIlI1IliiIIiIlli1lIii(executeripplel1iI11iI1llIIli11Ii, executerippleiI1II1111l1iiiill1I) end local executeripplelIl1iiIlli11I11l1liI1 = "" for executerippleiI1II1111l1iiiill1I = 1, executeripplelIl111lIliiIIIi11llIl do local executerippleIi1i1l1ii1i1I11IIII, executeripplelIlIiiIiiilIiI1iiIl = 0, 0 for executeripplellIIiII1I11l1IillI1 = 1, 8 do local executerippleIIlliIl1iilIlIi1I1I = executeripplelIlI1IliiIIiIlli1lIii(executeripplelIl1ll11iili1lIIlllli(executerippleIIIlliIiliIiI1lIlii, executerippleIil1II11iiiiI11l111 - executeripplelIl111lIliiIIIi11llIl + executerippleiI1II1111l1iiiill1I - 1), executeripplellIIiII1I11l1IillI1) if executerippleIi1I1lIl1l1Iii1I11I[executeripplellIIiII1I11l1IillI1] == 1 then executerippleIIlliIl1iilIlIi1I1I = executerippleIIlliIl1iilIlIi1I1I == 1 and 0 or 1 end executerippleIi1i1l1ii1i1I11IIII = executerippleIi1i1l1ii1i1I11IIII + 2 ^ executeripplelIlIiiIiiilIiI1iiIl * executerippleIIlliIl1iilIlIi1I1I executeripplelIlIiiIiiilIiI1iiIl = executeripplelIlIiiIiiilIiI1iiIl + 1 end executeripplelIl1iiIlli11I11l1liI1 = executeripplelIl1iiIlli11I11l1liI1 .. executeripplelIl1iiIlli11I11l1liI1.char(executerippleIi1i1l1ii1i1I11IIII) end return executeripplelIl1iiIlli11I11l1liI1 end local executeripplel1l1ilIIilll11ilil1 = executerippleiIIiIIi1liiI1ll11li() local executeripplel1l1IiIIllii1i111li = executerippleiIIiIIi1liiI1ll11li() local function executerippleI1IlIl1I1I1IIii11iI() local executerippleIIiI111lIIlliI1lI1I = { [92614] = {}, [58553] = {}, [50543] = {}, [47705] = {} } local executerippleillIi1II1IIlIIlIlI1 = #{255} executerippleiIIiIIi1liiI1ll11li() executerippleiIIiIIi1liiI1ll11li() executerippleiIIiIIi1liiI1ll11li() executeripplelIll1iiill1i1I11iI1li() local executeripplelilll1lIlI11IiI1ili = executeripplelIll1iiill1i1I11iI1li() - (#{ 5043, 4040, 6840, 2390, 2189, 5390, 5051, 5297, 1230, 992, 3220, 6255, 828, 244, 2909, 2048, 2155, 3718, 5065, 5331, 2285, 5077 } + 133748) for executerippleiI1II1111l1iiiill1I = executerippleillIi1II1IIlIIlIlI1, executeripplelilll1lIlI11IiI1ili do local executeripplel11II1I1lI1I1I1li1i = {} local executerippleiiii1Iil1II1lIIi1iI = executerippleiIIiIIi1liiI1ll11li() if executerippleiiii1Iil1II1lIIi1iI == #{ 3745, 1175, 2662, 868, 6502, 4439, 1399, 1681, 5940, 385, 1757, 4467, 3896, 2874, 2192, 4187, 1631, 5031, 3476, 722, 6750 } + 7 then executeripplel11II1I1lI1I1I1li1i[54297] = executerippleliIli1l1l1Iil1iI1iI(executeripplel1l1ilIIilll11ilil1) end if executerippleiiii1Iil1II1lIIi1iI == #{ 2628, 140, 74, 5770, 4247, 6854, 1028, 3307, 4447, 1495, 883, 30, 3264, 919, 71, 3237, 4892, 5908, 1492, 5217, 5426, 3448 } + 229 then executeripplel11II1I1lI1I1I1li1i[54297] = executerippleiIIiIIi1liiI1ll11li() + executeripplelIll1iiill1i1I11iI1li() + executeripplelIl1Illll11Ii1Ii1IiIi() end if executerippleiiii1Iil1II1lIIi1iI == #{ 965, 4439, 897, 4421, 667, 4632, 6345, 5172, 5736, 5916, 1526, 2632, 5699, 6557, 441, 5800, 2511, 4229, 383, 5061, 2933, 72, 6487 } + 189 then executeripplel11II1I1lI1I1I1li1i[54297] = executeripplelIl1Illll11Ii1Ii1IiIi() end if executerippleiiii1Iil1II1lIIi1iI == #{ 1456, 4947, 4329, 5896, 889, 751, 1015, 5972, 6122, 1090, 5311, 3549, 1210, 6442, 5112, 937, 3134, 3180, 4090, 6044, 5223, 3197 } + 197 then executeripplel11II1I1lI1I1I1li1i[54297] = executerippleiIIiIIi1liiI1ll11li() end if executerippleiiii1Iil1II1lIIi1iI == #{ 2668, 1291, 5178, 4773, 6790, 4698, 1538, 1450, 1603, 4889, 5854, 1613, 5179, 3514, 1171, 2432, 169, 6236, 5727, 5208, 6580, 4975, 1546, 6385 } + 166 then executeripplel11II1I1lI1I1I1li1i[54297] = executeripplelIl1Illll11Ii1Ii1IiIi() + executeripplelIl1Illll11Ii1Ii1IiIi() end if executerippleiiii1Iil1II1lIIi1iI == #{ 1030, 6537, 6799, 6365, 1415, 2464, 3260, 1626, 2124, 347, 3660, 2690, 3792, 4642, 873, 2046, 6870, 578, 6381, 2234, 2269 } + 82 then executeripplel11II1I1lI1I1I1li1i[54297] = executeripplelIll1iiill1i1I11iI1li() end if executerippleiiii1Iil1II1lIIi1iI == #{ 5532, 518, 1535, 1945, 4714, 1331, 2151, 2519, 6244, 2632, 6537, 179, 2193, 4493, 2586, 3929, 1499, 750, 6809, 6335 } + 196 then executeripplel11II1I1lI1I1I1li1i[54297] = #{ 4955, 4542, 5149, 5225, 3731, 4540, 2071, 1196, 1856, 4385, 5151, 5611, 4967, 6030, 5216, 4485, 2651, 2785, 5939, 112 } + 17089 == #{ 4955, 4542, 5149, 5225, 3731, 4540, 2071, 1196, 1856, 4385, 5151, 5611, 4967, 6030, 5216, 4485, 2651, 2785, 5939, 112 } + 17089 end if executerippleiiii1Iil1II1lIIi1iI == #{ 1266, 2967, 1300, 6467, 6429, 1504, 2531, 2986, 6131, 2082, 2433, 4580, 1843, 6609, 995, 3094, 968, 1823, 6525, 2309, 4880 } + 70 then executeripplel11II1I1lI1I1I1li1i[54297] = #{ 4365, 2595, 6638, 2653, 2224, 4766, 3795, 3761, 928, 1989, 2836, 1713, 3639, 6432, 6227, 5800, 4205, 6855, 6012, 548, 2151, 6455 } + 123611 == #{ 2945, 3372, 6954, 4921, 4202, 252, 3640, 5903, 5757, 70, 5712, 2444, 335, 2868, 5116, 5418, 4908, 6368, 6852, 4092, 4578, 5985 } + 51791 end if executerippleiiii1Iil1II1lIIi1iI == #{ 1207, 5098, 343, 4361, 1855, 394, 4176, 4665, 104, 2742, 267, 2292, 542, 1424, 5850, 4629, 1507, 4764, 1525, 2660 } + 95 then executeripplel11II1I1lI1I1I1li1i[54297] = executerippleliIli1l1l1Iil1iI1iI(#{ 3747, 4004, 875, 1032, 2283, 5191, 245, 2068, 3735, 1823, 2416, 4352, 834, 1640, 6087, 4100, 1730, 6001, 4892, 3332 } + 100) end executerippleIIiI111lIIlliI1lI1I[92614][executerippleiI1II1111l1iiiill1I - executerippleillIi1II1IIlIIlIlI1] = executeripplel11II1I1lI1I1I1li1i end executeripplelIll1iiill1i1I11iI1li() executeripplelIll1iiill1i1I11iI1li() executeripplelIll1iiill1i1I11iI1li() local executeripplelilll1lIlI11IiI1ili = executeripplelIll1iiill1i1I11iI1li() for executerippleiI1II1111l1iiiill1I = executerippleillIi1II1IIlIIlIlI1, executeripplelilll1lIlI11IiI1ili do executerippleIIiI111lIIlliI1lI1I[47705][executerippleiI1II1111l1iiiill1I - executerippleillIi1II1IIlIIlIlI1] = executerippleI1IlIl1I1I1IIii11iI() end local executeripplelilll1lIlI11IiI1ili = executeripplelIll1iiill1i1I11iI1li() - (#{ 1683, 6306, 959, 2054, 3448, 5825, 1153, 1141, 5016, 716, 6317, 1166, 5406, 2528, 2418, 6642, 6487, 5849, 5580, 3097, 5664, 6285, 239 } + 133721) for executerippleiI1II1111l1iiiill1I = executerippleillIi1II1IIlIIlIlI1, executeripplelilll1lIlI11IiI1ili do local executeripplellIIi1111lIl11lI11i = {} local executerippleIIl1IIIlIII11ilili1 = executeripplelIl1llI1iI1lIlIIiiIl1(executeripplel1l1IiIIllii1i111li) executeripplellIIi1111lIl11lI11i[42089] = executeripplelIlI1IliiIIiIlli1lIii(executerippleIIl1IIIlIII11ilili1, #{ 2504, 1601, 4934, 4436, 1253, 1245, 1401, 1654, 112, 1283 }, #{ 4013, 2408, 6310, 3575, 6316, 4392, 3753, 5611, 3, 806, 3038, 1496, 112, 1408, 2149, 3071, 6021, 858 }) executeripplellIIi1111lIl11lI11i[129003] = executeripplelIlI1IliiIIiIlli1lIii(executerippleIIl1IIIlIII11ilili1, #{ 6535, 3454, 3454, 2159, 5556, 2970, 3676, 6418, 2492, 4973 }, #{ 5593, 6952, 4102, 5320, 4758, 5982, 2331, 3368, 6186, 5305, 6366, 1834, 1979, 5029, 1426, 3200, 3834, 3713 }) executeripplellIIi1111lIl11lI11i[2007] = executeripplelIlI1IliiIIiIlli1lIii(executerippleIIl1IIIlIII11ilili1, #{ 1, 4426, 2298, 342, 3588, 4137, 4541, 4316, 1455, 6924, 3037, 28, 3082, 3785, 6891, 1276, 5275, 771, 2318 }, #{ 4687, 1819, 6717, 1153, 3249, 6813, 5080, 4260, 5630, 3164, 4559, 19, 1651, 500, 1004, 6320, 2258, 3872, 5486, 357 } + 6) executeripplellIIi1111lIl11lI11i[80237] = executeripplelIlI1IliiIIiIlli1lIii(executerippleIIl1IIIlIII11ilili1, #{6712}, #{ 3687, 2849, 4718, 3028, 6465, 6840, 1678, 4710, 6257, 6361, 2146, 4620, 5094, 1909, 5531, 4933, 1666, 5850 }) executeripplellIIi1111lIl11lI11i[28403] = executeripplelIlI1IliiIIiIlli1lIii(executerippleIIl1IIIlIII11ilili1, #{ 33, 5800, 3985, 1370, 5483, 909, 1597, 5043, 2301, 4530, 1358, 6637, 463, 2196, 2528, 1067, 5934, 6758, 5996, 3445 } + 7, #{ 5745, 2990, 5409, 6500, 5342, 2896, 1992, 3383, 3199, 1063, 278, 1150, 4061, 3502, 247, 534, 5538, 3011, 910, 2404 } + 12) executeripplellIIi1111lIl11lI11i[55239] = executeripplelIlI1IliiIIiIlli1lIii(executerippleIIl1IIIlIII11ilili1, #{5113}, #{ 1233, 3486, 1832, 3462, 608, 1159, 6081, 943, 2551 }) executeripplellIIi1111lIl11lI11i[38506] = executeripplelIlI1IliiIIiIlli1lIii(executerippleIIl1IIIlIII11ilili1, #{6692}, #{ 409, 6738, 6517, 2080, 2486, 6461, 4324, 2051, 559 }) executerippleIIiI111lIIlliI1lI1I[50543][executerippleiI1II1111l1iiiill1I] = executeripplellIIi1111lIl11lI11i end executeripplelIll1iiill1i1I11iI1li() executerippleIIiI111lIIlliI1lI1I[47174] = executerippleiIIiIIi1liiI1ll11li() executerippleiIIiIIi1liiI1ll11li() executeripplelIll1iiill1i1I11iI1li() executerippleiIIiIIi1liiI1ll11li() executerippleiIIiIIi1liiI1ll11li() executerippleIIiI111lIIlliI1lI1I[56108] = executerippleiIIiIIi1liiI1ll11li() executerippleiIIiIIi1liiI1ll11li() local executeripplelilll1lIlI11IiI1ili = executeripplelIll1iiill1i1I11iI1li() for executerippleiI1II1111l1iiiill1I = executerippleillIi1II1IIlIIlIlI1, executeripplelilll1lIlI11IiI1ili do executerippleIIiI111lIIlliI1lI1I[58553][executerippleiI1II1111l1iiiill1I] = executeripplelIll1iiill1i1I11iI1li() end executeripplelIll1iiill1i1I11iI1li() executeripplelIll1iiill1i1I11iI1li() executerippleiIIiIIi1liiI1ll11li() executerippleIIiI111lIIlliI1lI1I[28085] = executerippleiIIiIIi1liiI1ll11li() executerippleiIIiIIi1liiI1ll11li() executerippleiIIiIIi1liiI1ll11li() executeripplelIll1iiill1i1I11iI1li() executeripplelIll1iiill1i1I11iI1li() return executerippleIIiI111lIIlliI1lI1I end local function executeripplei111IiiIIllllii11I1(executerippleIIiI111lIIlliI1lI1I, executeripplelIl111iillll1lI11l1iI, executeripplelIl1iiIlii1l1ilIlll1l) local executeripplelI1li1IIIlllil1Ill1, executeripplelIll1lI1iiiiilIillIil = 21, 24 local executeripplelllll1lil1llllliIii = executerippleIIiI111lIIlliI1lI1I[50543] local executerippleII1Ili1II1lllliIi1I = executerippleIlilliiI1IlI1lIli1I({}, { __index = function(executerippleIilI1ililiil1111lI1, executerippleiIIi1iilIIl11iIiiIi) local executeripplelIl1iiIlli11I11l1liI1 = executerippleIIiI111lIIlliI1lI1I[92614][executerippleiIIi1iilIIl11iIiiIi] if executeripplei111Ii1IIlilll1l1il(executerippleiiii1Iil1II1lIIi1iI(executeripplelIl1iiIlli11I11l1liI1[54297]), 1, 1) == "s" then return { [54297] = executeripplei111Ii1IIlilll1l1il(executeripplelIl1iiIlli11I11l1liI1[54297], 5) } end return executeripplelIl1iiIlli11I11l1liI1 end }) local executeripplelIli1lIIIlIl1i1liIlII = 56108 local executerippleIIIi11iliIilIii1I1i = executerippleIIiI111lIIlliI1lI1I[47705] local executerippleI11iIi1l1ll1llI1III = 54297 local executerippleliI1lliIIiiIilIiIi1 = executerippleIIiI111lIIlliI1lI1I[28085] local executerippleiII1iIIiIIiII11I11l = 28403 local executerippleiiIiIi1I1Il1IiIiilI = executerippleIIiI111lIIlliI1lI1I[58553] local executeripplelIli1lIIi1I11Ii1l1i1I = 55239 local function executeripplellIilIii1i1iiIiI1ll(...) local executeripplelIliIIIIlii11l1111IiI = 0 local executeripplelIll1IllIiilIiIiI1I11 = { executerippleii1Ii11iii11l11liII({}, 1, executerippleIIiI111lIIlliI1lI1I[47174]) } local executerippleIII1l11i1iililII1I1 = 1 local executeripplel1iI11lllilliiiliIl = {} local executeripplelIl1liIi1Iii1I1l11iIi = {} local executeripplellIllI111illI1lill1 = 1 local executeripplelIl111iillll1lI11l1iI = executerippleIIiiIllI1II11iI1ili() local executeripplelIl1Iiill1iill1l1Ii1I = { ... } local executerippleIII111i1iliiliiiI11 = {} local executerippleilI1IlIii11I1IIiIi1 = #executeripplelIl1Iiill1iill1l1Ii1I - 1 for executerippleiI1II1111l1iiiill1I = 0, executerippleilI1IlIii11I1IIiIi1 do if executerippleliI1lliIIiiIilIiIi1 >= executerippleiI1II1111l1iiiill1I + 1 then executeripplelIll1IllIiilIiIiI1I11[executerippleiI1II1111l1iiiill1I] = executeripplelIl1Iiill1iill1l1Ii1I[executerippleiI1II1111l1iiiill1I + 1] end executerippleIII111i1iliiliiiI11[executerippleiI1II1111l1iiiill1I] = executeripplelIl1Iiill1iill1l1Ii1I[executerippleiI1II1111l1iiiill1I + 1] end local function executerippleI1lilll1IIiIilIIlli(...) local executeripplel1I1Il1Ii1i1iililli = executerippleili11lIIi1ilIi11li1("#", ...) local executerippleIilI1ililiil1111lI1 = { ... } return executeripplel1I1Il1Ii1i1iililli, executerippleIilI1ililiil1111lI1 end local executerippleIl1Il1IIiIIiIi1iIIl = #{ 5943, 6188, 3703, 6880, 4018, 3145, 5676, 6878, 1077, 4463, 6323, 2836, 1729, 3201, 6950, 669, 1567, 5927, 5169, 6111 } + 131051 local executeripplellii11llllilIi11lli local executeripplell11iIIiil1IllilIil = { function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii) local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] if executerippleiIllI1IIliIl1l1I1I1 > 255 then executerippleiIllI1IIliIl1l1I1I1 = executerippleII1Ili1II1lllliIi1I[executerippleiIllI1IIliIl1l1I1I1 - 256][executerippleI11iIi1l1ll1llI1III] else executerippleiIllI1IIliIl1l1I1I1 = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end if executeripplelIlIlliIIillIII1I1l11 > 255 then executeripplelIlIlliIIillIII1I1l11 = executerippleII1Ili1II1lllliIi1I[executeripplelIlIlliIIillIII1I1l11 - 256][executerippleI11iIi1l1ll1llI1III] else executeripplelIlIlliIIillIII1I1l11 = executeripplelIll1IllIiilIiIiI1I11[executeripplelIlIlliIIillIII1I1l11] end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11][executerippleiIllI1IIliIl1l1I1I1] = executeripplelIlIlliIIillIII1I1l11 end, nil, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii) local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] if executerippleiIllI1IIliIl1l1I1I1 > 255 then executerippleiIllI1IIliIl1l1I1I1 = executerippleII1Ili1II1lllliIi1I[executerippleiIllI1IIliIl1l1I1I1 - 256][executerippleI11iIi1l1ll1llI1III] else executerippleiIllI1IIliIl1l1I1I1 = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end if executeripplelIlIlliIIillIII1I1l11 > 255 then executeripplelIlIlliIIillIII1I1l11 = executerippleII1Ili1II1lllliIi1I[executeripplelIlIlliIIillIII1I1l11 - 256][executerippleI11iIi1l1ll1llI1III] else executeripplelIlIlliIIillIII1I1l11 = executeripplelIll1IllIiilIiIiI1I11[executeripplelIlIlliIIillIII1I1l11] end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executerippleiIllI1IIliIl1l1I1I1 / executeripplelIlIlliIIillIII1I1l11 end, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii) local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIli1IiiilIl1l11ill1I = (executeripplelIlIlliIIillIII1I1l11 - 1) * 50 if executerippleiIllI1IIliIl1l1I1I1 == 0 then executerippleiIllI1IIliIl1l1I1I1 = executeripplelIliIIIIlii11l1111IiI - executeripplelliII11iI1liilIil11 end for executerippleiI1II1111l1iiiill1I = 1, executerippleiIllI1IIliIl1l1I1I1 do executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11][executeripplelIli1IiiilIl1l11ill1I + executerippleiI1II1111l1iiiill1I] = executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11 + executerippleiI1II1111l1iiiill1I] end end, nil, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii) local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl if executeripplelIlIlliIIillIII1I1l11 == 82 then return executeripplellii11llllilIi11lli[25]({ [2007] = (executeripplelliII11iI1liilIil11 - 140) % 256, [55239] = (executerippleiIllI1IIliIl1l1I1I1 - 140) % 256, [80237] = 0 }) end if executeripplelIlIlliIIillIII1I1l11 == 243 then return executeripplellii11llllilIi11lli[23]({ [2007] = (executeripplelliII11iI1liilIil11 - 85) % 256, [129003] = (executerippleiIllI1IIliIl1l1I1I1 - 85) % 256, [80237] = 0 }) end executeripplelIl1iiIlii1l1ilIlll1l[executerippleiIllI1IIliIl1l1I1I1] = executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] end, nil, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii, executerippleIl1i1iliI1illl1Il1l) local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = #executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii, executerippleIl1i1iliI1illl1Il1l) local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] if executeripplelIlIlliIIillIII1I1l11 > 255 then executeripplelIlIlliIIillIII1I1l11 = executerippleII1Ili1II1lllliIi1I[executeripplelIlIlliIIillIII1I1l11 - 256][executerippleI11iIi1l1ll1llI1III] else executeripplelIlIlliIIillIII1I1l11 = executeripplelIll1IllIiilIiIiI1I11[executeripplelIlIlliIIillIII1I1l11] end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1][executeripplelIlIlliIIillIII1I1l11] end, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii, executerippleIl1i1iliI1illl1Il1l) local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = -executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end, nil, nil, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i) local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executeripplellIIiii11iI1ilii1l1(executeripplelIl1llIiiIll11i11iIIi(executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11]), "`for` initial value must be a number") executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11 + 1] = executeripplellIIiii11iI1ilii1l1(executeripplelIl1llIiiIll11i11iIIi(executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11 + 1]), "`for` limit value must be a number") executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11 + 2] = executeripplellIIiii11iI1ilii1l1(executeripplelIl1llIiiIll11i11iIIi(executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11 + 2]), "`for` step value must be a number") executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] - executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11 + 2] executerippleIII1l11i1iililII1I1 = executerippleIII1l11i1iililII1I1 + executeripplelIll1lI1IllliIlIlI1l1 end, nil, nil, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii) local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] if executerippleiIllI1IIliIl1l1I1I1 == 186 then return executeripplellii11llllilIi11lli[22]({ [2007] = (executeripplelliII11iI1liilIil11 - 28) % 256, [55239] = (executeripplelIlIlliIIillIII1I1l11 - 28) % 256, [80237] = 0 }) end local executeripplelIli1IiiilIl1l11ill1I = executeripplelliII11iI1liilIil11 + 2 local executerippleIli1IlI1iIii1II11lI = { executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11](executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11 + 1], executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11 + 2]) } for executerippleiI1II1111l1iiiill1I = 1, executeripplelIlIlliIIillIII1I1l11 do executeripplelIll1IllIiilIiIiI1I11[executeripplelIli1IiiilIl1l11ill1I + executerippleiI1II1111l1iiiill1I] = executerippleIli1IlI1iIii1II11lI[executerippleiI1II1111l1iiiill1I] end if executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11 + 3] ~= nil then executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11 + 2] = executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11 + 3] else executerippleIII1l11i1iililII1I1 = executerippleIII1l11i1iililII1I1 + 1 end end, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i) local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executerippleII1Ili1II1lllliIi1I[executeripplelIlI1i1i1Ii1i1il1li1i][executerippleI11iIi1l1ll1llI1III] end, function(executerippleIlII1iilllil1I11iii) local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] if executerippleiIllI1IIliIl1l1I1I1 == 2 then return executeripplellii11llllilIi11lli[30]({ [2007] = (executeripplelliII11iI1liilIil11 - 28) % 256, [55239] = (executeripplelIlIlliIIillIII1I1l11 - 28) % 256, [80237] = 0 }) end if not not executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] == (executeripplelIlIlliIIillIII1I1l11 == 0) then executerippleIII1l11i1iililII1I1 = executerippleIII1l11i1iililII1I1 + 1 end end, function(executerippleIlII1iilllil1I11iii) local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl executeripplelliII11iI1liilIil11 = executeripplelliII11iI1liilIil11 ~= 0 if executerippleiIllI1IIliIl1l1I1I1 > 255 then executerippleiIllI1IIliIl1l1I1I1 = executerippleII1Ili1II1lllliIi1I[executerippleiIllI1IIliIl1l1I1I1 - 256][executerippleI11iIi1l1ll1llI1III] else executerippleiIllI1IIliIl1l1I1I1 = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end if executeripplelIlIlliIIillIII1I1l11 > 255 then executeripplelIlIlliIIillIII1I1l11 = executerippleII1Ili1II1lllliIi1I[executeripplelIlIlliIIillIII1I1l11 - 256][executerippleI11iIi1l1ll1llI1III] else executeripplelIlIlliIIillIII1I1l11 = executeripplelIll1IllIiilIiIiI1I11[executeripplelIlIlliIIillIII1I1l11] end if executerippleiIllI1IIliIl1l1I1I1 == executeripplelIlIlliIIillIII1I1l11 ~= executeripplelliII11iI1liilIil11 then executerippleIII1l11i1iililII1I1 = executerippleIII1l11i1iililII1I1 + 1 end end, nil, function(executerippleIlII1iilllil1I11iii) local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIl1Iiill1iill1l1Ii1I, executerippleliiiliIl11Ii1i1iIII, executerippleli11Ill11il1li1I11I, executerippleiiilli1l1111li1l1l1 executeripplelIl1Iiill1iill1l1Ii1I = {} executerippleiiilli1l1111li1l1l1 = 0 if executerippleiIllI1IIliIl1l1I1I1 ~= 1 then if executerippleiIllI1IIliIl1l1I1I1 ~= 0 then executerippleli11Ill11il1li1I11I = executeripplelliII11iI1liilIil11 + executerippleiIllI1IIliIl1l1I1I1 - 1 else executerippleli11Ill11il1li1I11I = executeripplelIliIIIIlii11l1111IiI end for executerippleiI1II1111l1iiiill1I = executeripplelliII11iI1liilIil11 + 1, executerippleli11Ill11il1li1I11I do executerippleiiilli1l1111li1l1l1 = executerippleiiilli1l1111li1l1l1 + 1 executeripplelIl1Iiill1iill1l1Ii1I[executerippleiiilli1l1111li1l1l1] = executeripplelIll1IllIiilIiIiI1I11[executerippleiI1II1111l1iiiill1I] end executerippleli11Ill11il1li1I11I, executerippleliiiliIl11Ii1i1iIII = executerippleI1lilll1IIiIilIIlli(executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11](executerippleii1Ii11iii11l11liII(executeripplelIl1Iiill1iill1l1Ii1I, 1, executerippleli11Ill11il1li1I11I - executeripplelliII11iI1liilIil11))) else executerippleli11Ill11il1li1I11I, executerippleliiiliIl11Ii1i1iIII = executerippleI1lilll1IIiIilIIlli(executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11]()) end return true, executerippleliiiliIl11Ii1i1iIII, executerippleli11Ill11il1li1I11I end, nil, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii) local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplel1iI11iI1llIIli11Ii if executeripplelIlI1i1i1Ii1i1il1li1i == 100000 then executeripplel1iI11iI1llIIli11Ii = executeripplelIll1IllIiilIiIiI1I11[251] else executeripplel1iI11iI1llIIli11Ii = executerippleII1Ili1II1lllliIi1I[executeripplelIlI1i1i1Ii1i1il1li1i][executerippleI11iIi1l1ll1llI1III] end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executeripplelIl111iillll1lI11l1iI[executeripplel1iI11iI1llIIli11Ii] end, nil, function(executerippleIlII1iilllil1I11iii) local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl executerippleiIllI1IIliIl1l1I1I1 = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] if executeripplelIlIlliIIillIII1I1l11 > 255 then executeripplelIlIlliIIillIII1I1l11 = executerippleII1Ili1II1lllliIi1I[executeripplelIlIlliIIillIII1I1l11 - 256][executerippleI11iIi1l1ll1llI1III] else executeripplelIlIlliIIillIII1I1l11 = executeripplelIll1IllIiilIiIiI1I11[executeripplelIlIlliIIillIII1I1l11] end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11 + 1] = executerippleiIllI1IIliIl1l1I1I1 executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executerippleiIllI1IIliIl1l1I1I1[executeripplelIlIlliIIillIII1I1l11] end, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii, executerippleIl1i1iliI1illl1Il1l) local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] for executerippleiI1II1111l1iiiill1I = executeripplelliII11iI1liilIil11, #executeripplelIll1IllIiilIiIiI1I11 do local executeripplelIIIiIi1li1Ii1iii1l = executeripplellIllI111illI1lill1 for executeripplelIl1IIi1Illl1i1i1Iill, executerippleI1ll1liiiIIIllI1lll in next, executeripplel1iI11lllilliiiliIl, nil do for executeripplel1iI11iI1llIIli11Ii, executerippleli1ill1llIiIllIillI in next, executerippleI1ll1liiiIIIllI1lll, nil do if executeripplelIll1IllIiilIiIiI1I11 == executerippleli1ill1llIiIllIillI[1] and executerippleli1ill1llIiIllIillI[2] == executerippleiI1II1111l1iiiill1I then if not executeripplelIl1liIi1Iii1I1l11iIi[executeripplelIIIiIi1li1Ii1iii1l] then executeripplelIl1liIi1Iii1I1l11iIi[executeripplelIIIiIi1li1Ii1iii1l] = executeripplelIll1IllIiilIiIiI1I11[executerippleiI1II1111l1iiiill1I] executeripplellIllI111illI1lill1 = executeripplellIllI111illI1lill1 + 1 end executerippleI1ll1liiiIIIllI1lll[executeripplel1iI11iI1llIIli11Ii] = {executeripplelIl1liIi1Iii1I1l11iIi, executeripplelIIIiIi1li1Ii1iii1l} end end end end end, nil, nil, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii) local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] if executerippleiIllI1IIliIl1l1I1I1 > 255 then executerippleiIllI1IIliIl1l1I1I1 = executerippleII1Ili1II1lllliIi1I[executerippleiIllI1IIliIl1l1I1I1 - 256][executerippleI11iIi1l1ll1llI1III] else executerippleiIllI1IIliIl1l1I1I1 = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end if executeripplelIlIlliIIillIII1I1l11 > 255 then executeripplelIlIlliIIillIII1I1l11 = executerippleII1Ili1II1lllliIi1I[executeripplelIlIlliIIillIII1I1l11 - 256][executerippleI11iIi1l1ll1llI1III] else executeripplelIlIlliIIillIII1I1l11 = executeripplelIll1IllIiilIiIiI1I11[executeripplelIlIlliIIillIII1I1l11] end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executerippleiIllI1IIliIl1l1I1I1 + executeripplelIlIlliIIillIII1I1l11 end, nil, nil, function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii) local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlIi1Ii11illi11I1ii1 = executerippleIIIi11iliIilIii1I1i[executeripplelIlI1i1i1Ii1i1il1li1i] local executerippleili111ll1I1liI11l1l = {} local executerippleiillIlllll1il1II1li = executerippleIlilliiI1IlI1lIli1I({}, { __index = function(executerippleIilI1ililiil1111lI1, executerippleiIIi1iilIIl11iIiiIi) local executerippleli1ill1llIiIllIillI = executerippleili111ll1I1liI11l1l[executerippleiIIi1iilIIl11iIiiIi] return executerippleli1ill1llIiIllIillI[1][executerippleli1ill1llIiIllIillI[2]] end, __newindex = function(executerippleIilI1ililiil1111lI1, executerippleiIIi1iilIIl11iIiiIi, executeripplelIlil11IIl11II1II1Ili) local executerippleli1ill1llIiIllIillI = executerippleili111ll1I1liI11l1l[executerippleiIIi1iilIIl11iIiiIi] executerippleli1ill1llIiIllIillI[1][executerippleli1ill1llIiIllIillI[2]] = executeripplelIlil11IIl11II1II1Ili end }) for executerippleiI1II1111l1iiiill1I = 1, executeripplelIlIi1Ii11illi11I1ii1[executeripplelIli1lIIIlIl1i1liIlII] do local executerippleIIiIiIIIIIIlIillliI = executeripplelllll1lil1llllliIii[executerippleIII1l11i1iililII1I1] if executerippleIIiIiIIIIIIlIillliI[executerippleiII1iIIiIIiII11I11l] == executeripplelI1li1IIIlllil1Ill1 then executerippleili111ll1I1liI11l1l[executerippleiI1II1111l1iiiill1I - 1] = { executeripplelIll1IllIiilIiIiI1I11, executerippleIIiIiIIIIIIlIillliI[executeripplelIli1lIIi1I11Ii1l1i1I] } elseif executerippleIIiIiIIIIIIlIillliI[executerippleiII1iIIiIIiII11I11l] == executeripplelIll1lI1iiiiilIillIil then executerippleili111ll1I1liI11l1l[executerippleiI1II1111l1iiiill1I - 1] = { executeripplelIl1iiIlii1l1ilIlll1l, executerippleIIiIiIIIIIIlIillliI[executeripplelIli1lIIi1I11Ii1l1i1I] } end executerippleIII1l11i1iililII1I1 = executerippleIII1l11i1iililII1I1 + 1 end if executeripplelIlIi1Ii11illi11I1ii1[executeripplelIli1lIIIlIl1i1liIlII] > 0 then executeripplel1iI11lllilliiiliIl[#executeripplel1iI11lllilliiiliIl + 1] = executerippleili111ll1I1liI11l1l end local executeripplei1llil1IllIii1iiI1i = executeripplei111IiiIIllllii11I1(executeripplelIlIi1Ii11illi11I1ii1, executeripplelIl111iillll1lI11l1iI, executerippleiillIlllll1il1II1li) executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executeripplei1llil1IllIii1iiI1i end, nil } executeripplell11iIIiil1IllilIil[12] = function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii) local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl if executeripplelIlIlliIIillIII1I1l11 == 202 then return executeripplellii11llllilIi11lli[19]({ [2007] = (executeripplelliII11iI1liilIil11 - 76) % 256, [129003] = (executerippleiIllI1IIliIl1l1I1I1 - 76) % 256, [80237] = 0 }) end local executerippleli11Ill11il1li1I11I, executerippleiiilli1l1111li1l1l1, executeripplelIli1llilIII1lii1I1Il if executerippleiIllI1IIliIl1l1I1I1 == 1 then return true end if executerippleiIllI1IIliIl1l1I1I1 == 0 then executerippleli11Ill11il1li1I11I = executeripplelIliIIIIlii11l1111IiI else executerippleli11Ill11il1li1I11I = executeripplelliII11iI1liilIil11 + executerippleiIllI1IIliIl1l1I1I1 - 2 end executeripplelIli1llilIII1lii1I1Il = {} executerippleiiilli1l1111li1l1l1 = 0 for executerippleiI1II1111l1iiiill1I = executeripplelliII11iI1liilIil11, executerippleli11Ill11il1li1I11I do executerippleiiilli1l1111li1l1l1 = executerippleiiilli1l1111li1l1l1 + 1 executeripplelIli1llilIII1lii1I1Il[executerippleiiilli1l1111li1l1l1] = executeripplelIll1IllIiilIiIiI1I11[executerippleiI1II1111l1iiiill1I] end return true, executeripplelIli1llilIII1lii1I1Il, executerippleiiilli1l1111li1l1l1 end executeripplell11iIIiil1IllilIil[22] = function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii, executerippleIl1i1iliI1illl1Il1l) local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] executeripplelliII11iI1liilIil11 = executeripplelliII11iI1liilIil11 ~= 0 if executerippleiIllI1IIliIl1l1I1I1 > 255 then executerippleiIllI1IIliIl1l1I1I1 = executerippleII1Ili1II1lllliIi1I[executerippleiIllI1IIliIl1l1I1I1 - 256][executerippleI11iIi1l1ll1llI1III] else executerippleiIllI1IIliIl1l1I1I1 = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end if executeripplelIlIlliIIillIII1I1l11 > 255 then executeripplelIlIlliIIillIII1I1l11 = executerippleII1Ili1II1lllliIi1I[executeripplelIlIlliIIillIII1I1l11 - 256][executerippleI11iIi1l1ll1llI1III] else executeripplelIlIlliIIillIII1I1l11 = executeripplelIll1IllIiilIiIiI1I11[executeripplelIlIlliIIillIII1I1l11] end if executerippleiIllI1IIliIl1l1I1I1 < executeripplelIlIlliIIillIII1I1l11 ~= executeripplelliII11iI1liilIil11 then executerippleIII1l11i1iililII1I1 = executerippleIII1l11i1iililII1I1 + 1 end end executeripplell11iIIiil1IllilIil[30] = function(executerippleIlII1iilllil1I11iii) local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIl1Iiill1iill1l1Ii1I, executerippleliiiliIl11Ii1i1iIII, executerippleli11Ill11il1li1I11I, executerippleiiilli1l1111li1l1l1 executeripplelIl1Iiill1iill1l1Ii1I = {} if executerippleiIllI1IIliIl1l1I1I1 ~= 1 then if executerippleiIllI1IIliIl1l1I1I1 ~= 0 then executerippleli11Ill11il1li1I11I = executeripplelliII11iI1liilIil11 + executerippleiIllI1IIliIl1l1I1I1 - 1 else executerippleli11Ill11il1li1I11I = executeripplelIliIIIIlii11l1111IiI end executerippleiiilli1l1111li1l1l1 = 0 for executerippleiI1II1111l1iiiill1I = executeripplelliII11iI1liilIil11 + 1, executerippleli11Ill11il1li1I11I do executerippleiiilli1l1111li1l1l1 = executerippleiiilli1l1111li1l1l1 + 1 executeripplelIl1Iiill1iill1l1Ii1I[executerippleiiilli1l1111li1l1l1] = executeripplelIll1IllIiilIiIiI1I11[executerippleiI1II1111l1iiiill1I] end executerippleli11Ill11il1li1I11I, executerippleliiiliIl11Ii1i1iIII = executerippleI1lilll1IIiIilIIlli(executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11](executerippleii1Ii11iii11l11liII(executeripplelIl1Iiill1iill1l1Ii1I, 1, executerippleli11Ill11il1li1I11I - executeripplelliII11iI1liilIil11))) else executerippleli11Ill11il1li1I11I, executerippleliiiliIl11Ii1i1iIII = executerippleI1lilll1IIiIilIIlli(executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11]()) end if executeripplelIlIlliIIillIII1I1l11 ~= 1 then if executeripplelIlIlliIIillIII1I1l11 ~= 0 then executerippleli11Ill11il1li1I11I = executeripplelliII11iI1liilIil11 + executeripplelIlIlliIIillIII1I1l11 - 2 else executerippleli11Ill11il1li1I11I = executerippleli11Ill11il1li1I11I + executeripplelliII11iI1liilIil11 end executerippleiiilli1l1111li1l1l1 = 0 for executerippleiI1II1111l1iiiill1I = executeripplelliII11iI1liilIil11, executerippleli11Ill11il1li1I11I do executerippleiiilli1l1111li1l1l1 = executerippleiiilli1l1111li1l1l1 + 1 executeripplelIll1IllIiilIiIiI1I11[executerippleiI1II1111l1iiiill1I] = executerippleliiiliIl11Ii1i1iIII[executerippleiiilli1l1111li1l1l1] end end executeripplelIliIIIIlii11l1111IiI = executerippleli11Ill11il1li1I11I - 1 end executeripplell11iIIiil1IllilIil[24] = function(executerippleIlII1iilllil1I11iii) local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] if executerippleiIllI1IIliIl1l1I1I1 > 255 then executerippleiIllI1IIliIl1l1I1I1 = executerippleII1Ili1II1lllliIi1I[executerippleiIllI1IIliIl1l1I1I1 - 256][executerippleI11iIi1l1ll1llI1III] else executerippleiIllI1IIliIl1l1I1I1 = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end if executeripplelIlIlliIIillIII1I1l11 > 255 then executeripplelIlIlliIIillIII1I1l11 = executerippleII1Ili1II1lllliIi1I[executeripplelIlIlliIIillIII1I1l11 - 256][executerippleI11iIi1l1ll1llI1III] else executeripplelIlIlliIIillIII1I1l11 = executeripplelIll1IllIiilIiIiI1I11[executeripplelIlIlliIIillIII1I1l11] end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executerippleiIllI1IIliIl1l1I1I1 % executeripplelIlIlliIIillIII1I1l11 end executeripplell11iIIiil1IllilIil[28] = function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii, executerippleIl1i1iliI1illl1Il1l) local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] if executerippleiIllI1IIliIl1l1I1I1 > 255 then executerippleiIllI1IIliIl1l1I1I1 = executerippleII1Ili1II1lllliIi1I[executerippleiIllI1IIliIl1l1I1I1 - 256][executerippleI11iIi1l1ll1llI1III] else executerippleiIllI1IIliIl1l1I1I1 = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end if executeripplelIlIlliIIillIII1I1l11 > 255 then executeripplelIlIlliIIillIII1I1l11 = executerippleII1Ili1II1lllliIi1I[executeripplelIlIlliIIillIII1I1l11 - 256][executerippleI11iIi1l1ll1llI1III] else executeripplelIlIlliIIillIII1I1l11 = executeripplelIll1IllIiilIiIiI1I11[executeripplelIlIlliIIillIII1I1l11] end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executerippleiIllI1IIliIl1l1I1I1 * executeripplelIlIlliIIillIII1I1l11 end executeripplell11iIIiil1IllilIil[15] = function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i) local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] if executeripplelIlIlliIIillIII1I1l11 == 201 then return executeripplellii11llllilIi11lli[16]({ [2007] = (executeripplelliII11iI1liilIil11 - 31) % 256, [55239] = (executerippleiIllI1IIliIl1l1I1I1 - 31) % 256, [80237] = 0 }) end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executeripplelIl1iiIlii1l1ilIlll1l[executerippleiIllI1IIliIl1l1I1I1] end executeripplell11iIIiil1IllilIil[31] = function(executerippleIlII1iilllil1I11iii) local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executerippleIli1IlI1iIii1II11lI = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] for executerippleiI1II1111l1iiiill1I = executerippleiIllI1IIliIl1l1I1I1 + 1, executeripplelIlIlliIIillIII1I1l11 do executerippleIli1IlI1iIii1II11lI = executerippleIli1IlI1iIii1II11lI .. executeripplelIll1IllIiilIiIiI1I11[executerippleiI1II1111l1iiiill1I] end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executerippleIli1IlI1iIii1II11lI end executeripplell11iIIiil1IllilIil[5] = function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii) local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = not executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end executeripplell11iIIiil1IllilIil[7] = function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii, executerippleIl1i1iliI1illl1Il1l) local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplel1iI11iI1llIIli11Ii if executeripplelIlI1i1i1Ii1i1il1li1i == 100000 then executeripplel1iI11iI1llIIli11Ii = executeripplelIll1IllIiilIiIiI1I11[251] else executeripplel1iI11iI1llIIli11Ii = executerippleII1Ili1II1lllliIi1I[executeripplelIlI1i1i1Ii1i1il1li1i][executerippleI11iIi1l1ll1llI1III] end executeripplelIl111iillll1lI11l1iI[executeripplel1iI11iI1llIIli11Ii] = executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] end executeripplell11iIIiil1IllilIil[33] = function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i) local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] executerippleIII1l11i1iililII1I1 = executerippleIII1l11i1iililII1I1 + executeripplelIll1lI1IllliIlIlI1l1 end executeripplell11iIIiil1IllilIil[11] = function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii, executerippleIl1i1iliI1illl1Il1l, executeripplelIiiiiliIllIii11lii) local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl if executerippleiIllI1IIliIl1l1I1I1 > 255 then executerippleiIllI1IIliIl1l1I1I1 = executerippleII1Ili1II1lllliIi1I[executerippleiIllI1IIliIl1l1I1I1 - 256][executerippleI11iIi1l1ll1llI1III] else executerippleiIllI1IIliIl1l1I1I1 = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end if executeripplelIlIlliIIillIII1I1l11 > 255 then executeripplelIlIlliIIillIII1I1l11 = executerippleII1Ili1II1lllliIi1I[executeripplelIlIlliIIillIII1I1l11 - 256][executerippleI11iIi1l1ll1llI1III] else executeripplelIlIlliIIillIII1I1l11 = executeripplelIll1IllIiilIiIiI1I11[executeripplelIlIlliIIillIII1I1l11] end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executerippleiIllI1IIliIl1l1I1I1 - executeripplelIlIlliIIillIII1I1l11 end executeripplell11iIIiil1IllilIil[14] = function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii, executerippleIl1i1iliI1illl1Il1l, executeripplelIiiiiliIllIii11lii) local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] if executeripplelIlIlliIIillIII1I1l11 == 141 then return executeripplellii11llllilIi11lli[21]({ [2007] = (executeripplelliII11iI1liilIil11 - 146) % 256, [55239] = (executerippleiIllI1IIliIl1l1I1I1 - 146) % 256, [80237] = 0 }) end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end executeripplell11iIIiil1IllilIil[20] = function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i) local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] if executerippleiIllI1IIliIl1l1I1I1 > 255 then executerippleiIllI1IIliIl1l1I1I1 = executerippleII1Ili1II1lllliIi1I[executerippleiIllI1IIliIl1l1I1I1 - 256][executerippleI11iIi1l1ll1llI1III] else executerippleiIllI1IIliIl1l1I1I1 = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end if executeripplelIlIlliIIillIII1I1l11 > 255 then executeripplelIlIlliIIillIII1I1l11 = executerippleII1Ili1II1lllliIi1I[executeripplelIlIlliIIillIII1I1l11 - 256][executerippleI11iIi1l1ll1llI1III] else executeripplelIlIlliIIillIII1I1l11 = executeripplelIll1IllIiilIiIiI1I11[executeripplelIlIlliIIillIII1I1l11] end executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executerippleiIllI1IIliIl1l1I1I1 ^ executeripplelIlIlliIIillIII1I1l11 end executeripplell11iIIiil1IllilIil[27] = function(executerippleIlII1iilllil1I11iii) local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] for executerippleiI1II1111l1iiiill1I = executeripplelliII11iI1liilIil11, executerippleiIllI1IIliIl1l1I1I1 do executeripplelIll1IllIiilIiIiI1I11[executerippleiI1II1111l1iiiill1I] = nil end end executeripplell11iIIiil1IllilIil[0] = function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i, executerippleli1lilI1iillIiiIiii, executerippleIl1i1iliI1illl1Il1l) local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] executeripplelIll1IllIiilIiIiI1I11[executeripplelliII11iI1liilIil11] = executerippleiIllI1IIliIl1l1I1I1 ~= 0 if executeripplelIlIlliIIillIII1I1l11 ~= 0 then executerippleIII1l11i1iililII1I1 = executerippleIII1l11i1iililII1I1 + 1 end end executeripplell11iIIiil1IllilIil[2] = function(executerippleIlII1iilllil1I11iii, executerippleillil11I1IlIiliI11i) local executeripplelIlIlliIIillIII1I1l11 = executerippleIlII1iilllil1I11iii[129003] local executeripplelIlI1i1i1Ii1i1il1li1i = executerippleIlII1iilllil1I11iii[80237] local executeripplelliII11iI1liilIil11 = executerippleIlII1iilllil1I11iii[2007] local executeripplelIll1lI1IllliIlIlI1l1 = executerippleIlII1iilllil1I11iii[80237] - executerippleIl1Il1IIiIIiIi1iIIl local executerippleiIllI1IIliIl1l1I1I1 = executerippleIlII1iilllil1I11iii[55239] executeripplelliII11iI1liilIil11 = executeripplelliII11iI1liilIil11 ~= 0 if executerippleiIllI1IIliIl1l1I1I1 > 255 then executerippleiIllI1IIliIl1l1I1I1 = executerippleII1Ili1II1lllliIi1I[executerippleiIllI1IIliIl1l1I1I1 - 256][executerippleI11iIi1l1ll1llI1III] else executerippleiIllI1IIliIl1l1I1I1 = executeripplelIll1IllIiilIiIiI1I11[executerippleiIllI1IIliIl1l1I1I1] end if executeripplelIlIlliIIillIII1I1l11 > 255 then executeripplelIlIlliIIillIII1I1l11 = executerippleII1Ili1II1lllliIi1I[executeripplelIlIlliIIillIII1I1l11 - 256][executerippleI11iIi1l1ll1llI1III] else executeripplelIlIlliIIillIII1I1l11 = executeripplelIll1IllIiilIiIiI1I11[executeripplelIlIlliIIillIII1I1l11] end if executerippleiIllI1IIliIl1l1I1I1 <= executeripplelIlIlliIIillIII1I1l11 ~= executeripplelliII11iI1liilIil11 then executerippleIII1l11i1iililII1I1 = executerippleIII1l11i1iililII1I1 + 1 end end executeripplellii11llllilIi11lli = { executeripplell11iIIiil1IllilIil[13], executeripplell11iIIiil1IllilIil[24], executeripplell11iIIiil1IllilIil[21], executeripplell11iIIiil1IllilIil[28], executeripplell11iIIiil1IllilIil[26], executeripplell11iIIiil1IllilIil[17], executeripplell11iIIiil1IllilIil[5], executeripplell11iIIiil1IllilIil[23], executeripplell11iIIiil1IllilIil[33], executeripplell11iIIiil1IllilIil[1], executeripplell11iIIiil1IllilIil[30], executeripplell11iIIiil1IllilIil[22], executeripplell11iIIiil1IllilIil[10], executeripplell11iIIiil1IllilIil[29], executeripplell11iIIiil1IllilIil[7], executeripplell11iIIiil1IllilIil[12], executeripplell11iIIiil1IllilIil[9], executeripplell11iIIiil1IllilIil[3], executeripplell11iIIiil1IllilIil[18], executeripplell11iIIiil1IllilIil[0], executeripplell11iIIiil1IllilIil[6], executeripplell11iIIiil1IllilIil[14], executeripplell11iIIiil1IllilIil[16], executeripplell11iIIiil1IllilIil[2], executeripplell11iIIiil1IllilIil[15], executeripplell11iIIiil1IllilIil[25], executeripplell11iIIiil1IllilIil[32], executeripplell11iIIiil1IllilIil[19], executeripplell11iIIiil1IllilIil[8], executeripplell11iIIiil1IllilIil[27], executeripplell11iIIiil1IllilIil[20], executeripplell11iIIiil1IllilIil[31], executeripplell11iIIiil1IllilIil[11], executeripplell11iIIiil1IllilIil[4] } local function executerippleiiilli1l1111li1l1l1() while true do local executerippleIlII1iilllil1I11iii = executeripplelllll1lil1llllliIii[executerippleIII1l11i1iililII1I1] executerippleIII1l11i1iililII1I1 = executerippleIII1l11i1iililII1I1 + 1 local executeripplelIillIIIi1lIii1llil, executeripplelIl1iiIlli11I11l1liI1, executeripplelI1liiIlllII11IllIi = executeripplellii11llllilIi11lli[executerippleIlII1iilllil1I11iii[28403] + 1](executerippleIlII1iilllil1I11iii) if executeripplelIillIIIi1lIii1llil then return executeripplelIl1iiIlli11I11l1liI1, executeripplelI1liiIlllII11IllIi end end end local executeripplelIl1Il1ll1lllllIlIiil, executeripplelIl1iiIlli11I11l1liI1, executeripplelI1liiIlllII11IllIi = executeripplei1Iii11IllillIliill(executerippleiiilli1l1111li1l1l1) if executeripplelIl1Il1ll1lllllIlIiil then if executeripplelIl1iiIlli11I11l1liI1 and executeripplelI1liiIlllII11IllIi > 0 then return executerippleii1Ii11iii11l11liII(executeripplelIl1iiIlli11I11l1liI1, 1, executeripplelI1liiIlllII11IllIi) end else local executeripplei1IilIiiilIIIlilill = executeripplell111iiIl11l1lIlII1("Luraph Script:" .. (executerippleiiIiIi1I1Il1IiIiilI[executerippleIII1l11i1iililII1I1 - 1] or "") .. ": " .. executerippleIi1IlI11iiiilliIlII(executeripplelIl1iiIlli11I11l1liI1), "[^:]+:%d*: ", function(executeripplei1i1illIII1ll1iII1i) if not executeripplei111lilllI1IliiiIii(executeripplei1i1illIII1ll1iII1i, "Luraph Script:%d") then return "" end end) executeripplei11I1IIi11i11II1II1(executeripplei1IilIiiilIIIlilill, 0) end end executeripplelilillllllllIiI1Ii1(executeripplellIilIii1i1iiIiI1ll, executeripplelIl111iillll1lI11l1iI) return executeripplellIilIii1i1iiIiI1ll end local executeripplelIliliilllIIIi11IIlil = executerippleI1IlIl1I1I1IIii11iI() return executeripplei111IiiIIllllii11I1(executeripplelIliliilllIIIi11IIlil, executeripplelIl111iillll1lI11l1iI)() end executeripplelIlI1llIl1l1liliIIii1("LPH|executerippleIIiiIllI1II11iI1ili()) 
end
task.spawn(C_G2L_10)


--JOHNDOE.Main.Shadow.Frame.Frame.Clear.RIPPLE
local function C_G2L_25()
local script = G2L["25"]
-- This file was generated using Luraph Obfuscator v11.5 by memcorrupt.

local clearrippleIlIlIilll1ilIilI11i = assert local clearripplelIlII1l11l1ilil111iiI = select local clearrippleI1l1I1lllliliIll1ll = tonumber local clearrippleiil11Il1Illi11l1Ill = unpack local clearrippleli11ii11ill111IIi1l = pcall local clearripplelIliiliIiI1liilil1iI1 = setfenv local clearrippleIlI1iIi1i1iii1iiiII = setmetatable local clearrippleIilI1I11Ii1ilIi1Ill = type local clearripplelIliIIi1I1lliil1lilli = getfenv local clearripplelIlIiIil1Ill1Ii1III1i = tostring local clearripplelli1lIl1iI1liIii1I1 = error local clearripplei1Ill11liiIIIl1I1l1 = string.sub local clearrippleIilil1iIlliIil1il1i = string.byte local clearripplelIlIli1iiilIII1111lli = string.char local clearrippleI1ll1l1ll11lI1Ii11i = string.rep local clearrippleII1I11iiliI1lliiii1 = string.gsub local clearrippleilii1Ililli1liliiil = string.match local clearrippleiI1il1l1I1111lliIlI = 1 local function clearripplelIiiIII11II1Ii111il(clearrippleIii11lliIlIll1ii11i, clearrippleliIlI1lIiiii1iIlllI) local clearripplelIi1IliIli1ili1111l clearrippleIii11lliIlIll1ii11i = clearrippleII1I11iiliI1lliiii1(clearripplei1Ill11liiIIIl1I1l1(clearrippleIii11lliIlIll1ii11i, 5), "..", function(clearripplelIll11lilii1ill1Ii1I1) if clearrippleIilil1iIlliIil1il1i(clearripplelIll11lilii1ill1Ii1I1, 2) == 71 then clearripplelIi1IliIli1ili1111l = clearrippleI1l1I1lllliliIll1ll(clearripplei1Ill11liiIIIl1I1l1(clearripplelIll11lilii1ill1Ii1I1, 1, 1)) return "" else local clearripplellI1iIl1II1lI1l1iI1 = clearripplelIlIli1iiilIII1111lli(clearrippleI1l1I1lllliliIll1ll(clearripplelIll11lilii1ill1Ii1I1, 16)) if clearripplelIi1IliIli1ili1111l then local clearrippleI1lIllIIiIlIIliillI = clearrippleI1ll1l1ll11lI1Ii11i(clearripplellI1iIl1II1lI1l1iI1, clearripplelIi1IliIli1ili1111l) clearripplelIi1IliIli1ili1111l = nil return clearrippleI1lIllIIiIlIIliillI else return clearripplellI1iIl1II1lI1l1iI1 end end end) local function clearripplei1llIi1iiIIIilI1I1i() local clearripplelIl1ii1IIII1i11ii1i1l = clearrippleIilil1iIlliIil1il1i(clearrippleIii11lliIlIll1ii11i, clearrippleiI1il1l1I1111lliIlI, clearrippleiI1il1l1I1111lliIlI) clearrippleiI1il1l1I1111lliIlI = clearrippleiI1il1l1I1111lliIlI + 1 return clearripplelIl1ii1IIII1i11ii1i1l end local function clearrippleIllilIll111liiillii() local clearripplelIl1ii1IIII1i11ii1i1l, clearripplellI1iIl1II1lI1l1iI1, clearrippleI1lIllIIiIlIIliillI, clearrippleIliIIlIi1liIiI1iiII = clearrippleIilil1iIlliIil1il1i(clearrippleIii11lliIlIll1ii11i, clearrippleiI1il1l1I1111lliIlI, clearrippleiI1il1l1I1111lliIlI + 3) clearrippleiI1il1l1I1111lliIlI = clearrippleiI1il1l1I1111lliIlI + 4 return clearrippleIliIIlIi1liIiI1iiII * 16777216 + clearrippleI1lIllIIiIlIIliillI * 65536 + clearripplellI1iIl1II1lI1l1iI1 * 256 + clearripplelIl1ii1IIII1i11ii1i1l end local function clearrippleIlil1ll11i1Ili1liIl(clearrippleIlI1l1II1IIi11Iiil1, clearripplelIlIIIliiilii111llilI, clearrippleiiIlIililllilI1ili1) if clearrippleiiIlIililllilI1ili1 then local clearripplelIiiIIlIili11ilil1l, clearrippleIll1l1Iii1lIi11I1Il = 0, 0 for clearripplelIlI1liiIIIi1I1IilI1i = clearripplelIlIIIliiilii111llilI, clearrippleiiIlIililllilI1ili1 do clearripplelIiiIIlIili11ilil1l = clearripplelIiiIIlIili11ilil1l + 2 ^ clearrippleIll1l1Iii1lIi11I1Il * clearrippleIlil1ll11i1Ili1liIl(clearrippleIlI1l1II1IIi11Iiil1, clearripplelIlI1liiIIIi1I1IilI1i) clearrippleIll1l1Iii1lIi11I1Il = clearrippleIll1l1Iii1lIi11I1Il + 1 end return clearripplelIiiIIlIili11ilil1l else local clearripplelIlIli1IIlIi1iII1i1II = 2 ^ (clearripplelIlIIIliiilii111llilI - 1) return clearripplelIlIli1IIlIi1iII1i1II <= clearrippleIlI1l1II1IIi11Iiil1 % (clearripplelIlIli1IIlIi1iII1i1II + clearripplelIlIli1IIlIi1iII1i1II) and 1 or 0 end end local function clearrippleiI1illi11iiiiiIilil() local clearripplelIl1ii1IIII1i11ii1i1l, clearripplellI1iIl1II1lI1l1iI1 = clearrippleIllilIll111liiillii(), clearrippleIllilIll111liiillii() if clearripplelIl1ii1IIII1i11ii1i1l == 0 and clearripplellI1iIl1II1lI1l1iI1 == 0 then return 0 end return (-2 * clearrippleIlil1ll11i1Ili1liIl(clearripplellI1iIl1II1lI1l1iI1, 32) + 1) * 2 ^ (clearrippleIlil1ll11i1Ili1liIl(clearripplellI1iIl1II1lI1l1iI1, 21, 31) - 1023) * ((clearrippleIlil1ll11i1Ili1liIl(clearripplellI1iIl1II1lI1l1iI1, 1, 20) * 4294967296 + clearripplelIl1ii1IIII1i11ii1i1l) / 4503599627370496 + 1) end local function clearripplelil1llIIilII1iIIlII(clearripplelIl1IiiIIiIl1iIlI1i1l) local clearripplelIl1lIIlli1I1iiIIII1l = { clearrippleIilil1iIlliIil1il1i(clearrippleIii11lliIlIll1ii11i, clearrippleiI1il1l1I1111lliIlI, clearrippleiI1il1l1I1111lliIlI + 3) } clearrippleiI1il1l1I1111lliIlI = clearrippleiI1il1l1I1111lliIlI + 4 local clearrippleilIllliII1lllilII1i = { nil, nil, nil, nil, nil, nil, nil, nil } for clearripplelIlI1liiIIIi1I1IilI1i = 1, 8 do clearrippleilIllliII1lllilII1i[clearripplelIlI1liiIIIi1I1IilI1i] = clearrippleIlil1ll11i1Ili1liIl(clearripplelIl1IiiIIiIl1iIlI1i1l, clearripplelIlI1liiIIIi1I1IilI1i) end local clearripplelIl1I1iiIlli1li1l1lil = "" for clearripplelIlI1liiIIIi1I1IilI1i = 1, 4 do local clearripplelIiiIIlIili11ilil1l, clearrippleIll1l1Iii1lIi11I1Il = 0, 0 for clearrippleiiIiiIlIl1iiil1lI1I = 1, 8 do local clearripplelII1I1iIii11Ii1iI1I = clearrippleIlil1ll11i1Ili1liIl(clearripplelIl1lIIlli1I1iiIIII1l[clearripplelIlI1liiIIIi1I1IilI1i], clearrippleiiIiiIlIl1iiil1lI1I) if clearrippleilIllliII1lllilII1i[clearrippleiiIiiIlIl1iiil1lI1I] == 1 then clearripplelII1I1iIii11Ii1iI1I = clearripplelII1I1iIii11Ii1iI1I == 1 and 0 or 1 end clearripplelIiiIIlIili11ilil1l = clearripplelIiiIIlIili11ilil1l + 2 ^ clearrippleIll1l1Iii1lIi11I1Il * clearripplelII1I1iIii11Ii1iI1I clearrippleIll1l1Iii1lIi11I1Il = clearrippleIll1l1Iii1lIi11I1Il + 1 end clearripplelIl1I1iiIlli1li1l1lil = clearripplelIl1I1iiIlli1li1l1lil .. clearripplelIl1I1iiIlli1li1l1lil.char(clearripplelIiiIIlIili11ilil1l) end local clearripplelIl1ii1IIII1i11ii1i1l, clearripplellI1iIl1II1lI1l1iI1, clearrippleI1lIllIIiIlIIliillI, clearrippleIliIIlIi1liIiI1iiII = clearrippleIilil1iIlliIil1il1i(clearripplelIl1I1iiIlli1li1l1lil, 1, 4) return clearrippleIliIIlIi1liIiI1iiII * 16777216 + clearrippleI1lIllIIiIlIIliillI * 65536 + clearripplellI1iIl1II1lI1l1iI1 * 256 + clearripplelIl1ii1IIII1i11ii1i1l end local function clearripplelliIliIiIi1ll1llIIi(clearripplelIl1IiiIIiIl1iIlI1i1l) local clearrippleI11liIliIIiiIlII1ll = clearrippleIllilIll111liiillii() clearrippleiI1il1l1I1111lliIlI = clearrippleiI1il1l1I1111lliIlI + clearrippleI11liIliIIiiIlII1ll local clearrippleilIllliII1lllilII1i = { nil, nil, nil, nil, nil, nil, nil, nil } for clearripplelIlI1liiIIIi1I1IilI1i = 1, 8 do clearrippleilIllliII1lllilII1i[clearripplelIlI1liiIIIi1I1IilI1i] = clearrippleIlil1ll11i1Ili1liIl(clearripplelIl1IiiIIiIl1iIlI1i1l, clearripplelIlI1liiIIIi1I1IilI1i) end local clearripplelIl1I1iiIlli1li1l1lil = "" for clearripplelIlI1liiIIIi1I1IilI1i = 1, clearrippleI11liIliIIiiIlII1ll do local clearripplelIiiIIlIili11ilil1l, clearrippleIll1l1Iii1lIi11I1Il = 0, 0 for clearrippleiiIiiIlIl1iiil1lI1I = 1, 8 do local clearripplelII1I1iIii11Ii1iI1I = clearrippleIlil1ll11i1Ili1liIl(clearrippleIilil1iIlliIil1il1i(clearrippleIii11lliIlIll1ii11i, clearrippleiI1il1l1I1111lliIlI - clearrippleI11liIliIIiiIlII1ll + clearripplelIlI1liiIIIi1I1IilI1i - 1), clearrippleiiIiiIlIl1iiil1lI1I) if clearrippleilIllliII1lllilII1i[clearrippleiiIiiIlIl1iiil1lI1I] == 1 then clearripplelII1I1iIii11Ii1iI1I = clearripplelII1I1iIii11Ii1iI1I == 1 and 0 or 1 end clearripplelIiiIIlIili11ilil1l = clearripplelIiiIIlIili11ilil1l + 2 ^ clearrippleIll1l1Iii1lIi11I1Il * clearripplelII1I1iIii11Ii1iI1I clearrippleIll1l1Iii1lIi11I1Il = clearrippleIll1l1Iii1lIi11I1Il + 1 end clearripplelIl1I1iiIlli1li1l1lil = clearripplelIl1I1iiIlli1li1l1lil .. clearripplelIl1I1iiIlli1li1l1lil.char(clearripplelIiiIIlIili11ilil1l) end return clearripplelIl1I1iiIlli1li1l1lil end local clearrippleI11iiI11iliIllIIllI = clearripplei1llIi1iiIIIilI1I1i() local clearrippleiIili1iiIIlllII1l1i = clearripplei1llIi1iiIIIilI1I1i() local function clearrippleiil1i1Il111iilI11lI() local clearripplelIlIlII1111iI1i1iIi11 = { [115519] = {}, [29402] = {}, [124419] = {}, [131725] = {} } local clearrippleillil1i11lIlII111lI = #{1286} clearrippleIllilIll111liiillii() clearripplei1llIi1iiIIIilI1I1i() clearripplelIlIlII1111iI1i1iIi11[37510] = clearripplei1llIi1iiIIIilI1I1i() local clearrippleliliIIIi1l1IIIll111 = clearrippleIllilIll111liiillii() for clearripplelIlI1liiIIIi1I1IilI1i = clearrippleillil1i11lIlII111lI, clearrippleliliIIIi1l1IIIll111 do clearripplelIlIlII1111iI1i1iIi11[115519][clearripplelIlI1liiIIIi1I1IilI1i - clearrippleillil1i11lIlII111lI] = clearrippleiil1i1Il111iilI11lI() end local clearrippleliliIIIi1l1IIIll111 = clearrippleIllilIll111liiillii() - (#{ 3027, 2571, 4666, 5481, 4453, 2057, 2548, 670, 872, 4664, 3269, 2549, 3882, 1423, 1520, 4828, 4112, 5430, 3729, 1721, 29 } + 133752) for clearripplelIlI1liiIIIi1I1IilI1i = clearrippleillil1i11lIlII111lI, clearrippleliliIIIi1l1IIIll111 do local clearripplelIl1l1lll1111liI1l1ii = {} local clearripplelIl1II1I1l11lIiI1I11I = clearripplelil1llIIilII1iIIlII(clearrippleiIili1iiIIlllII1l1i) clearripplelIl1l1lll1111liI1l1ii[8613] = clearrippleIlil1ll11i1Ili1liIl(clearripplelIl1II1I1l11lIiI1I11I, #{ 5343, 6397, 5695, 6230, 276, 2710, 474, 6380, 4346, 5972, 2271, 5801, 6909, 3232, 4668, 113, 5659, 4829, 2039, 6422, 2972, 2455, 4677, 914 } + 3, #{ 3709, 1058, 4588, 3543, 951, 224, 3832, 4411, 141, 3567, 4751, 1517, 4042, 3454, 6110, 1124, 4560, 2723, 3699, 3405, 3411, 4737 } + 10) clearripplelIl1l1lll1111liI1l1ii[19437] = clearrippleIlil1ll11i1Ili1liIl(clearripplelIl1II1I1l11lIiI1I11I, #{ 6627, 4064, 2399, 6743, 5747, 3059, 1213, 3121, 1854, 6226, 4471, 5210, 398, 3925, 4647, 1020, 4038, 6805, 2292, 406, 1305, 4603 } + 5, #{ 6124, 5055, 4401, 3514, 5240, 1976, 4338, 3306, 3539, 2262, 300, 6140, 1433, 5356, 6669, 5671, 1487, 6799, 6798, 1581, 1820, 6084 } + 10) clearripplelIl1l1lll1111liI1l1ii[104697] = clearrippleIlil1ll11i1Ili1liIl(clearripplelIl1II1I1l11lIiI1I11I, #{2339}, #{ 5309, 5032, 2834, 6308, 6348, 3803, 1964, 4021, 396 }) clearripplelIl1l1lll1111liI1l1ii[56075] = clearrippleIlil1ll11i1Ili1liIl(clearripplelIl1II1I1l11lIiI1I11I, #{2727}, #{ 2862, 280, 3174, 6322, 5041, 694, 4941, 3963, 351, 1598, 6934, 6111, 2142, 6165, 4342, 3857, 4798, 3856 }) clearripplelIl1l1lll1111liI1l1ii[90888] = clearrippleIlil1ll11i1Ili1liIl(clearripplelIl1II1I1l11lIiI1I11I, #{ 1847, 4541, 5433, 6429, 3852, 5321, 136, 6482, 1686, 1833 }, #{ 996, 6062, 6415, 2975, 6628, 455, 2172, 5016, 561, 798, 6360, 2881, 6017, 459, 6386, 2370, 5623, 1904 }) clearripplelIl1l1lll1111liI1l1ii[58989] = clearrippleIlil1ll11i1Ili1liIl(clearripplelIl1II1I1l11lIiI1I11I, #{ 3919, 5196, 905, 5481, 6150, 2468, 734, 3313, 2184, 5555, 6427, 6290, 6329, 1272, 3667, 4223, 2041, 112, 5480 }, #{ 24, 5540, 194, 3705, 6383, 3809, 3425, 642, 6023, 4613, 5501, 697, 518, 6366, 5325, 4226, 3546, 5052, 5874, 3154, 6378, 3472, 6038 } + 3) clearripplelIlIlII1111iI1i1iIi11[29402][clearripplelIlI1liiIIIi1I1IilI1i] = clearripplelIl1l1lll1111liI1l1ii end clearripplelIlIlII1111iI1i1iIi11[44336] = clearripplei1llIi1iiIIIilI1I1i() local clearrippleliliIIIi1l1IIIll111 = clearrippleIllilIll111liiillii() for clearripplelIlI1liiIIIi1I1IilI1i = clearrippleillil1i11lIlII111lI, clearrippleliliIIIi1l1IIIll111 do clearripplelIlIlII1111iI1i1iIi11[124419][clearripplelIlI1liiIIIi1I1IilI1i] = clearrippleIllilIll111liiillii() end clearripplei1llIi1iiIIIilI1I1i() clearrippleIllilIll111liiillii() clearripplei1llIi1iiIIIilI1I1i() clearrippleIllilIll111liiillii() local clearrippleliliIIIi1l1IIIll111 = clearrippleIllilIll111liiillii() - (#{ 5351, 2915, 4357, 1446, 2857, 3733, 4934, 1537, 3890, 166, 3137, 6374, 1222, 6118, 356, 2218, 5123, 6585, 3979, 5748, 703, 6561, 4531, 6919 } + 133747) for clearripplelIlI1liiIIIi1I1IilI1i = clearrippleillil1i11lIlII111lI, clearrippleliliIIIi1l1IIIll111 do local clearripplell1i1iiil1lI1liil1i = {} local clearrippleIilI1I11Ii1ilIi1Ill = clearripplei1llIi1iiIIIilI1I1i() if clearrippleIilI1I11Ii1ilIi1Ill == #{ 5495, 2647, 4943, 2677, 2582, 4167, 4388, 6453, 1340, 4253, 900, 6847, 5662, 1436, 3039, 3982, 6602, 5560, 2021, 5060, 1788, 6207 } + 164 then clearripplell1i1iiil1lI1liil1i[86455] = clearrippleiI1illi11iiiiiIilil() end if clearrippleIilI1I11Ii1ilIi1Ill == #{ 6051, 2201, 1401, 1626, 6329, 2339, 3316, 5946, 1051, 3549, 1320, 3307, 4214, 3473, 169, 6401, 2518, 6558, 1395, 3185, 3359, 5161, 3442 } + 56 then clearripplell1i1iiil1lI1liil1i[86455] = #{ 1147, 6590, 3482, 4941, 6207, 5598, 1636, 5219, 5237, 6473, 2842, 3029, 467, 2938, 4094, 5929, 3835, 2946, 6679, 608, 3095, 3599 } + 1325 == #{ 5942, 6717, 1532, 2921, 3198, 4311, 2974, 1180, 5450, 3555, 4319, 2468, 2264, 704, 2811, 2125, 4488, 2605, 2768, 4964, 3551, 5500 } + 119010 end if clearrippleIilI1I11Ii1ilIi1Ill == #{ 6054, 3012, 3157 } then clearripplell1i1iiil1lI1liil1i[86455] = clearripplei1llIi1iiIIIilI1I1i() + clearrippleIllilIll111liiillii() + clearrippleiI1illi11iiiiiIilil() end if clearrippleIilI1I11Ii1ilIi1Ill == #{ 656, 5734, 5526, 3350, 227, 3041, 5775, 5644, 6037, 1780, 6644, 3043, 3599, 2159, 6272, 4322, 1304, 4031, 1392, 3867, 2896 } + 56 then clearripplell1i1iiil1lI1liil1i[86455] = clearripplei1llIi1iiIIIilI1I1i() + clearrippleIllilIll111liiillii() + clearrippleiI1illi11iiiiiIilil() end if clearrippleIilI1I11Ii1ilIi1Ill == #{ 3664, 2376, 5312, 5465, 1329, 6351, 1771, 3731, 6218, 5300, 705, 6437, 4757, 5436, 2814, 4843, 5741, 2924, 4756, 794 } + 76 then clearripplell1i1iiil1lI1liil1i[86455] = clearrippleIllilIll111liiillii() end if clearrippleIilI1I11Ii1ilIi1Ill == #{ 6826, 2584, 4616, 2209, 2541, 1806 } then clearripplell1i1iiil1lI1liil1i[86455] = clearripplei1llIi1iiIIIilI1I1i() end if clearrippleIilI1I11Ii1ilIi1Ill == #{ 774, 1166, 2523, 2556, 2914, 6829, 4393, 2452, 5079, 3078, 2129, 4078, 5933, 351, 745, 3132, 4624, 1320, 1237, 5319, 2616, 6022, 1523, 472 } + 25 then clearripplell1i1iiil1lI1liil1i[86455] = clearripplei1llIi1iiIIIilI1I1i() + clearrippleIllilIll111liiillii() + clearrippleiI1illi11iiiiiIilil() end if clearrippleIilI1I11Ii1ilIi1Ill == #{ 958, 5227, 4727, 5538, 3756, 1004, 2331, 1063, 6850, 4418, 5842, 4984, 4304, 6680, 6049, 3239, 87, 988, 1852, 161, 6631 } + 45 then clearripplell1i1iiil1lI1liil1i[86455] = #{ 3649, 1372, 3753, 64, 1838, 1113, 744, 161, 4732, 3836, 4483, 3176, 3015, 976, 6730, 3370, 5621, 1063, 4727, 4016, 4120, 71, 2735, 2188 } + 73748 == #{ 3649, 1372, 3753, 64, 1838, 1113, 744, 161, 4732, 3836, 4483, 3176, 3015, 976, 6730, 3370, 5621, 1063, 4727, 4016, 4120, 71, 2735, 2188 } + 73748 end if clearrippleIilI1I11Ii1ilIi1Ill == #{ 4660, 3340, 700, 2530, 3878, 371, 1653, 5923, 6534, 2687, 5828, 5364, 3787, 357, 3044, 3328, 6398, 3299, 1752, 4223, 6656, 5798 } + 190 then clearripplell1i1iiil1lI1liil1i[86455] = clearripplelliIliIiIi1ll1llIIi(clearrippleI11iiI11iliIllIIllI) end clearripplelIlIlII1111iI1i1iIi11[131725][clearripplelIlI1liiIIIi1I1IilI1i - clearrippleillil1i11lIlII111lI] = clearripplell1i1iiil1lI1liil1i end clearripplelIlIlII1111iI1i1iIi11[98970] = clearripplei1llIi1iiIIIilI1I1i() return clearripplelIlIlII1111iI1i1iIi11 end local function clearripplelIllIiIIiliIIlll1ili1(clearripplelIlIlII1111iI1i1iIi11, clearrippleliIlI1lIiiii1iIlllI, clearrippleI111l1liIlIll1iiI1I) local clearrippleiIiIi11illIiIlI11II, clearrippleIlliIi1lil1llliIlI1 = 1, 13 local clearrippleii1lIIIiII11lli1111 = clearripplelIlIlII1111iI1i1iIi11[29402] local clearripplel1111ii1IIii1iiIlIl = clearrippleIlI1iIi1i1iii1iiiII({}, { __index = function(clearripplelIil11iiIl1lI1ilili, clearripplelIl11IiIi1lllIlIlIi1i) local clearripplelIl1I1iiIlli1li1l1lil = clearripplelIlIlII1111iI1i1iIi11[131725][clearripplelIl11IiIi1lllIlIlIi1i] if clearripplei1Ill11liiIIIl1I1l1(clearrippleIilI1I11Ii1ilIi1Ill(clearripplelIl1I1iiIlli1li1l1lil[86455]), 1, 1) == "s" then return { [86455] = clearripplei1Ill11liiIIIl1I1l1(clearripplelIl1I1iiIlli1li1l1lil[86455], 2) } end return clearripplelIl1I1iiIlli1li1l1lil end }) local clearripplel1IIl1iiIliliIIIiIl = 98970 local clearrippleilIl1I1l1IiIi1IllIi = clearripplelIlIlII1111iI1i1iIi11[115519] local clearrippleilil1IIi11lIlllI1II = 86455 local clearripplelIlii1I1iiiIIIliIli1i = clearripplelIlIlII1111iI1i1iIi11[44336] local clearripplelIliIIiIIIIlIi111iil1 = 19437 local clearripplelI11iil1II1i11iilll = clearripplelIlIlII1111iI1i1iIi11[124419] local clearrippleI11l1l1ilIl1IIl1ilI = 104697 local function clearrippleII1lIilII1Ii1lI1lIi(...) local clearripplel11illIil11iIl1iil1 = 0 local clearrippleIIIillI1iIlIilIII1i = { clearrippleiil11Il1Illi11l1Ill({}, 1, clearripplelIlIlII1111iI1i1iIi11[37510]) } local clearripplel1IIlii1I1ii1i1i1Ii = 1 local clearrippleiiIIiiI11iiIIl11iIl = {} local clearrippleiiiiIi1lilIiiIlil1I = {} local clearrippleliliIliIi1i11liiIl1 = 1 local clearrippleliIlI1lIiiii1iIlllI = clearripplelIliIIi1I1lliil1lilli() local clearripplelIl1Ill1ll1l1iiIII1iI = { ... } local clearrippleIliIii1I1iIIIlIiII1 = {} local clearrippleiIIiilIiIIIllI1IlIi = #clearripplelIl1Ill1ll1l1iiIII1iI - 1 for clearripplelIlI1liiIIIi1I1IilI1i = 0, clearrippleiIIiilIiIIIllI1IlIi do if clearripplelIlii1I1iiiIIIliIli1i >= clearripplelIlI1liiIIIi1I1IilI1i + 1 then clearrippleIIIillI1iIlIilIII1i[clearripplelIlI1liiIIIi1I1IilI1i] = clearripplelIl1Ill1ll1l1iiIII1iI[clearripplelIlI1liiIIIi1I1IilI1i + 1] end clearrippleIliIii1I1iIIIlIiII1[clearripplelIlI1liiIIIi1I1IilI1i] = clearripplelIl1Ill1ll1l1iiIII1iI[clearripplelIlI1liiIIIi1I1IilI1i + 1] end local function clearripplelIl1ll1Ili1iIil1i1I(...) local clearrippleI1lIllIIiIlIIliillI = clearripplelIlII1l11l1ilil111iiI("#", ...) local clearripplelIil11iiIl1lI1ilili = { ... } return clearrippleI1lIllIIiIlIIliillI, clearripplelIil11iiIl1lI1ilili end local clearripplelIl1IIlIil111Iiilllll = #{ 4713, 6642, 71, 4341, 3112, 6697, 6234, 2923, 4110, 5799, 5810, 4322, 3373, 3163, 4767, 5811, 2789, 1464, 6451, 6336, 5523 } + 131050 local clearrippleIIIlliIII1lliIi1lii local clearripplelI1IIIliliIli1ii11I = { nil, nil, nil, function(clearripplelll1III11Ilill111ii) local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] if not not clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] == (clearrippleIiiilIlIiI1111l1I1l == 0) then clearripplel1IIlii1I1ii1i1i1Ii = clearripplel1IIlii1I1ii1i1i1Ii + 1 else clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end end, nil, nil, nil, nil, function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll) local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearripplelIIIlIlII1IiI11IIlI, clearrippleIilIiIIiiIlIIl111I1, clearrippleII1li11iiIII1I1li1I if clearripplelIllI1llll1I1IiiII11i == 1 then return true end if clearripplelIllI1llll1I1IiiII11i == 0 then clearripplelIIIlIlII1IiI11IIlI = clearripplel11illIil11iIl1iil1 else clearripplelIIIlIlII1IiI11IIlI = clearrippleilIilliiIi1llIiill1 + clearripplelIllI1llll1I1IiiII11i - 2 end clearrippleII1li11iiIII1I1li1I = {} clearrippleIilIiIIiiIlIIl111I1 = 0 for clearripplelIlI1liiIIIi1I1IilI1i = clearrippleilIilliiIi1llIiill1, clearripplelIIIlIlII1IiI11IIlI do clearrippleIilIiIIiiIlIIl111I1 = clearrippleIilIiIIiiIlIIl111I1 + 1 clearrippleII1li11iiIII1I1li1I[clearrippleIilIiIIiiIlIIl111I1] = clearrippleIIIillI1iIlIilIII1i[clearripplelIlI1liiIIIi1I1IilI1i] end return true, clearrippleII1li11iiIII1I1li1I, clearrippleIilIiIIiiIlIIl111I1 end, function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll, clearripplei1lIiii111llli1ilIl) local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] if clearripplelIllI1llll1I1IiiII11i == 103 then return clearrippleIIIlliIII1lliIi1lii[14]({ [58989] = (clearrippleilIilliiIi1llIiill1 - 112) % 256, [104697] = (clearrippleIiiilIlIiI1111l1I1l - 112) % 256, [56075] = 0 }) end if clearripplelIllI1llll1I1IiiII11i == 18 then return clearrippleIIIlliIII1lliIi1lii[4]({ [58989] = (clearrippleilIilliiIi1llIiill1 - 42) % 256, [104697] = (clearrippleIiiilIlIiI1111l1I1l - 42) % 256, [56075] = 0 }) end if clearripplelIllI1llll1I1IiiII11i == 146 then return clearrippleIIIlliIII1lliIi1lii[26]({ [58989] = (clearrippleilIilliiIi1llIiill1 - 181) % 256, [90888] = (clearrippleIiiilIlIiI1111l1I1l - 181) % 256, [56075] = 0 }) end if not not clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] == (clearrippleIiiilIlIiI1111l1I1l == 0) then clearripplel1IIlii1I1ii1i1i1Ii = clearripplel1IIlii1I1ii1i1i1Ii + 1 end end, nil, nil, function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll) local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = #clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end, function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll, clearripplei1lIiii111llli1ilIl, clearrippleiI11i1i11ll1ll1IIIi) local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIIil1liI1ll11Iiili = clearrippleilIl1I1l1IiIi1IllIi[clearripplelIlIlllilliII1iii1l1I] local clearrippleIIiIiIi1liI11llIiil = {} local clearrippleIIiilii1IilllIIl1li = clearrippleIlI1iIi1i1iii1iiiII({}, { __index = function(clearripplelIil11iiIl1lI1ilili, clearripplelIl11IiIi1lllIlIlIi1i) local clearrippleIIIili11I1i111lI1iI = clearrippleIIiIiIi1liI11llIiil[clearripplelIl11IiIi1lllIlIlIi1i] return clearrippleIIIili11I1i111lI1iI[1][clearrippleIIIili11I1i111lI1iI[2]] end, __newindex = function(clearripplelIil11iiIl1lI1ilili, clearripplelIl11IiIi1lllIlIlIi1i, clearripplei1ll1iililiiIilIII1) local clearrippleIIIili11I1i111lI1iI = clearrippleIIiIiIi1liI11llIiil[clearripplelIl11IiIi1lllIlIlIi1i] clearrippleIIIili11I1i111lI1iI[1][clearrippleIIIili11I1i111lI1iI[2]] = clearripplei1ll1iililiiIilIII1 end }) for clearripplelIlI1liiIIIi1I1IilI1i = 1, clearripplelIIil1liI1ll11Iiili[clearripplel1IIl1iiIliliIIIiIl] do local clearripplelIlI1IIli1llI1li1ill1 = clearrippleii1lIIIiII11lli1111[clearripplel1IIlii1I1ii1i1i1Ii] if clearripplelIlI1IIli1llI1li1ill1[clearripplelIliIIiIIIIlIi111iil1] == clearrippleiIiIi11illIiIlI11II then clearrippleIIiIiIi1liI11llIiil[clearripplelIlI1liiIIIi1I1IilI1i - 1] = { clearrippleIIIillI1iIlIilIII1i, clearripplelIlI1IIli1llI1li1ill1[clearrippleI11l1l1ilIl1IIl1ilI] } elseif clearripplelIlI1IIli1llI1li1ill1[clearripplelIliIIiIIIIlIi111iil1] == clearrippleIlliIi1lil1llliIlI1 then clearrippleIIiIiIi1liI11llIiil[clearripplelIlI1liiIIIi1I1IilI1i - 1] = { clearrippleI111l1liIlIll1iiI1I, clearripplelIlI1IIli1llI1li1ill1[clearrippleI11l1l1ilIl1IIl1ilI] } end clearripplel1IIlii1I1ii1i1i1Ii = clearripplel1IIlii1I1ii1i1i1Ii + 1 end if clearripplelIIil1liI1ll11Iiili[clearripplel1IIl1iiIliliIIIiIl] > 0 then clearrippleiiIIiiI11iiIIl11iIl[#clearrippleiiIIiiI11iiIIl11iIl + 1] = clearrippleIIiIiIi1liI11llIiil end local clearripplelIlI1IllIliIllllI1i1l = clearripplelIllIiIIiliIIlll1ili1(clearripplelIIil1liI1ll11Iiili, clearrippleliIlI1lIiiii1iIlllI, clearrippleIIiilii1IilllIIl1li) clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearripplelIlI1IllIliIllllI1i1l end, function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll) local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearrippleiiliiiIi1Iill11ilIi = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] for clearripplelIlI1liiIIIi1I1IilI1i = clearripplelIllI1llll1I1IiiII11i + 1, clearrippleIiiilIlIiI1111l1I1l do clearrippleiiliiiIi1Iill11ilIi = clearrippleiiliiiIi1Iill11ilIi .. clearrippleIIIillI1iIlIilIII1i[clearripplelIlI1liiIIIi1I1IilI1i] end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearrippleiiliiiIi1Iill11ilIi end, function(clearripplelll1III11Ilill111ii) local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] clearrippleilIilliiIi1llIiill1 = clearrippleilIilliiIi1llIiill1 ~= 0 if clearripplelIllI1llll1I1IiiII11i > 255 then clearripplelIllI1llll1I1IiiII11i = clearripplel1111ii1IIii1iiIlIl[clearripplelIllI1llll1I1IiiII11i - 256][clearrippleilil1IIi11lIlllI1II] else clearripplelIllI1llll1I1IiiII11i = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end if clearrippleIiiilIlIiI1111l1I1l > 255 then clearrippleIiiilIlIiI1111l1I1l = clearripplel1111ii1IIii1iiIlIl[clearrippleIiiilIlIiI1111l1I1l - 256][clearrippleilil1IIi11lIlllI1II] else clearrippleIiiilIlIiI1111l1I1l = clearrippleIIIillI1iIlIilIII1i[clearrippleIiiilIlIiI1111l1I1l] end if clearripplelIllI1llll1I1IiiII11i == clearrippleIiiilIlIiI1111l1I1l ~= clearrippleilIilliiIi1llIiill1 then clearripplel1IIlii1I1ii1i1i1Ii = clearripplel1IIlii1I1ii1i1i1Ii + 1 end end, nil, nil, nil, nil, function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll, clearripplei1lIiii111llli1ilIl) local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleIii11IllI1il1l1iiIi = clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1 + 2] local clearrippleiI1il1l1I1111lliIlI = clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] + clearrippleIii11IllI1il1l1iiIi clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearrippleiI1il1l1I1111lliIlI if clearrippleIii11IllI1il1l1iiIi > 0 then if clearrippleiI1il1l1I1111lliIlI <= clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1 + 1] then clearripplel1IIlii1I1ii1i1i1Ii = clearripplel1IIlii1I1ii1i1i1Ii + clearripplelIllliIlI111IiiIilli1 clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1 + 3] = clearrippleiI1il1l1I1111lliIlI end elseif clearrippleiI1il1l1I1111lliIlI >= clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1 + 1] then clearripplel1IIlii1I1ii1i1i1Ii = clearripplel1IIlii1I1ii1i1i1Ii + clearripplelIllliIlI111IiiIilli1 clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1 + 3] = clearrippleiI1il1l1I1111lliIlI end end, nil, function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11) local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] if clearrippleIiiilIlIiI1111l1I1l == 220 then return clearrippleIIIlliIII1lliIi1lii[13]({ [58989] = (clearrippleilIilliiIi1llIiill1 - 75) % 256, [104697] = (clearripplelIllI1llll1I1IiiII11i - 75) % 256, [56075] = 0 }) end for clearripplelIlI1liiIIIi1I1IilI1i = clearrippleilIilliiIi1llIiill1, clearripplelIllI1llll1I1IiiII11i do clearrippleIIIillI1iIlIilIII1i[clearripplelIlI1liiIIIi1I1IilI1i] = nil end end, nil, nil, function(clearripplelll1III11Ilill111ii) local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll if clearrippleIiiilIlIiI1111l1I1l > 255 then clearrippleIiiilIlIiI1111l1I1l = clearripplel1111ii1IIii1iiIlIl[clearrippleIiiilIlIiI1111l1I1l - 256][clearrippleilil1IIi11lIlllI1II] else clearrippleIiiilIlIiI1111l1I1l = clearrippleIIIillI1iIlIilIII1i[clearrippleIiiilIlIiI1111l1I1l] end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i][clearrippleIiiilIlIiI1111l1I1l] end, nil, nil, function(clearripplelll1III11Ilill111ii) local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] clearripplelIllI1llll1I1IiiII11i = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] if clearrippleIiiilIlIiI1111l1I1l > 255 then clearrippleIiiilIlIiI1111l1I1l = clearripplel1111ii1IIii1iiIlIl[clearrippleIiiilIlIiI1111l1I1l - 256][clearrippleilil1IIi11lIlllI1II] else clearrippleIiiilIlIiI1111l1I1l = clearrippleIIIillI1iIlIilIII1i[clearrippleIiiilIlIiI1111l1I1l] end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1 + 1] = clearripplelIllI1llll1I1IiiII11i clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearripplelIllI1llll1I1IiiII11i[clearrippleIiiilIlIiI1111l1I1l] end, nil, nil, nil, nil } clearripplelI1IIIliliIli1ii11I[3] = function(clearripplelll1III11Ilill111ii) local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIl1Ill1ll1l1iiIII1iI, clearrippleIl11II1liiI1IliIIil, clearripplelIIIlIlII1IiI11IIlI, clearrippleIilIiIIiiIlIIl111I1 clearripplelIl1Ill1ll1l1iiIII1iI = {} if clearripplelIllI1llll1I1IiiII11i ~= 1 then if clearripplelIllI1llll1I1IiiII11i ~= 0 then clearripplelIIIlIlII1IiI11IIlI = clearrippleilIilliiIi1llIiill1 + clearripplelIllI1llll1I1IiiII11i - 1 else clearripplelIIIlIlII1IiI11IIlI = clearripplel11illIil11iIl1iil1 end clearrippleIilIiIIiiIlIIl111I1 = 0 for clearripplelIlI1liiIIIi1I1IilI1i = clearrippleilIilliiIi1llIiill1 + 1, clearripplelIIIlIlII1IiI11IIlI do clearrippleIilIiIIiiIlIIl111I1 = clearrippleIilIiIIiiIlIIl111I1 + 1 clearripplelIl1Ill1ll1l1iiIII1iI[clearrippleIilIiIIiiIlIIl111I1] = clearrippleIIIillI1iIlIilIII1i[clearripplelIlI1liiIIIi1I1IilI1i] end clearripplelIIIlIlII1IiI11IIlI, clearrippleIl11II1liiI1IliIIil = clearripplelIl1ll1Ili1iIil1i1I(clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1](clearrippleiil11Il1Illi11l1Ill(clearripplelIl1Ill1ll1l1iiIII1iI, 1, clearripplelIIIlIlII1IiI11IIlI - clearrippleilIilliiIi1llIiill1))) else clearripplelIIIlIlII1IiI11IIlI, clearrippleIl11II1liiI1IliIIil = clearripplelIl1ll1Ili1iIil1i1I(clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1]()) end if clearrippleIiiilIlIiI1111l1I1l ~= 1 then if clearrippleIiiilIlIiI1111l1I1l ~= 0 then clearripplelIIIlIlII1IiI11IIlI = clearrippleilIilliiIi1llIiill1 + clearrippleIiiilIlIiI1111l1I1l - 2 else clearripplelIIIlIlII1IiI11IIlI = clearripplelIIIlIlII1IiI11IIlI + clearrippleilIilliiIi1llIiill1 end clearrippleIilIiIIiiIlIIl111I1 = 0 for clearripplelIlI1liiIIIi1I1IilI1i = clearrippleilIilliiIi1llIiill1, clearripplelIIIlIlII1IiI11IIlI do clearrippleIilIiIIiiIlIIl111I1 = clearrippleIilIiIIiiIlIIl111I1 + 1 clearrippleIIIillI1iIlIilIII1i[clearripplelIlI1liiIIIi1I1IilI1i] = clearrippleIl11II1liiI1IliIIil[clearrippleIilIiIIiiIlIIl111I1] end end clearripplel11illIil11iIl1iil1 = clearripplelIIIlIlII1IiI11IIlI - 1 end clearripplelI1IIIliliIli1ii11I[31] = function(clearripplelll1III11Ilill111ii) local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] if clearripplelIllI1llll1I1IiiII11i > 255 then clearripplelIllI1llll1I1IiiII11i = clearripplel1111ii1IIii1iiIlIl[clearripplelIllI1llll1I1IiiII11i - 256][clearrippleilil1IIi11lIlllI1II] else clearripplelIllI1llll1I1IiiII11i = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end if clearrippleIiiilIlIiI1111l1I1l > 255 then clearrippleIiiilIlIiI1111l1I1l = clearripplel1111ii1IIii1iiIlIl[clearrippleIiiilIlIiI1111l1I1l - 256][clearrippleilil1IIi11lIlllI1II] else clearrippleIiiilIlIiI1111l1I1l = clearrippleIIIillI1iIlIilIII1i[clearrippleIiiilIlIiI1111l1I1l] end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearripplelIllI1llll1I1IiiII11i % clearrippleIiiilIlIiI1111l1I1l end clearripplelI1IIIliliIli1ii11I[30] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll, clearripplei1lIiii111llli1ilIl, clearrippleiI11i1i11ll1ll1IIIi) local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll if clearripplelIllI1llll1I1IiiII11i > 255 then clearripplelIllI1llll1I1IiiII11i = clearripplel1111ii1IIii1iiIlIl[clearripplelIllI1llll1I1IiiII11i - 256][clearrippleilil1IIi11lIlllI1II] else clearripplelIllI1llll1I1IiiII11i = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end if clearrippleIiiilIlIiI1111l1I1l > 255 then clearrippleIiiilIlIiI1111l1I1l = clearripplel1111ii1IIii1iiIlIl[clearrippleIiiilIlIiI1111l1I1l - 256][clearrippleilil1IIi11lIlllI1II] else clearrippleIiiilIlIiI1111l1I1l = clearrippleIIIillI1iIlIilIII1i[clearrippleIiiilIlIiI1111l1I1l] end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearripplelIllI1llll1I1IiiII11i * clearrippleIiiilIlIiI1111l1I1l end clearripplelI1IIIliliIli1ii11I[18] = function(clearripplelll1III11Ilill111ii) local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] if clearrippleIiiilIlIiI1111l1I1l == 119 then return clearrippleIIIlliIII1lliIi1lii[15]({ [58989] = (clearrippleilIilliiIi1llIiill1 - 87) % 256, [104697] = (clearripplelIllI1llll1I1IiiII11i - 87) % 256, [56075] = 0 }) end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearrippleI111l1liIlIll1iiI1I[clearripplelIllI1llll1I1IiiII11i] end clearripplelI1IIIliliIli1ii11I[24] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll) local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] clearripplel1IIlii1I1ii1i1i1Ii = clearripplel1IIlii1I1ii1i1i1Ii + clearripplelIllliIlI111IiiIilli1 end clearripplelI1IIIliliIli1ii11I[22] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11) local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] if clearripplelIllI1llll1I1IiiII11i > 255 then clearripplelIllI1llll1I1IiiII11i = clearripplel1111ii1IIii1iiIlIl[clearripplelIllI1llll1I1IiiII11i - 256][clearrippleilil1IIi11lIlllI1II] else clearripplelIllI1llll1I1IiiII11i = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end if clearrippleIiiilIlIiI1111l1I1l > 255 then clearrippleIiiilIlIiI1111l1I1l = clearripplel1111ii1IIii1iiIlIl[clearrippleIiiilIlIiI1111l1I1l - 256][clearrippleilil1IIi11lIlllI1II] else clearrippleIiiilIlIiI1111l1I1l = clearrippleIIIillI1iIlIilIII1i[clearrippleIiiilIlIiI1111l1I1l] end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearripplelIllI1llll1I1IiiII11i ^ clearrippleIiiilIlIiI1111l1I1l end clearripplelI1IIIliliIli1ii11I[28] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll) local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = not clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end clearripplelI1IIIliliIli1ii11I[1] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll) local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll if clearrippleIiiilIlIiI1111l1I1l == 248 then return clearrippleIIIlliIII1lliIi1lii[25]({ [58989] = (clearrippleilIilliiIi1llIiill1 - 28) % 256, [104697] = (clearripplelIllI1llll1I1IiiII11i - 28) % 256, [56075] = 0 }) end if clearrippleIiiilIlIiI1111l1I1l == 3 then return clearrippleIIIlliIII1lliIi1lii[18]({ [58989] = (clearrippleilIilliiIi1llIiill1 - 169) % 256, [104697] = (clearripplelIllI1llll1I1IiiII11i - 169) % 256, [56075] = 0 }) end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end clearripplelI1IIIliliIli1ii11I[32] = function(clearripplelll1III11Ilill111ii) local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIl1IiiIIiIl1iIlI1i1l if clearripplelIlIlllilliII1iii1l1I == 100000 then clearripplelIl1IiiIIiIl1iIlI1i1l = clearrippleIIIillI1iIlIilIII1i[251] else clearripplelIl1IiiIIiIl1iIlI1i1l = clearripplel1111ii1IIii1iiIlIl[clearripplelIlIlllilliII1iii1l1I][clearrippleilil1IIi11lIlllI1II] end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearrippleliIlI1lIiiii1iIlllI[clearripplelIl1IiiIIiIl1iIlI1i1l] end clearripplelI1IIIliliIli1ii11I[0] = function(clearripplelll1III11Ilill111ii) local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIl1IiiIIiIl1iIlI1i1l if clearripplelIlIlllilliII1iii1l1I == 100000 then clearripplelIl1IiiIIiIl1iIlI1i1l = clearrippleIIIillI1iIlIilIII1i[251] else clearripplelIl1IiiIIiIl1iIlI1i1l = clearripplel1111ii1IIii1iiIlIl[clearripplelIlIlllilliII1iii1l1I][clearrippleilil1IIi11lIlllI1II] end clearrippleliIlI1lIiiii1iIlllI[clearripplelIl1IiiIIiIl1iIlI1i1l] = clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] end clearripplelI1IIIliliIli1ii11I[8] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11) local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll if clearripplelIllI1llll1I1IiiII11i > 255 then clearripplelIllI1llll1I1IiiII11i = clearripplel1111ii1IIii1iiIlIl[clearripplelIllI1llll1I1IiiII11i - 256][clearrippleilil1IIi11lIlllI1II] else clearripplelIllI1llll1I1IiiII11i = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end if clearrippleIiiilIlIiI1111l1I1l > 255 then clearrippleIiiilIlIiI1111l1I1l = clearripplel1111ii1IIii1iiIlIl[clearrippleIiiilIlIiI1111l1I1l - 256][clearrippleilil1IIi11lIlllI1II] else clearrippleIiiilIlIiI1111l1I1l = clearrippleIIIillI1iIlIilIII1i[clearrippleIiiilIlIiI1111l1I1l] end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearripplelIllI1llll1I1IiiII11i + clearrippleIiiilIlIiI1111l1I1l end clearripplelI1IIIliliIli1ii11I[25] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll, clearripplei1lIiii111llli1ilIl) local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] if clearrippleIiiilIlIiI1111l1I1l == 202 then return clearrippleIIIlliIII1lliIi1lii[31]({ [58989] = (clearrippleilIilliiIi1llIiill1 - 213) % 256, [90888] = (clearripplelIllI1llll1I1IiiII11i - 213) % 256, [56075] = 0 }) end for clearripplelIlI1liiIIIi1I1IilI1i = clearrippleilIilliiIi1llIiill1, #clearrippleIIIillI1iIlIilIII1i do local clearripplelIlIiIIl11iiIll11I1lI = clearrippleliliIliIi1i11liiIl1 for clearrippleill1ii111iIliIl11i1, clearripplelI1ll111lI111i111II in next, clearrippleiiIIiiI11iiIIl11iIl, nil do for clearripplelIl1IiiIIiIl1iIlI1i1l, clearrippleIIIili11I1i111lI1iI in next, clearripplelI1ll111lI111i111II, nil do if clearrippleIIIillI1iIlIilIII1i == clearrippleIIIili11I1i111lI1iI[1] and clearrippleIIIili11I1i111lI1iI[2] == clearripplelIlI1liiIIIi1I1IilI1i then if not clearrippleiiiiIi1lilIiiIlil1I[clearripplelIlIiIIl11iiIll11I1lI] then clearrippleiiiiIi1lilIiiIlil1I[clearripplelIlIiIIl11iiIll11I1lI] = clearrippleIIIillI1iIlIilIII1i[clearripplelIlI1liiIIIi1I1IilI1i] clearrippleliliIliIi1i11liiIl1 = clearrippleliliIliIi1i11liiIl1 + 1 end clearripplelI1ll111lI111i111II[clearripplelIl1IiiIIiIl1iIlI1i1l] = {clearrippleiiiiIi1lilIiiIlil1I, clearripplelIlIiIIl11iiIll11I1lI} end end end end end clearripplelI1IIIliliIli1ii11I[5] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll) local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearripplel1111ii1IIii1iiIlIl[clearripplelIlIlllilliII1iii1l1I][clearrippleilil1IIi11lIlllI1II] end clearripplelI1IIIliliIli1ii11I[7] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11) local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] clearrippleilIilliiIi1llIiill1 = clearrippleilIilliiIi1llIiill1 ~= 0 if clearripplelIllI1llll1I1IiiII11i > 255 then clearripplelIllI1llll1I1IiiII11i = clearripplel1111ii1IIii1iiIlIl[clearripplelIllI1llll1I1IiiII11i - 256][clearrippleilil1IIi11lIlllI1II] else clearripplelIllI1llll1I1IiiII11i = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end if clearrippleIiiilIlIiI1111l1I1l > 255 then clearrippleIiiilIlIiI1111l1I1l = clearripplel1111ii1IIii1iiIlIl[clearrippleIiiilIlIiI1111l1I1l - 256][clearrippleilil1IIi11lIlllI1II] else clearrippleIiiilIlIiI1111l1I1l = clearrippleIIIillI1iIlIilIII1i[clearrippleIiiilIlIiI1111l1I1l] end if clearripplelIllI1llll1I1IiiII11i <= clearrippleIiiilIlIiI1111l1I1l ~= clearrippleilIilliiIi1llIiill1 then clearripplel1IIlii1I1ii1i1i1Ii = clearripplel1IIlii1I1ii1i1i1Ii + 1 end end clearripplelI1IIIliliIli1ii11I[33] = function(clearripplelll1III11Ilill111ii) local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] if clearripplelIllI1llll1I1IiiII11i > 255 then clearripplelIllI1llll1I1IiiII11i = clearripplel1111ii1IIii1iiIlIl[clearripplelIllI1llll1I1IiiII11i - 256][clearrippleilil1IIi11lIlllI1II] else clearripplelIllI1llll1I1IiiII11i = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end if clearrippleIiiilIlIiI1111l1I1l > 255 then clearrippleIiiilIlIiI1111l1I1l = clearripplel1111ii1IIii1iiIlIl[clearrippleIiiilIlIiI1111l1I1l - 256][clearrippleilil1IIi11lIlllI1II] else clearrippleIiiilIlIiI1111l1I1l = clearrippleIIIillI1iIlIilIII1i[clearrippleIiiilIlIiI1111l1I1l] end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearripplelIllI1llll1I1IiiII11i / clearrippleIiiilIlIiI1111l1I1l end clearripplelI1IIIliliIli1ii11I[27] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll) local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll if clearripplelIllI1llll1I1IiiII11i > 255 then clearripplelIllI1llll1I1IiiII11i = clearripplel1111ii1IIii1iiIlIl[clearripplelIllI1llll1I1IiiII11i - 256][clearrippleilil1IIi11lIlllI1II] else clearripplelIllI1llll1I1IiiII11i = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end if clearrippleIiiilIlIiI1111l1I1l > 255 then clearrippleIiiilIlIiI1111l1I1l = clearripplel1111ii1IIii1iiIlIl[clearrippleIiiilIlIiI1111l1I1l - 256][clearrippleilil1IIi11lIlllI1II] else clearrippleIiiilIlIiI1111l1I1l = clearrippleIIIillI1iIlIilIII1i[clearrippleIiiilIlIiI1111l1I1l] end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearripplelIllI1llll1I1IiiII11i - clearrippleIiiilIlIiI1111l1I1l end clearripplelI1IIIliliIli1ii11I[2] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll) local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] clearrippleilIilliiIi1llIiill1 = clearrippleilIilliiIi1llIiill1 ~= 0 if clearripplelIllI1llll1I1IiiII11i > 255 then clearripplelIllI1llll1I1IiiII11i = clearripplel1111ii1IIii1iiIlIl[clearripplelIllI1llll1I1IiiII11i - 256][clearrippleilil1IIi11lIlllI1II] else clearripplelIllI1llll1I1IiiII11i = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end if clearrippleIiiilIlIiI1111l1I1l > 255 then clearrippleIiiilIlIiI1111l1I1l = clearripplel1111ii1IIii1iiIlIl[clearrippleIiiilIlIiI1111l1I1l - 256][clearrippleilil1IIi11lIlllI1II] else clearrippleIiiilIlIiI1111l1I1l = clearrippleIIIillI1iIlIilIII1i[clearrippleIiiilIlIiI1111l1I1l] end if clearripplelIllI1llll1I1IiiII11i < clearrippleIiiilIlIiI1111l1I1l ~= clearrippleilIilliiIi1llIiill1 then clearripplel1IIlii1I1ii1i1i1Ii = clearripplel1IIlii1I1ii1i1i1Ii + 1 end end clearripplelI1IIIliliIli1ii11I[17] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll, clearripplei1lIiii111llli1ilIl) local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] if clearripplelIllI1llll1I1IiiII11i > 255 then clearripplelIllI1llll1I1IiiII11i = clearripplel1111ii1IIii1iiIlIl[clearripplelIllI1llll1I1IiiII11i - 256][clearrippleilil1IIi11lIlllI1II] else clearripplelIllI1llll1I1IiiII11i = clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end if clearrippleIiiilIlIiI1111l1I1l > 255 then clearrippleIiiilIlIiI1111l1I1l = clearripplel1111ii1IIii1iiIlIl[clearrippleIiiilIlIiI1111l1I1l - 256][clearrippleilil1IIi11lIlllI1II] else clearrippleIiiilIlIiI1111l1I1l = clearrippleIIIillI1iIlIilIII1i[clearrippleIiiilIlIiI1111l1I1l] end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1][clearripplelIllI1llll1I1IiiII11i] = clearrippleIiiilIlIiI1111l1I1l end clearripplelI1IIIliliIli1ii11I[19] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11) local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIlI1lllII11IlliIiili = clearrippleilIilliiIi1llIiill1 + 2 local clearrippleiiliiiIi1Iill11ilIi = { clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1](clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1 + 1], clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1 + 2]) } for clearripplelIlI1liiIIIi1I1IilI1i = 1, clearrippleIiiilIlIiI1111l1I1l do clearrippleIIIillI1iIlIilIII1i[clearripplelIlI1lllII11IlliIiili + clearripplelIlI1liiIIIi1I1IilI1i] = clearrippleiiliiiIi1Iill11ilIi[clearripplelIlI1liiIIIi1I1IilI1i] end if clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1 + 3] ~= nil then clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1 + 2] = clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1 + 3] else clearripplel1IIlii1I1ii1i1i1Ii = clearripplel1IIlii1I1ii1i1i1Ii + 1 end end clearripplelI1IIIliliIli1ii11I[20] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll, clearripplei1lIiii111llli1ilIl, clearrippleiI11i1i11ll1ll1IIIi) local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = { clearrippleiil11Il1Illi11l1Ill({}, 1, clearripplelIllI1llll1I1IiiII11i > 7999 and 7999 or clearripplelIllI1llll1I1IiiII11i) } end clearripplelI1IIIliliIli1ii11I[11] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll, clearripplei1lIiii111llli1ilIl) local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] if clearrippleIiiilIlIiI1111l1I1l == 100 then return clearrippleIIIlliIII1lliIi1lii[2]({ [58989] = (clearrippleilIilliiIi1llIiill1 - 211) % 256, [104697] = (clearripplelIllI1llll1I1IiiII11i - 211) % 256, [56075] = 0 }) end if clearrippleIiiilIlIiI1111l1I1l == 198 then return clearrippleIIIlliIII1lliIi1lii[24]({ [58989] = (clearrippleilIilliiIi1llIiill1 - 188) % 256, [104697] = (clearripplelIllI1llll1I1IiiII11i - 188) % 256, [56075] = 0 }) end clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = -clearrippleIIIillI1iIlIilIII1i[clearripplelIllI1llll1I1IiiII11i] end clearripplelI1IIIliliIli1ii11I[6] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11, clearripplelIli11l1Il1IIiiiI1lll) local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] = clearripplelIllI1llll1I1IiiII11i ~= 0 if clearrippleIiiilIlIiI1111l1I1l ~= 0 then clearripplel1IIlii1I1ii1i1i1Ii = clearripplel1IIlii1I1ii1i1i1Ii + 1 end end clearripplelI1IIIliliIli1ii11I[12] = function(clearripplelll1III11Ilill111ii, clearripplelIlIIlI1II1IIl1llli11) local clearrippleIiiilIlIiI1111l1I1l = clearripplelll1III11Ilill111ii[90888] local clearripplelIlIlllilliII1iii1l1I = clearripplelll1III11Ilill111ii[56075] local clearripplelIllI1llll1I1IiiII11i = clearripplelll1III11Ilill111ii[104697] local clearripplelIllliIlI111IiiIilli1 = clearripplelll1III11Ilill111ii[56075] - clearripplelIl1IIlIil111Iiilllll local clearrippleilIilliiIi1llIiill1 = clearripplelll1III11Ilill111ii[58989] clearrippleI111l1liIlIll1iiI1I[clearripplelIllI1llll1I1IiiII11i] = clearrippleIIIillI1iIlIilIII1i[clearrippleilIilliiIi1llIiill1] end clearrippleIIIlliIII1lliIi1lii = { clearripplelI1IIIliliIli1ii11I[5], clearripplelI1IIIliliIli1ii11I[1], clearripplelI1IIIliliIli1ii11I[0], clearripplelI1IIIliliIli1ii11I[28], clearripplelI1IIIliliIli1ii11I[31], clearripplelI1IIIliliIli1ii11I[14], clearripplelI1IIIliliIli1ii11I[15], clearripplelI1IIIliliIli1ii11I[17], clearripplelI1IIIliliIli1ii11I[32], clearripplelI1IIIliliIli1ii11I[26], clearripplelI1IIIliliIli1ii11I[6], clearripplelI1IIIliliIli1ii11I[8], clearripplelI1IIIliliIli1ii11I[13], clearripplelI1IIIliliIli1ii11I[18], clearripplelI1IIIliliIli1ii11I[12], clearripplelI1IIIliliIli1ii11I[2], clearripplelI1IIIliliIli1ii11I[29], clearripplelI1IIIliliIli1ii11I[25], clearripplelI1IIIliliIli1ii11I[27], clearripplelI1IIIliliIli1ii11I[22], clearripplelI1IIIliliIli1ii11I[20], clearripplelI1IIIliliIli1ii11I[30], clearripplelI1IIIliliIli1ii11I[33], clearripplelI1IIIliliIli1ii11I[23], clearripplelI1IIIliliIli1ii11I[9], clearripplelI1IIIliliIli1ii11I[19], clearripplelI1IIIliliIli1ii11I[7], clearripplelI1IIIliliIli1ii11I[16], clearripplelI1IIIliliIli1ii11I[24], clearripplelI1IIIliliIli1ii11I[3], clearripplelI1IIIliliIli1ii11I[10], clearripplelI1IIIliliIli1ii11I[4], clearripplelI1IIIliliIli1ii11I[11], clearripplelI1IIIliliIli1ii11I[21] } local function clearrippleIilIiIIiiIlIIl111I1() while true do local clearripplelll1III11Ilill111ii = clearrippleii1lIIIiII11lli1111[clearripplel1IIlii1I1ii1i1i1Ii] clearripplel1IIlii1I1ii1i1i1Ii = clearripplel1IIlii1I1ii1i1i1Ii + 1 local clearripplell1iiilI11li1lIilIi, clearripplelIl1I1iiIlli1li1l1lil, clearrippleIiIiIIII1IIi1IiilI1 = clearrippleIIIlliIII1lliIi1lii[clearripplelll1III11Ilill111ii[19437] + 1](clearripplelll1III11Ilill111ii) if clearripplell1iiilI11li1lIilIi then return clearripplelIl1I1iiIlli1li1l1lil, clearrippleIiIiIIII1IIi1IiilI1 end end end local clearrippleIi1IIl11iiiIIl11ll1, clearripplelIl1I1iiIlli1li1l1lil, clearrippleIiIiIIII1IIi1IiilI1 = clearrippleli11ii11ill111IIi1l(clearrippleIilIiIIiiIlIIl111I1) if clearrippleIi1IIl11iiiIIl11ll1 then if clearripplelIl1I1iiIlli1li1l1lil and clearrippleIiIiIIII1IIi1IiilI1 > 0 then return clearrippleiil11Il1Illi11l1Ill(clearripplelIl1I1iiIlli1li1l1lil, 1, clearrippleIiIiIIII1IIi1IiilI1) end else local clearrippleliiIlllIII1IIl1lll1 = clearrippleII1I11iiliI1lliiii1("Luraph Script:" .. (clearripplelI11iil1II1i11iilll[clearripplel1IIlii1I1ii1i1i1Ii - 1] or "") .. ": " .. clearripplelIlIiIil1Ill1Ii1III1i(clearripplelIl1I1iiIlli1li1l1lil), "[^:]+:%d*: ", function(clearripplelIll11lilii1ill1Ii1I1) if not clearrippleilii1Ililli1liliiil(clearripplelIll11lilii1ill1Ii1I1, "Luraph Script:%d") then return "" end end) clearripplelli1lIl1iI1liIii1I1(clearrippleliiIlllIII1IIl1lll1, 0) end end clearripplelIliiliIiI1liilil1iI1(clearrippleII1lIilII1Ii1lI1lIi, clearrippleliIlI1lIiiii1iIlllI) return clearrippleII1lIilII1Ii1lI1lIi end local clearrippleli1iIIiiI1IIi1iIlll = clearrippleiil1i1Il111iilI11lI() return clearripplelIllIiIIiliIIlll1ili1(clearrippleli1iIIiiI1IIi1iIlll, clearrippleliIlI1lIiiii1iIlllI)() end clearripplelIiiIII11II1Ii111il("LPH|", clearripplelIliIIi1I1lliil1lilli()) 
end
task.spawn(C_G2L_25)


--JOHNDOE.Main.Shadow.Frame.Frame.Clear.cleAR
local function C_G2L_38()
local script = G2L["38"]
script.Parent.MouseButton1Down:Connect(function()
	script.Parent.Parent.TextBox.Text = " "
end)
end
task.spawn(C_G2L_38)


--JOHNDOE.Main.Shadow.Frame.Frame.hidetext.RIPPLE
local function C_G2L_44()
local script = G2L["44"]
-- This file was generated using Luraph Obfuscator v11.5 by memcorrupt.

local hidetextlIlll1ii1il11lliIliII = assert local hidetextI111iIlli1l1iIlIIII = select local hidetextlIl1II11illl1I1ili111 = tonumber local hidetextii1II1Iiil1IIiii111 = unpack local hidetextIi1IIl1iIIli11Ill11 = pcall local hidetextliIillIiiIlI1IliliI = setfenv local hidetextlIli1ll1IIllIilII1liI = setmetatable local hidetexti1i1IIiIli11iiiiiiI = type local hidetextIl111i11IIIlllIllI1 = getfenv local hidetextlIl1l1liilIiI1IlI11II = tostring local hidetextiIl111llIi1i1lil1lI = error local hidetextil11IIIlliiiiill11i = string.sub local hidetextiliiil1Il1lIIIlI1II = string.byte local hidetextlIliiliIlII1111l1llIi = string.char local hidetexti1l11liiIlil1I1IIIi = string.rep local hidetextilill1il1IiiiiiliII = string.gsub local hidetextlIl1llIl111I11iiliI11 = string.match local hidetextli11Iiii1iIII11IlI1 = 1 local function hidetextIllI1ii1i1lliIiiiI1(hidetextlIliIlII1III1iilIi11I, hidetextlIllIl1ll1I1IIiI11lI1) local hidetexti11iiilIIl1il1iIil1 hidetextlIliIlII1III1iilIi11I = hidetextilill1il1IiiiiiliII(hidetextil11IIIlliiiiill11i(hidetextlIliIlII1III1iilIi11I, 5), "..", function(hidetexti1i1iI1llllll1I1I1l) if hidetextiliiil1Il1lIIIlI1II(hidetexti1i1iI1llllll1I1I1l, 2) == 71 then hidetexti11iiilIIl1il1iIil1 = hidetextlIl1II11illl1I1ili111(hidetextil11IIIlliiiiill11i(hidetexti1i1iI1llllll1I1I1l, 1, 1)) return "" else local hidetextlIlIII1lI1IIll11ii1i1 = hidetextlIliiliIlII1111l1llIi(hidetextlIl1II11illl1I1ili111(hidetexti1i1iI1llllll1I1I1l, 16)) if hidetexti11iiilIIl1il1iIil1 then local hidetextlIlli111IilllIIiiliIi = hidetexti1l11liiIlil1I1IIIi(hidetextlIlIII1lI1IIll11ii1i1, hidetexti11iiilIIl1il1iIil1) hidetexti11iiilIIl1il1iIil1 = nil return hidetextlIlli111IilllIIiiliIi else return hidetextlIlIII1lI1IIll11ii1i1 end end end) local function hidetextii1I1IIIlii1l1l11II() local hidetextI1i11I1I111IIiII111 = hidetextiliiil1Il1lIIIlI1II(hidetextlIliIlII1III1iilIi11I, hidetextli11Iiii1iIII11IlI1, hidetextli11Iiii1iIII11IlI1) hidetextli11Iiii1iIII11IlI1 = hidetextli11Iiii1iIII11IlI1 + 1 return hidetextI1i11I1I111IIiII111 end local function hidetextlIlllliIiliilll1llli1() local hidetextI1i11I1I111IIiII111, hidetextlIlIII1lI1IIll11ii1i1, hidetextlIlli111IilllIIiiliIi, hidetextilIi1Iiill1IiiIiIlI = hidetextiliiil1Il1lIIIlI1II(hidetextlIliIlII1III1iilIi11I, hidetextli11Iiii1iIII11IlI1, hidetextli11Iiii1iIII11IlI1 + 3) hidetextli11Iiii1iIII11IlI1 = hidetextli11Iiii1iIII11IlI1 + 4 return hidetextilIi1Iiill1IiiIiIlI * 16777216 + hidetextlIlli111IilllIIiiliIi * 65536 + hidetextlIlIII1lI1IIll11ii1i1 * 256 + hidetextI1i11I1I111IIiII111 end local function hidetextlIliIiiIlliI11i1Il1II(hidetextII11liIllI1liIll111, hidetextiiiI1IlIl11llli1iIl, hidetextii1Il1lll1II1iiIli1) if hidetextii1Il1lll1II1iiIli1 then local hidetextiIiiIl1liliIII1llIi, hidetextlIilll1IiIilII1l1Ii = 0, 0 for hidetextIi1IiiIil1li11i1ili = hidetextiiiI1IlIl11llli1iIl, hidetextii1Il1lll1II1iiIli1 do hidetextiIiiIl1liliIII1llIi = hidetextiIiiIl1liliIII1llIi + 2 ^ hidetextlIilll1IiIilII1l1Ii * hidetextlIliIiiIlliI11i1Il1II(hidetextII11liIllI1liIll111, hidetextIi1IiiIil1li11i1ili) hidetextlIilll1IiIilII1l1Ii = hidetextlIilll1IiIilII1l1Ii + 1 end return hidetextiIiiIl1liliIII1llIi else local hidetextlIlllll1lllili1l1ilil = 2 ^ (hidetextiiiI1IlIl11llli1iIl - 1) return hidetextlIlllll1lllili1l1ilil <= hidetextII11liIllI1liIll111 % (hidetextlIlllll1lllili1l1ilil + hidetextlIlllll1lllili1l1ilil) and 1 or 0 end end local function hidetextl1i1ilI1ll1lI1111l1() local hidetextI1i11I1I111IIiII111, hidetextlIlIII1lI1IIll11ii1i1 = hidetextlIlllliIiliilll1llli1(), hidetextlIlllliIiliilll1llli1() if hidetextI1i11I1I111IIiII111 == 0 and hidetextlIlIII1lI1IIll11ii1i1 == 0 then return 0 end return (-2 * hidetextlIliIiiIlliI11i1Il1II(hidetextlIlIII1lI1IIll11ii1i1, 32) + 1) * 2 ^ (hidetextlIliIiiIlliI11i1Il1II(hidetextlIlIII1lI1IIll11ii1i1, 21, 31) - 1023) * ((hidetextlIliIiiIlliI11i1Il1II(hidetextlIlIII1lI1IIll11ii1i1, 1, 20) * 4294967296 + hidetextI1i11I1I111IIiII111) / 4503599627370496 + 1) end local function hidetextlIlll1ll11l1l1li1iIll(hidetextlIl1l1i1l1l11I1li111l) local hidetexti1iiilliIiliil1III1 = { hidetextiliiil1Il1lIIIlI1II(hidetextlIliIlII1III1iilIi11I, hidetextli11Iiii1iIII11IlI1, hidetextli11Iiii1iIII11IlI1 + 3) } hidetextli11Iiii1iIII11IlI1 = hidetextli11Iiii1iIII11IlI1 + 4 local hidetextiliiIll1l1l11Ii11I1 = { nil, nil, nil, nil, nil, nil, nil, nil } for hidetextIi1IiiIil1li11i1ili = 1, 8 do hidetextiliiIll1l1l11Ii11I1[hidetextIi1IiiIil1li11i1ili] = hidetextlIliIiiIlliI11i1Il1II(hidetextlIl1l1i1l1l11I1li111l, hidetextIi1IiiIil1li11i1ili) end local hidetextll1i1IiII1lIIlliIlI = "" for hidetextIi1IiiIil1li11i1ili = 1, 4 do local hidetextiIiiIl1liliIII1llIi, hidetextlIilll1IiIilII1l1Ii = 0, 0 for hidetextIlI1lI1I1ilIllI1llI = 1, 8 do local hidetextil11Ii1II1Illl1li1i = hidetextlIliIiiIlliI11i1Il1II(hidetexti1iiilliIiliil1III1[hidetextIi1IiiIil1li11i1ili], hidetextIlI1lI1I1ilIllI1llI) if hidetextiliiIll1l1l11Ii11I1[hidetextIlI1lI1I1ilIllI1llI] == 1 then hidetextil11Ii1II1Illl1li1i = hidetextil11Ii1II1Illl1li1i == 1 and 0 or 1 end hidetextiIiiIl1liliIII1llIi = hidetextiIiiIl1liliIII1llIi + 2 ^ hidetextlIilll1IiIilII1l1Ii * hidetextil11Ii1II1Illl1li1i hidetextlIilll1IiIilII1l1Ii = hidetextlIilll1IiIilII1l1Ii + 1 end hidetextll1i1IiII1lIIlliIlI = hidetextll1i1IiII1lIIlliIlI .. hidetextll1i1IiII1lIIlliIlI.char(hidetextiIiiIl1liliIII1llIi) end local hidetextI1i11I1I111IIiII111, hidetextlIlIII1lI1IIll11ii1i1, hidetextlIlli111IilllIIiiliIi, hidetextilIi1Iiill1IiiIiIlI = hidetextiliiil1Il1lIIIlI1II(hidetextll1i1IiII1lIIlliIlI, 1, 4) return hidetextilIi1Iiill1IiiIiIlI * 16777216 + hidetextlIlli111IilllIIiiliIi * 65536 + hidetextlIlIII1lI1IIll11ii1i1 * 256 + hidetextI1i11I1I111IIiII111 end local function hidetextIliiIIi111Iill1liI1(hidetextlIl1l1i1l1l11I1li111l) local hidetextlIl111iilll1iI1lliIIi = hidetextlIlllliIiliilll1llli1() hidetextli11Iiii1iIII11IlI1 = hidetextli11Iiii1iIII11IlI1 + hidetextlIl111iilll1iI1lliIIi local hidetextiliiIll1l1l11Ii11I1 = { nil, nil, nil, nil, nil, nil, nil, nil } for hidetextIi1IiiIil1li11i1ili = 1, 8 do hidetextiliiIll1l1l11Ii11I1[hidetextIi1IiiIil1li11i1ili] = hidetextlIliIiiIlliI11i1Il1II(hidetextlIl1l1i1l1l11I1li111l, hidetextIi1IiiIil1li11i1ili) end local hidetextll1i1IiII1lIIlliIlI = "" for hidetextIi1IiiIil1li11i1ili = 1, hidetextlIl111iilll1iI1lliIIi do local hidetextiIiiIl1liliIII1llIi, hidetextlIilll1IiIilII1l1Ii = 0, 0 for hidetextIlI1lI1I1ilIllI1llI = 1, 8 do local hidetextil11Ii1II1Illl1li1i = hidetextlIliIiiIlliI11i1Il1II(hidetextiliiil1Il1lIIIlI1II(hidetextlIliIlII1III1iilIi11I, hidetextli11Iiii1iIII11IlI1 - hidetextlIl111iilll1iI1lliIIi + hidetextIi1IiiIil1li11i1ili - 1), hidetextIlI1lI1I1ilIllI1llI) if hidetextiliiIll1l1l11Ii11I1[hidetextIlI1lI1I1ilIllI1llI] == 1 then hidetextil11Ii1II1Illl1li1i = hidetextil11Ii1II1Illl1li1i == 1 and 0 or 1 end hidetextiIiiIl1liliIII1llIi = hidetextiIiiIl1liliIII1llIi + 2 ^ hidetextlIilll1IiIilII1l1Ii * hidetextil11Ii1II1Illl1li1i hidetextlIilll1IiIilII1l1Ii = hidetextlIilll1IiIilII1l1Ii + 1 end hidetextll1i1IiII1lIIlliIlI = hidetextll1i1IiII1lIIlliIlI .. hidetextll1i1IiII1lIIlliIlI.char(hidetextiIiiIl1liliIII1llIi) end return hidetextll1i1IiII1lIIlliIlI end local hidetextIi1il1ilIlill1l11Il = hidetextii1I1IIIlii1l1l11II() local hidetextIIIIlI1ll1I1llii1li = hidetextii1I1IIIlii1l1l11II() local function hidetextlIlIll1lliIlil1i1Il1i() local hidetextlIl1ll1lIIilllilllIIl = { [19330] = {}, [124674] = {}, [5210] = {}, [24674] = {} } local hidetextlIll1llIlii1IiiiIII = #{6066} hidetextii1I1IIIlii1l1l11II() local hidetextilIil1Iill11l11lllI = hidetextlIlllliIiliilll1llli1() - (#{ 3560, 3369, 4702, 1406, 3617, 1264, 6843, 748, 6057, 6451, 5034, 1307, 6294, 3835, 591, 4190, 3540, 5411, 303, 5110 } + 133700) for hidetextIi1IiiIil1li11i1ili = hidetextlIll1llIlii1IiiiIII, hidetextilIil1Iill11l11lllI do local hidetextI1lII11iI1l1IlliIIi = {} local hidetextlIIilIl11II1lII1lIl = hidetextlIlll1ll11l1l1li1iIll(hidetextIIIIlI1ll1I1llii1li) hidetextI1lII11iI1l1IlliIIi[81899] = hidetextlIliIiiIlliI11i1Il1II(hidetextlIIilIl11II1lII1lIl, #{ 6664, 5053, 4722, 6626, 5437, 4499, 482, 2028, 470, 1465, 5863, 2720, 2662, 3652, 1506, 1521, 3419, 650, 3734 }, #{ 4454, 2568, 5764, 2223, 2404, 1716, 1799, 1905, 1247, 4857, 375, 2765, 650, 1981, 2283, 4150, 4928, 2343, 6924, 4180, 3864, 1370, 2257, 1066 } + 2) hidetextI1lII11iI1l1IlliIIi[59141] = hidetextlIliIiiIlliI11i1Il1II(hidetextlIIilIl11II1lII1lIl, #{1161}, #{ 2812, 940, 4914, 2163, 5245, 4571, 5346, 4261, 33, 3607, 1687, 1616, 1198, 4716, 334, 2080, 5346, 3766 }) hidetextI1lII11iI1l1IlliIIi[78045] = hidetextlIliIiiIlliI11i1Il1II(hidetextlIIilIl11II1lII1lIl, #{ 3996, 3252, 528, 444, 837, 6721, 3841, 2497, 1601, 2421, 4798, 5184, 128, 6666, 5271, 147, 5698, 524, 166, 918, 5048, 4401 } + 5, #{ 5269, 3208, 4841, 3264, 1083, 572, 6669, 6427, 5998, 1594, 1986, 4911, 1018, 5743, 2727, 474, 440, 2873, 2561, 5223, 4093 } + 11) hidetextI1lII11iI1l1IlliIIi[8634] = hidetextlIliIiiIlliI11i1Il1II(hidetextlIIilIl11II1lII1lIl, #{3004}, #{ 2406, 5046, 2364, 93, 3975, 5663, 6611, 2227, 3432 }) hidetextI1lII11iI1l1IlliIIi[122375] = hidetextlIliIiiIlliI11i1Il1II(hidetextlIIilIl11II1lII1lIl, #{ 6899, 5124, 740, 3039, 465, 3746, 3236, 3448, 627, 1483 }, #{ 5190, 2143, 4982, 6440, 2967, 3992, 6935, 6004, 6643, 1741, 1022, 10, 1028, 5957, 787, 3800, 283, 6424 }) hidetextI1lII11iI1l1IlliIIi[21872] = hidetextlIliIiiIlliI11i1Il1II(hidetextlIIilIl11II1lII1lIl, #{ 5915, 4472, 4939, 4705, 5990, 5646, 3366, 4279, 2758, 2893 }, #{ 2923, 4330, 1816, 4514, 5795, 5428, 4426, 548, 552, 1310, 1482, 1284, 5696, 3234, 5344, 199, 5767, 3897 }) hidetextlIl1ll1lIIilllilllIIl[19330][hidetextIi1IiiIil1li11i1ili] = hidetextI1lII11iI1l1IlliIIi end hidetextlIlllliIiliilll1llli1() hidetextlIlllliIiliilll1llli1() hidetextlIlllliIiliilll1llli1() hidetextlIl1ll1lIIilllilllIIl[27244] = hidetextii1I1IIIlii1l1l11II() local hidetextilIil1Iill11l11lllI = hidetextlIlllliIiliilll1llli1() for hidetextIi1IiiIil1li11i1ili = hidetextlIll1llIlii1IiiiIII, hidetextilIil1Iill11l11lllI do hidetextlIl1ll1lIIilllilllIIl[24674][hidetextIi1IiiIil1li11i1ili - hidetextlIll1llIlii1IiiiIII] = hidetextlIlIll1lliIlil1i1Il1i() end hidetextii1I1IIIlii1l1l11II() hidetextlIl1ll1lIIilllilllIIl[94002] = hidetextii1I1IIIlii1l1l11II() local hidetextilIil1Iill11l11lllI = hidetextlIlllliIiliilll1llli1() - (#{ 3402, 498, 6593, 4707, 4732, 4592, 2990, 4075, 3430, 5167, 4088, 4282, 6129, 6320, 4220, 6056, 2047, 5175, 1024, 2173 } + 133755) for hidetextIi1IiiIil1li11i1ili = hidetextlIll1llIlii1IiiiIII, hidetextilIil1Iill11l11lllI do local hidetextIIIii11IiiII1111I1I = {} local hidetexti1i1IIiIli11iiiiiiI = hidetextii1I1IIIlii1l1l11II() if hidetexti1i1IIiIli11iiiiiiI == #{ 4475, 3807, 1730, 6607, 2516, 5254, 1703, 183, 1500, 1398, 1765, 1432, 5597, 2197, 3281, 5158, 6879, 2585, 2703, 5371, 6603, 5214, 5023 } + 224 then hidetextIIIii11IiiII1111I1I[86044] = hidetextl1i1ilI1ll1lI1111l1() end if hidetexti1i1IIiIli11iiiiiiI == #{ 3182, 5073, 2074, 2960, 5885, 5687, 4163, 697, 6044, 2969, 63, 5394, 6599, 6770, 4110, 4116, 3875, 4535, 3738, 284, 1863, 6843 } + 197 then hidetextIIIii11IiiII1111I1I[86044] = hidetextIliiIIi111Iill1liI1(hidetextIi1il1ilIlill1l11Il) end if hidetexti1i1IIiIli11iiiiiiI == #{ 4922, 3396, 5202, 3021, 5611, 5062, 3084, 1866, 943, 6855, 1479, 3765, 4920, 21, 6726, 2893, 2040, 1632, 5610, 1138, 4814 } + 56 then hidetextIIIii11IiiII1111I1I[86044] = hidetextii1I1IIIlii1l1l11II() + hidetextlIlllliIiliilll1llli1() + hidetextl1i1ilI1ll1lI1111l1() end if hidetexti1i1IIiIli11iiiiiiI == #{ 783, 6048, 5643, 6114, 1869, 790, 3591, 925, 6359, 2929, 479, 4588, 904, 4606, 6418, 3181, 3987, 3627, 1230, 373, 6107 } + 187 then hidetextIIIii11IiiII1111I1I[86044] = hidetextIliiIIi111Iill1liI1(hidetextIi1il1ilIlill1l11Il) end if hidetexti1i1IIiIli11iiiiiiI == #{ 1615, 3562, 6416, 3547, 3088, 1623, 3376, 6456, 5845, 1547, 6467, 5908, 3526, 5728, 2255, 526, 1711, 4513, 4869, 5040 } + 26 then hidetextIIIii11IiiII1111I1I[86044] = hidetextl1i1ilI1ll1lI1111l1() + hidetextl1i1ilI1ll1lI1111l1() end if hidetexti1i1IIiIli11iiiiiiI == #{ 2472, 1211, 467, 1310, 489, 2363, 2551, 1962, 62, 6934, 6073, 166, 3638, 4276, 1598, 3663, 4535, 6612, 3416, 4164, 3836, 1670 } + 13 then hidetextIIIii11IiiII1111I1I[86044] = hidetextii1I1IIIlii1l1l11II() + hidetextlIlllliIiliilll1llli1() + hidetextl1i1ilI1ll1lI1111l1() end if hidetexti1i1IIiIli11iiiiiiI == #{ 4232, 1055, 257, 4249, 2832, 881, 4080, 1923, 6408, 5941, 5033, 3813, 2482, 1953, 5460, 6163, 33, 2338, 924, 4654, 1442, 1840 } + 176 then hidetextIIIii11IiiII1111I1I[86044] = hidetextIliiIIi111Iill1liI1(#{ 6393, 781, 5476, 1134, 939, 1930, 2564, 4129, 2816, 4770, 4916, 1319, 784, 6066, 54, 5353, 5690, 1058, 3895, 1032, 4739, 2302, 34, 4360 } + 96) end if hidetexti1i1IIiIli11iiiiiiI == #{ 6234, 1909, 1344, 3436, 6391, 6579, 2213, 4052, 6244, 371, 6477, 3499, 5760, 2331, 4871, 6725, 4971, 3144, 2140, 5745, 6781, 130, 452 } + 49 then hidetextIIIii11IiiII1111I1I[86044] = #{ 704, 1717, 4498, 1251, 4577, 6757, 5866, 1443, 780, 4455, 4912, 4208, 1863, 2505, 5505, 1687, 33, 1279, 6378, 761, 5715, 975 } + 43900 == #{ 704, 1717, 4498, 1251, 4577, 6757, 5866, 1443, 780, 4455, 4912, 4208, 1863, 2505, 5505, 1687, 33, 1279, 6378, 761, 5715, 975 } + 43900 end if hidetexti1i1IIiIli11iiiiiiI == #{ 6100, 2083, 6589, 3511, 5389, 288, 1452, 3217, 1993, 2487, 2255, 2420, 5585, 73, 4483, 2032, 6655, 91, 6619, 2152, 713, 4317 } + 43 then hidetextIIIii11IiiII1111I1I[86044] = #{ 3954, 5841, 4852, 1892, 5194, 5290, 1066, 5076, 3098, 1736, 702, 6454, 2346, 3462, 2374, 2112, 2921, 6656, 2631, 4629 } + 48330 == #{ 4602, 1892, 1927, 3535, 6158, 5204, 5108, 297, 1192, 6023, 5778, 3041, 1858, 6756, 951, 3794, 2253, 1524, 4896, 4424, 5033, 6085, 6559 } + 92619 end hidetextlIl1ll1lIIilllilllIIl[124674][hidetextIi1IiiIil1li11i1ili - hidetextlIll1llIlii1IiiiIII] = hidetextIIIii11IiiII1111I1I end hidetextii1I1IIIlii1l1l11II() hidetextlIlllliIiliilll1llli1() local hidetextilIil1Iill11l11lllI = hidetextlIlllliIiliilll1llli1() for hidetextIi1IiiIil1li11i1ili = hidetextlIll1llIlii1IiiiIII, hidetextilIil1Iill11l11lllI do hidetextlIl1ll1lIIilllilllIIl[5210][hidetextIi1IiiIil1li11i1ili] = hidetextlIlllliIiliilll1llli1() end hidetextii1I1IIIlii1l1l11II() hidetextii1I1IIIlii1l1l11II() hidetextii1I1IIIlii1l1l11II() hidetextlIl1ll1lIIilllilllIIl[30481] = hidetextii1I1IIIlii1l1l11II() hidetextlIlllliIiliilll1llli1() hidetextlIlllliIiliilll1llli1() hidetextlIlllliIiliilll1llli1() hidetextii1I1IIIlii1l1l11II() return hidetextlIl1ll1lIIilllilllIIl end local function hidetextiiIII1IIl1Il1iII1ll(hidetextlIl1ll1lIIilllilllIIl, hidetextlIllIl1ll1I1IIiI11lI1, hidetextIli1I1i11iIi1i11iI1) local hidetextlIliIlllI1i1Il11lIIl1, hidetexti11iiI1il11Ill1l1il = 13, 21 local hidetextIilII11liII1I1I1Iil = hidetextlIl1ll1lIIilllilllIIl[19330] local hidetextlIl1illIlIIIl1iIl11i1 = hidetextlIli1ll1IIllIilII1liI({}, { __index = function(hidetextlIlI1II11Ii11Il1I1Iii, hidetextillIl1iIlIllII1l1i1) local hidetextll1i1IiII1lIIlliIlI = hidetextlIl1ll1lIIilllilllIIl[124674][hidetextillIl1iIlIllII1l1i1] if hidetextil11IIIlliiiiill11i(hidetexti1i1IIiIli11iiiiiiI(hidetextll1i1IiII1lIIlliIlI[86044]), 1, 1) == "s" then return { [86044] = hidetextil11IIIlliiiiill11i(hidetextll1i1IiII1lIIlliIlI[86044], 5) } end return hidetextll1i1IiII1lIIlliIlI end }) local hidetextlIll1l1ill1Il1i1IIIii = 30481 local hidetextlIl11iIilil1I111ilil1 = hidetextlIl1ll1lIIilllilllIIl[24674] local hidetextlIlIiil11l1iI1IiilIIi = 86044 local hidetextii11lillli111lI11II = hidetextlIl1ll1lIIilllilllIIl[27244] local hidetextI1Iili1ilIIIliilI1i = 78045 local hidetextlIlllIli1iIliIi1li1il = hidetextlIl1ll1lIIilllilllIIl[5210] local hidetextl1l11I111llIil1i11I = 8634 local function hidetextlIlIil1i11lIIllliI1li(...) local hidetextlIllIIl1i1Ii1liiliIII = 0 local hidetextlIlI1iiiii1iIIiliIil1 = { hidetextii1II1Iiil1IIiii111({}, 1, hidetextlIl1ll1lIIilllilllIIl[94002]) } local hidetextll1Iilii1ilIll1II1l = 1 local hidetextI1I1Ill1iIl1IIliiIi = {} local hidetextlIii11llII1iIIIlIiI = {} local hidetextlIliiiIIlIiI1llllIlIi = 1 local hidetextlIllIl1ll1I1IIiI11lI1 = hidetextIl111i11IIIlllIllI1() local hidetextilII1l11lllil1Il1l1 = { ... } local hidetextllIIiil11iI1IIiII1l = {} local hidetextiiiilliiiI1lillIIlI = #hidetextilII1l11lllil1Il1l1 - 1 for hidetextIi1IiiIil1li11i1ili = 0, hidetextiiiilliiiI1lillIIlI do if hidetextii11lillli111lI11II >= hidetextIi1IiiIil1li11i1ili + 1 then hidetextlIlI1iiiii1iIIiliIil1[hidetextIi1IiiIil1li11i1ili] = hidetextilII1l11lllil1Il1l1[hidetextIi1IiiIil1li11i1ili + 1] end hidetextllIIiil11iI1IIiII1l[hidetextIi1IiiIil1li11i1ili] = hidetextilII1l11lllil1Il1l1[hidetextIi1IiiIil1li11i1ili + 1] end local function hidetextI111l1l1lli1iiiilIi(...) local hidetextlIlli111IilllIIiiliIi = hidetextI111iIlli1l1iIlIIII("#", ...) local hidetextlIlI1II11Ii11Il1I1Iii = { ... } return hidetextlIlli111IilllIIiiliIi, hidetextlIlI1II11Ii11Il1I1Iii end local hidetextlIllliliili1ilIIl1I = #{ 1599, 1568, 6919, 4763, 5517, 1168, 3526, 3311, 137, 1962, 2593, 3466, 2253, 127, 5404, 1755, 4835, 3835, 6116, 4792, 4681, 992, 6818, 3965 } + 131047 local hidetextlIlI1ili111iiI1l1i11l local hidetextIll11llIiIi11I1IIIl = { function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I) local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I if hidetextlII1IillIIliilliiII > 255 then hidetextlII1IillIIliilliiII = hidetextlIl1illIlIIIl1iIl11i1[hidetextlII1IillIIliilliiII - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextlII1IillIIliilliiII = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end if hidetextIIlili1l1iilIl1i11I > 255 then hidetextIIlili1l1iilIl1i11I = hidetextlIl1illIlIIIl1iIl11i1[hidetextIIlili1l1iilIl1i11I - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextIIlili1l1iilIl1i11I = hidetextlIlI1iiiii1iIIiliIil1[hidetextIIlili1l1iilIl1i11I] end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlII1IillIIliilliiII ^ hidetextIIlili1l1iilIl1i11I end, nil, nil, function(hidetextiI11l1iIili11ilill1) local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I if hidetextlII1IillIIliilliiII > 255 then hidetextlII1IillIIliilliiII = hidetextlIl1illIlIIIl1iIl11i1[hidetextlII1IillIIliilliiII - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextlII1IillIIliilliiII = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end if hidetextIIlili1l1iilIl1i11I > 255 then hidetextIIlili1l1iilIl1i11I = hidetextlIl1illIlIIIl1iIl11i1[hidetextIIlili1l1iilIl1i11I - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextIIlili1l1iilIl1i11I = hidetextlIlI1iiiii1iIIiliIil1[hidetextIIlili1l1iilIl1i11I] end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI][hidetextlII1IillIIliilliiII] = hidetextIIlili1l1iilIl1i11I end, function(hidetextiI11l1iIili11ilill1) local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] hidetextlIll1l111IlIIiii1iI = hidetextlIll1l111IlIIiii1iI ~= 0 if hidetextlII1IillIIliilliiII > 255 then hidetextlII1IillIIliilliiII = hidetextlIl1illIlIIIl1iIl11i1[hidetextlII1IillIIliilliiII - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextlII1IillIIliilliiII = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end if hidetextIIlili1l1iilIl1i11I > 255 then hidetextIIlili1l1iilIl1i11I = hidetextlIl1illIlIIIl1iIl11i1[hidetextIIlili1l1iilIl1i11I - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextIIlili1l1iilIl1i11I = hidetextlIlI1iiiii1iIIiliIil1[hidetextIIlili1l1iilIl1i11I] end if hidetextlII1IillIIliilliiII == hidetextIIlili1l1iilIl1i11I ~= hidetextlIll1l111IlIIiii1iI then hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + 1 end end, nil, nil, nil, function(hidetextiI11l1iIili11ilill1) local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] if hidetextlII1IillIIliilliiII > 255 then hidetextlII1IillIIliilliiII = hidetextlIl1illIlIIIl1iIl11i1[hidetextlII1IillIIliilliiII - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextlII1IillIIliilliiII = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end if hidetextIIlili1l1iilIl1i11I > 255 then hidetextIIlili1l1iilIl1i11I = hidetextlIl1illIlIIIl1iIl11i1[hidetextIIlili1l1iilIl1i11I - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextIIlili1l1iilIl1i11I = hidetextlIlI1iiiii1iIIiliIil1[hidetextIIlili1l1iilIl1i11I] end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlII1IillIIliilliiII / hidetextIIlili1l1iilIl1i11I end, nil, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I) local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlIl1iIllIili1i1lIi1lI = (hidetextIIlili1l1iilIl1i11I - 1) * 50 if hidetextlII1IillIIliilliiII == 0 then hidetextlII1IillIIliilliiII = hidetextlIllIIl1i1Ii1liiliIII - hidetextlIll1l111IlIIiii1iI end for hidetextIi1IiiIil1li11i1ili = 1, hidetextlII1IillIIliilliiII do hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI][hidetextlIl1iIllIili1i1lIi1lI + hidetextIi1IiiIil1li11i1ili] = hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + hidetextIi1IiiIil1li11i1ili] end end, nil, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI) local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] if not not hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] == (hidetextIIlili1l1iilIl1i11I == 0) then hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + 1 else hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end end, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il, hidetextlIll111i1IilIlI11iI1i) local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextliIIiIIIIi1lIi1iIIi = hidetextlIl11iIilil1I111ilil1[hidetextlIl1i1i1i1I1illIll1il] local hidetextlIIiil11I1iIl1ii1I1 = {} local hidetextII1liiiii11lllIIlIl = hidetextlIli1ll1IIllIilII1liI({}, { __index = function(hidetextlIlI1II11Ii11Il1I1Iii, hidetextillIl1iIlIllII1l1i1) local hidetexti1i1il1il1iil1l1i11 = hidetextlIIiil11I1iIl1ii1I1[hidetextillIl1iIlIllII1l1i1] return hidetexti1i1il1il1iil1l1i11[1][hidetexti1i1il1il1iil1l1i11[2]] end, __newindex = function(hidetextlIlI1II11Ii11Il1I1Iii, hidetextillIl1iIlIllII1l1i1, hidetextIIllllli1i1IIiiiI1l) local hidetexti1i1il1il1iil1l1i11 = hidetextlIIiil11I1iIl1ii1I1[hidetextillIl1iIlIllII1l1i1] hidetexti1i1il1il1iil1l1i11[1][hidetexti1i1il1il1iil1l1i11[2]] = hidetextIIllllli1i1IIiiiI1l end }) for hidetextIi1IiiIil1li11i1ili = 1, hidetextliIIiIIIIi1lIi1iIIi[hidetextlIll1l1ill1Il1i1IIIii] do local hidetextlIlllI1II1IiI1ill1I11 = hidetextIilII11liII1I1I1Iil[hidetextll1Iilii1ilIll1II1l] if hidetextlIlllI1II1IiI1ill1I11[hidetextI1Iili1ilIIIliilI1i] == hidetextlIliIlllI1i1Il11lIIl1 then hidetextlIIiil11I1iIl1ii1I1[hidetextIi1IiiIil1li11i1ili - 1] = { hidetextlIlI1iiiii1iIIiliIil1, hidetextlIlllI1II1IiI1ill1I11[hidetextl1l11I111llIil1i11I] } elseif hidetextlIlllI1II1IiI1ill1I11[hidetextI1Iili1ilIIIliilI1i] == hidetexti11iiI1il11Ill1l1il then hidetextlIIiil11I1iIl1ii1I1[hidetextIi1IiiIil1li11i1ili - 1] = { hidetextIli1I1i11iIi1i11iI1, hidetextlIlllI1II1IiI1ill1I11[hidetextl1l11I111llIil1i11I] } end hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + 1 end if hidetextliIIiIIIIi1lIi1iIIi[hidetextlIll1l1ill1Il1i1IIIii] > 0 then hidetextI1I1Ill1iIl1IIliiIi[#hidetextI1I1Ill1iIl1IIliiIi + 1] = hidetextlIIiil11I1iIl1ii1I1 end local hidetextiI11lliiI1l1Ii111il = hidetextiiIII1IIl1Il1iII1ll(hidetextliIIiIIIIi1lIi1iIIi, hidetextlIllIl1ll1I1IIiI11lI1, hidetextII1liiiii11lllIIlIl) hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextiI11lliiI1l1Ii111il end, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI) local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] if hidetextIIlili1l1iilIl1i11I > 255 then hidetextIIlili1l1iilIl1i11I = hidetextlIl1illIlIIIl1iIl11i1[hidetextIIlili1l1iilIl1i11I - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextIIlili1l1iilIl1i11I = hidetextlIlI1iiiii1iIIiliIil1[hidetextIIlili1l1iilIl1i11I] end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII][hidetextIIlili1l1iilIl1i11I] end, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI) local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] if hidetextlII1IillIIliilliiII > 255 then hidetextlII1IillIIliilliiII = hidetextlIl1illIlIIIl1iIl11i1[hidetextlII1IillIIliilliiII - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextlII1IillIIliilliiII = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end if hidetextIIlili1l1iilIl1i11I > 255 then hidetextIIlili1l1iilIl1i11I = hidetextlIl1illIlIIIl1iIl11i1[hidetextIIlili1l1iilIl1i11I - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextIIlili1l1iilIl1i11I = hidetextlIlI1iiiii1iIIiliIil1[hidetextIIlili1l1iilIl1i11I] end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlII1IillIIliilliiII * hidetextIIlili1l1iilIl1i11I end, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il) local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I for hidetextIi1IiiIil1li11i1ili = hidetextlIll1l111IlIIiii1iI, hidetextlII1IillIIliilliiII do hidetextlIlI1iiiii1iIIiliIil1[hidetextIi1IiiIil1li11i1ili] = nil end end, nil, nil, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I) local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = { hidetextii1II1Iiil1IIiii111({}, 1, hidetextlII1IillIIliilliiII > 7999 and 7999 or hidetextlII1IillIIliilliiII) } end, nil, function(hidetextiI11l1iIili11ilill1) local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I hidetextlIll1l111IlIIiii1iI = hidetextlIll1l111IlIIiii1iI ~= 0 if hidetextlII1IillIIliilliiII > 255 then hidetextlII1IillIIliilliiII = hidetextlIl1illIlIIIl1iIl11i1[hidetextlII1IillIIliilliiII - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextlII1IillIIliilliiII = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end if hidetextIIlili1l1iilIl1i11I > 255 then hidetextIIlili1l1iilIl1i11I = hidetextlIl1illIlIIIl1iIl11i1[hidetextIIlili1l1iilIl1i11I - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextIIlili1l1iilIl1i11I = hidetextlIlI1iiiii1iIIiliIil1[hidetextIIlili1l1iilIl1i11I] end if hidetextlII1IillIIliilliiII < hidetextIIlili1l1iilIl1i11I ~= hidetextlIll1l111IlIIiii1iI then hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + 1 end end, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il) local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] if hidetextlII1IillIIliilliiII > 255 then hidetextlII1IillIIliilliiII = hidetextlIl1illIlIIIl1iIl11i1[hidetextlII1IillIIliilliiII - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextlII1IillIIliilliiII = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end if hidetextIIlili1l1iilIl1i11I > 255 then hidetextIIlili1l1iilIl1i11I = hidetextlIl1illIlIIIl1iIl11i1[hidetextIIlili1l1iilIl1i11I - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextIIlili1l1iilIl1i11I = hidetextlIlI1iiiii1iIIiliIil1[hidetextIIlili1l1iilIl1i11I] end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlII1IillIIliilliiII - hidetextIIlili1l1iilIl1i11I end, nil, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il, hidetextlIll111i1IilIlI11iI1i) local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextilII1l11lllil1Il1l1, hidetextlIllIII1li11l11l1i1iI, hidetextlIIIl1II1Ili1iIli1l, hidetextlIlllilll1i1liiil11I1 hidetextilII1l11lllil1Il1l1 = {} if hidetextlII1IillIIliilliiII ~= 1 then if hidetextlII1IillIIliilliiII ~= 0 then hidetextlIIIl1II1Ili1iIli1l = hidetextlIll1l111IlIIiii1iI + hidetextlII1IillIIliilliiII - 1 else hidetextlIIIl1II1Ili1iIli1l = hidetextlIllIIl1i1Ii1liiliIII end hidetextlIlllilll1i1liiil11I1 = 0 for hidetextIi1IiiIil1li11i1ili = hidetextlIll1l111IlIIiii1iI + 1, hidetextlIIIl1II1Ili1iIli1l do hidetextlIlllilll1i1liiil11I1 = hidetextlIlllilll1i1liiil11I1 + 1 hidetextilII1l11lllil1Il1l1[hidetextlIlllilll1i1liiil11I1] = hidetextlIlI1iiiii1iIIiliIil1[hidetextIi1IiiIil1li11i1ili] end hidetextlIIIl1II1Ili1iIli1l, hidetextlIllIII1li11l11l1i1iI = hidetextI111l1l1lli1iiiilIi(hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI](hidetextii1II1Iiil1IIiii111(hidetextilII1l11lllil1Il1l1, 1, hidetextlIIIl1II1Ili1iIli1l - hidetextlIll1l111IlIIiii1iI))) else hidetextlIIIl1II1Ili1iIli1l, hidetextlIllIII1li11l11l1i1iI = hidetextI111l1l1lli1iiiilIi(hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI]()) end if hidetextIIlili1l1iilIl1i11I ~= 1 then if hidetextIIlili1l1iilIl1i11I ~= 0 then hidetextlIIIl1II1Ili1iIli1l = hidetextlIll1l111IlIIiii1iI + hidetextIIlili1l1iilIl1i11I - 2 else hidetextlIIIl1II1Ili1iIli1l = hidetextlIIIl1II1Ili1iIli1l + hidetextlIll1l111IlIIiii1iI end hidetextlIlllilll1i1liiil11I1 = 0 for hidetextIi1IiiIil1li11i1ili = hidetextlIll1l111IlIIiii1iI, hidetextlIIIl1II1Ili1iIli1l do hidetextlIlllilll1i1liiil11I1 = hidetextlIlllilll1i1liiil11I1 + 1 hidetextlIlI1iiiii1iIIiliIil1[hidetextIi1IiiIil1li11i1ili] = hidetextlIllIII1li11l11l1i1iI[hidetextlIlllilll1i1liiil11I1] end end hidetextlIllIIl1i1Ii1liiliIII = hidetextlIIIl1II1Ili1iIli1l - 1 end, nil, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I) local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] hidetextlII1IillIIliilliiII = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] if hidetextIIlili1l1iilIl1i11I > 255 then hidetextIIlili1l1iilIl1i11I = hidetextlIl1illIlIIIl1iIl11i1[hidetextIIlili1l1iilIl1i11I - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextIIlili1l1iilIl1i11I = hidetextlIlI1iiiii1iIIiliIil1[hidetextIIlili1l1iilIl1i11I] end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 1] = hidetextlII1IillIIliilliiII hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlII1IillIIliilliiII[hidetextIIlili1l1iilIl1i11I] end, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il) local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] if hidetextlII1IillIIliilliiII > 255 then hidetextlII1IillIIliilliiII = hidetextlIl1illIlIIIl1iIl11i1[hidetextlII1IillIIliilliiII - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextlII1IillIIliilliiII = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end if hidetextIIlili1l1iilIl1i11I > 255 then hidetextIIlili1l1iilIl1i11I = hidetextlIl1illIlIIIl1iIl11i1[hidetextIIlili1l1iilIl1i11I - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextIIlili1l1iilIl1i11I = hidetextlIlI1iiiii1iIIiliIil1[hidetextIIlili1l1iilIl1i11I] end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlII1IillIIliilliiII % hidetextIIlili1l1iilIl1i11I end, nil, nil, nil, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I) local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextl11111iIII1I1Iiii1i = hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 2] local hidetextli11Iiii1iIII11IlI1 = hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] + hidetextl11111iIII1I1Iiii1i hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextli11Iiii1iIII11IlI1 if hidetextl11111iIII1I1Iiii1i > 0 then if hidetextli11Iiii1iIII11IlI1 <= hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 1] then hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + hidetextI11iIllI1iiIi11llll hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 3] = hidetextli11Iiii1iIII11IlI1 end elseif hidetextli11Iiii1iIII11IlI1 >= hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 1] then hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + hidetextI11iIllI1iiIi11llll hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 3] = hidetextli11Iiii1iIII11IlI1 end end, nil, nil, function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I) local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextilII1l11lllil1Il1l1, hidetextlIllIII1li11l11l1i1iI, hidetextlIIIl1II1Ili1iIli1l, hidetextlIlllilll1i1liiil11I1 hidetextilII1l11lllil1Il1l1 = {} hidetextlIlllilll1i1liiil11I1 = 0 if hidetextlII1IillIIliilliiII ~= 1 then if hidetextlII1IillIIliilliiII ~= 0 then hidetextlIIIl1II1Ili1iIli1l = hidetextlIll1l111IlIIiii1iI + hidetextlII1IillIIliilliiII - 1 else hidetextlIIIl1II1Ili1iIli1l = hidetextlIllIIl1i1Ii1liiliIII end for hidetextIi1IiiIil1li11i1ili = hidetextlIll1l111IlIIiii1iI + 1, hidetextlIIIl1II1Ili1iIli1l do hidetextlIlllilll1i1liiil11I1 = hidetextlIlllilll1i1liiil11I1 + 1 hidetextilII1l11lllil1Il1l1[hidetextlIlllilll1i1liiil11I1] = hidetextlIlI1iiiii1iIIiliIil1[hidetextIi1IiiIil1li11i1ili] end hidetextlIIIl1II1Ili1iIli1l, hidetextlIllIII1li11l11l1i1iI = hidetextI111l1l1lli1iiiilIi(hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI](hidetextii1II1Iiil1IIiii111(hidetextilII1l11lllil1Il1l1, 1, hidetextlIIIl1II1Ili1iIli1l - hidetextlIll1l111IlIIiii1iI))) else hidetextlIIIl1II1Ili1iIli1l, hidetextlIllIII1li11l11l1i1iI = hidetextI111l1l1lli1iiiilIi(hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI]()) end return true, hidetextlIllIII1li11l11l1i1iI, hidetextlIIIl1II1Ili1iIli1l end, nil, nil } hidetextIll11llIiIi11I1IIIl[31] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il) local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIl1l1i1l1l11I1li111l if hidetextlIl1i1i1i1I1illIll1il == 100000 then hidetextlIl1l1i1l1l11I1li111l = hidetextlIlI1iiiii1iIIiliIil1[251] else hidetextlIl1l1i1l1l11I1li111l = hidetextlIl1illIlIIIl1iIl11i1[hidetextlIl1i1i1i1I1illIll1il][hidetextlIlIiil11l1iI1IiilIIi] end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlIllIl1ll1I1IIiI11lI1[hidetextlIl1l1i1l1l11I1li111l] end hidetextIll11llIiIi11I1IIIl[7] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il, hidetextlIll111i1IilIlI11iI1i, hidetextlIIi1lliI111i1liIil) local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] if hidetextIIlili1l1iilIl1i11I == 253 then return hidetextlIlI1ili111iiI1l1i11l[37]({ [81899] = (hidetextlIll1l111IlIIiii1iI - 164) % 256, [8634] = (hidetextlII1IillIIliilliiII - 164) % 256, [59141] = 0 }) end if hidetextIIlili1l1iilIl1i11I == 82 then return hidetextlIlI1ili111iiI1l1i11l[19]({ [81899] = (hidetextlIll1l111IlIIiii1iI - 5) % 256, [8634] = (hidetextlII1IillIIliilliiII - 5) % 256, [59141] = 0 }) end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = -hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end hidetextIll11llIiIi11I1IIIl[26] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il) local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlI1liliiIi1ililI11l = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] for hidetextIi1IiiIil1li11i1ili = hidetextlII1IillIIliilliiII + 1, hidetextIIlili1l1iilIl1i11I do hidetextlI1liliiIi1ililI11l = hidetextlI1liliiIi1ililI11l .. hidetextlIlI1iiiii1iIIiliIil1[hidetextIi1IiiIil1li11i1ili] end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlI1liliiIi1ililI11l end hidetextIll11llIiIi11I1IIIl[2] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il) local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] if hidetextIIlili1l1iilIl1i11I == 86 then return hidetextlIlI1ili111iiI1l1i11l[35]({ [81899] = (hidetextlIll1l111IlIIiii1iI - 197) % 256, [8634] = (hidetextlII1IillIIliilliiII - 197) % 256, [59141] = 0 }) end for hidetextIi1IiiIil1li11i1ili = hidetextlIll1l111IlIIiii1iI, #hidetextlIlI1iiiii1iIIiliIil1 do local hidetexti1Iill1lIIlII1i1ll1 = hidetextlIliiiIIlIiI1llllIlIi for hidetextlIlIIi1IiI11IIIi1I1i1, hidetextIllilIiilIlIlIi1ll1 in next, hidetextI1I1Ill1iIl1IIliiIi, nil do for hidetextlIl1l1i1l1l11I1li111l, hidetexti1i1il1il1iil1l1i11 in next, hidetextIllilIiilIlIlIi1ll1, nil do if hidetextlIlI1iiiii1iIIiliIil1 == hidetexti1i1il1il1iil1l1i11[1] and hidetexti1i1il1il1iil1l1i11[2] == hidetextIi1IiiIil1li11i1ili then if not hidetextlIii11llII1iIIIlIiI[hidetexti1Iill1lIIlII1i1ll1] then hidetextlIii11llII1iIIIlIiI[hidetexti1Iill1lIIlII1i1ll1] = hidetextlIlI1iiiii1iIIiliIil1[hidetextIi1IiiIil1li11i1ili] hidetextlIliiiIIlIiI1llllIlIi = hidetextlIliiiIIlIiI1llllIlIi + 1 end hidetextIllilIiilIlIlIi1ll1[hidetextlIl1l1i1l1l11I1li111l] = {hidetextlIii11llII1iIIIlIiI, hidetexti1Iill1lIIlII1i1ll1} end end end end end hidetextIll11llIiIi11I1IIIl[6] = function(hidetextiI11l1iIili11ilill1) local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + hidetextI11iIllI1iiIi11llll end hidetextIll11llIiIi11I1IIIl[0] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI) local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] hidetextIli1I1i11iIi1i11iI1[hidetextlII1IillIIliilliiII] = hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] end hidetextIll11llIiIi11I1IIIl[37] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I) local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlIl1illIlIIIl1iIl11i1[hidetextlIl1i1i1i1I1illIll1il][hidetextlIlIiil11l1iI1IiilIIi] end hidetextIll11llIiIi11I1IIIl[3] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI) local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1l1i1l1l11I1li111l if hidetextlIl1i1i1i1I1illIll1il == 100000 then hidetextlIl1l1i1l1l11I1li111l = hidetextlIlI1iiiii1iIIiliIil1[251] else hidetextlIl1l1i1l1l11I1li111l = hidetextlIl1illIlIIIl1iIl11i1[hidetextlIl1i1i1i1I1illIll1il][hidetextlIlIiil11l1iI1IiilIIi] end hidetextlIllIl1ll1I1IIiI11lI1[hidetextlIl1l1i1l1l11I1li111l] = hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] end hidetextIll11llIiIi11I1IIIl[10] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il) local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] if hidetextIIlili1l1iilIl1i11I == 142 then return hidetextlIlI1ili111iiI1l1i11l[22]({ [81899] = (hidetextlIll1l111IlIIiii1iI - 186) % 256, [8634] = (hidetextlII1IillIIliilliiII - 186) % 256, [59141] = 0 }) end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end hidetextIll11llIiIi11I1IIIl[34] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il, hidetextlIll111i1IilIlI11iI1i) local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] if hidetextlII1IillIIliilliiII > 255 then hidetextlII1IillIIliilliiII = hidetextlIl1illIlIIIl1iIl11i1[hidetextlII1IillIIliilliiII - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextlII1IillIIliilliiII = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end if hidetextIIlili1l1iilIl1i11I > 255 then hidetextIIlili1l1iilIl1i11I = hidetextlIl1illIlIIIl1iIl11i1[hidetextIIlili1l1iilIl1i11I - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextIIlili1l1iilIl1i11I = hidetextlIlI1iiiii1iIIiliIil1[hidetextIIlili1l1iilIl1i11I] end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlII1IillIIliilliiII + hidetextIIlili1l1iilIl1i11I end hidetextIll11llIiIi11I1IIIl[30] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I) local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I if hidetextIIlili1l1iilIl1i11I == 244 then return hidetextlIlI1ili111iiI1l1i11l[14]({ [81899] = (hidetextlIll1l111IlIIiii1iI - 211) % 256, [8634] = (hidetextlII1IillIIliilliiII - 211) % 256, [59141] = 0 }) end if hidetextIIlili1l1iilIl1i11I == 92 then return hidetextlIlI1ili111iiI1l1i11l[28]({ [81899] = (hidetextlIll1l111IlIIiii1iI - 15) % 256, [122375] = (hidetextlII1IillIIliilliiII - 15) % 256, [59141] = 0 }) end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = #hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end hidetextIll11llIiIi11I1IIIl[18] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI) local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlIIIl1II1Ili1iIli1l, hidetextlIlllilll1i1liiil11I1, hidetextiIll1iiIIiIiIiI1lli if hidetextlII1IillIIliilliiII == 1 then return true end if hidetextlII1IillIIliilliiII == 0 then hidetextlIIIl1II1Ili1iIli1l = hidetextlIllIIl1i1Ii1liiliIII else hidetextlIIIl1II1Ili1iIli1l = hidetextlIll1l111IlIIiii1iI + hidetextlII1IillIIliilliiII - 2 end hidetextiIll1iiIIiIiIiI1lli = {} hidetextlIlllilll1i1liiil11I1 = 0 for hidetextIi1IiiIil1li11i1ili = hidetextlIll1l111IlIIiii1iI, hidetextlIIIl1II1Ili1iIli1l do hidetextlIlllilll1i1liiil11I1 = hidetextlIlllilll1i1liiil11I1 + 1 hidetextiIll1iiIIiIiIiI1lli[hidetextlIlllilll1i1liiil11I1] = hidetextlIlI1iiiii1iIIiliIil1[hidetextIi1IiiIil1li11i1ili] end return true, hidetextiIll1iiIIiIiIiI1lli, hidetextlIlllilll1i1liiil11I1 end hidetextIll11llIiIi11I1IIIl[36] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il, hidetextlIll111i1IilIlI11iI1i) local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlIl1iIllIili1i1lIi1lI = hidetextlIll1l111IlIIiii1iI + 2 local hidetextlI1liliiIi1ililI11l = { hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI](hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 1], hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 2]) } for hidetextIi1IiiIil1li11i1ili = 1, hidetextIIlili1l1iilIl1i11I do hidetextlIlI1iiiii1iIIiliIil1[hidetextlIl1iIllIili1i1lIi1lI + hidetextIi1IiiIil1li11i1ili] = hidetextlI1liliiIi1ililI11l[hidetextIi1IiiIil1li11i1ili] end if hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 3] ~= nil then hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 2] = hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 3] else hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + 1 end end hidetextIll11llIiIi11I1IIIl[21] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI) local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] if hidetextIIlili1l1iilIl1i11I == 138 then return hidetextlIlI1ili111iiI1l1i11l[15]({ [81899] = (hidetextlIll1l111IlIIiii1iI - 159) % 256, [8634] = (hidetextlII1IillIIliilliiII - 159) % 256, [59141] = 0 }) end hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextIli1I1i11iIi1i11iI1[hidetextlII1IillIIliilliiII] end hidetextIll11llIiIi11I1IIIl[12] = function(hidetextiI11l1iIili11ilill1) local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlII1IillIIliilliiII ~= 0 if hidetextIIlili1l1iilIl1i11I ~= 0 then hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + 1 end end hidetextIll11llIiIi11I1IIIl[19] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il) local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = not hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end hidetextIll11llIiIi11I1IIIl[8] = function(hidetextiI11l1iIili11ilill1) local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] hidetextlIll1l111IlIIiii1iI = hidetextlIll1l111IlIIiii1iI ~= 0 if hidetextlII1IillIIliilliiII > 255 then hidetextlII1IillIIliilliiII = hidetextlIl1illIlIIIl1iIl11i1[hidetextlII1IillIIliilliiII - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextlII1IillIIliilliiII = hidetextlIlI1iiiii1iIIiliIil1[hidetextlII1IillIIliilliiII] end if hidetextIIlili1l1iilIl1i11I > 255 then hidetextIIlili1l1iilIl1i11I = hidetextlIl1illIlIIIl1iIl11i1[hidetextIIlili1l1iilIl1i11I - 256][hidetextlIlIiil11l1iI1IiilIIi] else hidetextIIlili1l1iilIl1i11I = hidetextlIlI1iiiii1iIIiliIil1[hidetextIIlili1l1iilIl1i11I] end if hidetextlII1IillIIliilliiII <= hidetextIIlili1l1iilIl1i11I ~= hidetextlIll1l111IlIIiii1iI then hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + 1 end end hidetextIll11llIiIi11I1IIIl[24] = function(hidetextiI11l1iIili11ilill1) local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlIlll1ii1il11lliIliII(hidetextlIl1II11illl1I1ili111(hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI]), "`for` initial value must be a number") hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 1] = hidetextlIlll1ii1il11lliIliII(hidetextlIl1II11illl1I1ili111(hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 1]), "`for` limit value must be a number") hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 2] = hidetextlIlll1ii1il11lliIliII(hidetextlIl1II11illl1I1ili111(hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 2]), "`for` step value must be a number") hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] = hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] - hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI + 2] hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + hidetextI11iIllI1iiIi11llll end hidetextIll11llIiIi11I1IIIl[33] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il) local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] if not not hidetextlIlI1iiiii1iIIiliIil1[hidetextlIll1l111IlIIiii1iI] == (hidetextIIlili1l1iilIl1i11I == 0) then hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + 1 end end hidetextIll11llIiIi11I1IIIl[29] = function(hidetextiI11l1iIili11ilill1, hidetextiil1I1iI1iliii1IilI, hidetextl1lIlIiiI1IIliil11I, hidetextl1iI1lIli1llllii1Il) local hidetextI11iIllI1iiIi11llll = hidetextiI11l1iIili11ilill1[59141] - hidetextlIllliliili1ilIIl1I local hidetextIIlili1l1iilIl1i11I = hidetextiI11l1iIili11ilill1[122375] local hidetextlIl1i1i1i1I1illIll1il = hidetextiI11l1iIili11ilill1[59141] local hidetextlIll1l111IlIIiii1iI = hidetextiI11l1iIili11ilill1[81899] local hidetextlII1IillIIliilliiII = hidetextiI11l1iIili11ilill1[8634] if hidetextIIlili1l1iilIl1i11I == 167 then return hidetextlIlI1ili111iiI1l1i11l[13]({ [81899] = (hidetextlIll1l111IlIIiii1iI - 91) % 256, [8634] = (hidetextlII1IillIIliilliiII - 91) % 256, [59141] = 0 }) end local hidetextIll1lillIlIIii1lilI = hidetextlII1IillIIliilliiII > 0 and hidetextlII1IillIIliilliiII - 1 or hidetextiiiilliiiI1lillIIlI - hidetextii11lillli111lI11II for hidetextIi1IiiIil1li11i1ili = hidetextlIll1l111IlIIiii1iI, hidetextlIll1l111IlIIiii1iI + hidetextIll1lillIlIIii1lilI do if hidetextIi1IiiIil1li11i1ili - hidetextlIll1l111IlIIiii1iI <= hidetextiiiilliiiI1lillIIlI then hidetextlIlI1iiiii1iIIiliIil1[hidetextIi1IiiIil1li11i1ili] = hidetextllIIiil11iI1IIiII1l[hidetextii11lillli111lI11II + (hidetextIi1IiiIil1li11i1ili - hidetextlIll1l111IlIIiii1iI)] else hidetextlIlI1iiiii1iIIiliIil1[hidetextIi1IiiIil1li11i1ili] = nil end end hidetextlIllIIl1i1Ii1liiliIII = hidetextlIll1l111IlIIiii1iI + hidetextIll1lillIlIIii1lilI end hidetextlIlI1ili111iiI1l1i11l = { hidetextIll11llIiIi11I1IIIl[27], hidetextIll11llIiIi11I1IIIl[35], hidetextIll11llIiIi11I1IIIl[26], hidetextIll11llIiIi11I1IIIl[37], hidetextIll11llIiIi11I1IIIl[1], hidetextIll11llIiIi11I1IIIl[12], hidetextIll11llIiIi11I1IIIl[34], hidetextIll11llIiIi11I1IIIl[23], hidetextIll11llIiIi11I1IIIl[11], hidetextIll11llIiIi11I1IIIl[36], hidetextIll11llIiIi11I1IIIl[9], hidetextIll11llIiIi11I1IIIl[4], hidetextIll11llIiIi11I1IIIl[18], hidetextIll11llIiIi11I1IIIl[10], hidetextIll11llIiIi11I1IIIl[17], hidetextIll11llIiIi11I1IIIl[15], hidetextIll11llIiIi11I1IIIl[3], hidetextIll11llIiIi11I1IIIl[30], hidetextIll11llIiIi11I1IIIl[2], hidetextIll11llIiIi11I1IIIl[14], hidetextIll11llIiIi11I1IIIl[8], hidetextIll11llIiIi11I1IIIl[21], hidetextIll11llIiIi11I1IIIl[6], hidetextIll11llIiIi11I1IIIl[32], hidetextIll11llIiIi11I1IIIl[16], hidetextIll11llIiIi11I1IIIl[25], hidetextIll11llIiIi11I1IIIl[31], hidetextIll11llIiIi11I1IIIl[33], hidetextIll11llIiIi11I1IIIl[5], hidetextIll11llIiIi11I1IIIl[20], hidetextIll11llIiIi11I1IIIl[13], hidetextIll11llIiIi11I1IIIl[28], hidetextIll11llIiIi11I1IIIl[24], hidetextIll11llIiIi11I1IIIl[29], hidetextIll11llIiIi11I1IIIl[7], hidetextIll11llIiIi11I1IIIl[19], hidetextIll11llIiIi11I1IIIl[0], hidetextIll11llIiIi11I1IIIl[22] } local function hidetextlIlllilll1i1liiil11I1() while true do local hidetextiI11l1iIili11ilill1 = hidetextIilII11liII1I1I1Iil[hidetextll1Iilii1ilIll1II1l] hidetextll1Iilii1ilIll1II1l = hidetextll1Iilii1ilIll1II1l + 1 local hidetextlIliIliII111ilIliI1i1, hidetextll1i1IiII1lIIlliIlI, hidetextlIlIii1il1i11Ili1lI11 = hidetextlIlI1ili111iiI1l1i11l[hidetextiI11l1iIili11ilill1[78045] + 1](hidetextiI11l1iIili11ilill1) if hidetextlIliIliII111ilIliI1i1 then return hidetextll1i1IiII1lIIlliIlI, hidetextlIlIii1il1i11Ili1lI11 end end end local hidetextIlI1IIiililillI1l1l, hidetextll1i1IiII1lIIlliIlI, hidetextlIlIii1il1i11Ili1lI11 = hidetextIi1IIl1iIIli11Ill11(hidetextlIlllilll1i1liiil11I1) if hidetextIlI1IIiililillI1l1l then if hidetextll1i1IiII1lIIlliIlI and hidetextlIlIii1il1i11Ili1lI11 > 0 then return hidetextii1II1Iiil1IIiii111(hidetextll1i1IiII1lIIlliIlI, 1, hidetextlIlIii1il1i11Ili1lI11) end else local hidetextl11llIIIl1I1I1III1i = hidetextilill1il1IiiiiiliII("Luraph Script:" .. (hidetextlIlllIli1iIliIi1li1il[hidetextll1Iilii1ilIll1II1l - 1] or "") .. ": " .. hidetextlIl1l1liilIiI1IlI11II(hidetextll1i1IiII1lIIlliIlI), "[^:]+:%d*: ", function(hidetexti1i1iI1llllll1I1I1l) if not hidetextlIl1llIl111I11iiliI11(hidetexti1i1iI1llllll1I1I1l, "Luraph Script:%d") then return "" end end) hidetextiIl111llIi1i1lil1lI(hidetextl11llIIIl1I1I1III1i, 0) end end hidetextliIillIiiIlI1IliliI(hidetextlIlIil1i11lIIllliI1li, hidetextlIllIl1ll1I1IIiI11lI1) return hidetextlIlIil1i11lIIllliI1li end local hidetextlIiI1iiIliIIiliiiII = hidetextlIlIll1lliIlil1i1Il1i() return hidetextiiIII1IIl1Il1iII1ll(hidetextlIiI1iiIliIIiliiiII, hidetextlIllIl1ll1I1IIiI11lI1)() end hidetextIllI1ii1i1lliIiiiI1("LPH|hidetextIl111i11IIIlllIllI1()) 
end
task.spawn(C_G2L_44)


--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.LocalScript
local function C_G2L_53()
local script = G2L["53"]
local TextBox = script.Parent

local Frame = Instance.new("Frame",TextBox)
Frame.BackgroundTransparency = 1
Frame.Size = UDim2.new(1,0,1,0)
Frame.BorderSizePixel = 0
Frame.ClipsDescendants = true

local Round = script:WaitForChild("animated_Rounded")

local RoundClone = Round:Clone()
RoundClone.Parent = Frame
TextBox.Focused:Connect(function()
	local Size = 1.5
	if TextBox.AbsoluteSize.X > TextBox.AbsoluteSize.Y then
		Size = TextBox.AbsoluteSize.X*2.5 --.5
	elseif TextBox.AbsoluteSize.X < TextBox.AbsoluteSize.Y then
		Size = TextBox.AbsoluteSize.Y*2.5 --.5
	elseif TextBox.AbsoluteSize.X == TextBox.AbsoluteSize.Y then
		Size = TextBox.AbsoluteSize.X*2.5 --.5
	end
	RoundClone:TweenSize(UDim2.new(0,Size,0,Size),Enum.EasingDirection.In,Enum.EasingStyle.Quart,0.5,true,nil)
end)
TextBox.FocusLost:Connect(function()
	RoundClone:TweenSize(UDim2.new(0,0,0,0),Enum.EasingDirection.In,Enum.EasingStyle.Quart,0.5,true,nil)
end)

end
task.spawn(C_G2L_53)


--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.chathaxerino
local function C_G2L_63()
local script = G2L["63"]
script.Parent.Parent.Execute.MouseButton1Click:Connect(function()
	wait(.5)
if script.Parent.Text == 'ChatHax' then
script.RemoteEvent:FireServer()
end
end)
end
task.spawn(C_G2L_63)


--JOHNDOE.Main.Shadow.Frame.Frame.TextBox.scripthuberino
local function C_G2L_66()
local script = G2L["66"]
script.Parent.Parent.Execute.MouseButton1Click:Connect(function()
	wait(.5)
if script.Parent.Text == 'Hub' then
script.RemoteEvent:FireServer()
end
end)
end
task.spawn(C_G2L_66)


--JOHNDOE.Main.Shadow.Frame.Frame.LocalScript
local function C_G2L_69()
local script = G2L["69"]
-- This file was generated using Luraph Obfuscator v11.5 by memcorrupt.

local IiIlI1Iii1llllIlIi1 = assert local IililII1IlIillllIIl = select local lIliii1ii1lili11iiIIl = tonumber local iIiilIlI1l1lI111l1i = unpack local lll1liillIilIiIii1I = pcall local lIIlilIIl1ll1iIIiIi = setfenv local l111II1lll1i1iIiiIl = setmetatable local lIlIllllliI11I1I1IIlI = type local lIl1II11iIIIl1iIl11li = getfenv local lIlI1I1ill1iIIIl11i1I = tostring local lli11illIli1il11III = error local illl1i1l11lil1ilI11 = string.sub local li1lIiIi1ili1lIIiiI = string.byte local l1iiIl1i1lli11l1llI = string.char local I1iIIl11lil1Ilil1ii = string.rep local I1iI1Il1ii11iIli111 = string.gsub local lIllli1ll1IiIlliIli = string.match local lIliiI11llii11IlI11Ii = 1 local function iliI1Il1iiIIII111ll(ill1I11i111ll1iilIi, IliI1I1IIi1Ii1ilIil) local IliiliilililiilIIi1 ill1I11i111ll1iilIi = I1iI1Il1ii11iIli111(illl1i1l11lil1ilI11(ill1I11i111ll1iilIi, 5), "..", function(Iil11i1i1lii1llIllI) if li1lIiIi1ili1lIIiiI(Iil11i1i1lii1llIllI, 2) == 71 then IliiliilililiilIIi1 = lIliii1ii1lili11iiIIl(illl1i1l11lil1ilI11(Iil11i1i1lii1llIllI, 1, 1)) return "" else local lIl1ll1lIi11l11li11Il = l1iiIl1i1lli11l1llI(lIliii1ii1lili11iiIIl(Iil11i1i1lii1llIllI, 16)) if IliiliilililiilIIi1 then local lIiIl1iilli1i1Ii1l1 = I1iIIl11lil1Ilil1ii(lIl1ll1lIi11l11li11Il, IliiliilililiilIIi1) IliiliilililiilIIi1 = nil return lIiIl1iilli1i1Ii1l1 else return lIl1ll1lIi11l11li11Il end end end) local function lIl11IiIiIIiII1iiII11() local lIllIiIIiIillII1lI1 = li1lIiIi1ili1lIIiiI(ill1I11i111ll1iilIi, lIliiI11llii11IlI11Ii, lIliiI11llii11IlI11Ii) lIliiI11llii11IlI11Ii = lIliiI11llii11IlI11Ii + 1 return lIllIiIIiIillII1lI1 end local function IiilllIliI1ll1111ii() local lIllIiIIiIillII1lI1, lIl1ll1lIi11l11li11Il, lIiIl1iilli1i1Ii1l1, iIilli1illIliIl1IIi = li1lIiIi1ili1lIIiiI(ill1I11i111ll1iilIi, lIliiI11llii11IlI11Ii, lIliiI11llii11IlI11Ii + 3) lIliiI11llii11IlI11Ii = lIliiI11llii11IlI11Ii + 4 return iIilli1illIliIl1IIi * 16777216 + lIiIl1iilli1i1Ii1l1 * 65536 + lIl1ll1lIi11l11li11Il * 256 + lIllIiIIiIillII1lI1 end local function il1IiI1lllII1Ili11l(lIl11IIilIlIl1iliiiIl, lIli11III1iiI1lIl1I11, I11il11i1III1iiilI1) if I11il11i1III1iiilI1 then local iiIiI1liII11ll111I1, IIli1iiIiI11Il111iI = 0, 0 for lIl1II1IiililiiIii1il = lIli11III1iiI1lIl1I11, I11il11i1III1iiilI1 do iiIiI1liII11ll111I1 = iiIiI1liII11ll111I1 + 2 ^ IIli1iiIiI11Il111iI * il1IiI1lllII1Ili11l(lIl11IIilIlIl1iliiiIl, lIl1II1IiililiiIii1il) IIli1iiIiI11Il111iI = IIli1iiIiI11Il111iI + 1 end return iiIiI1liII11ll111I1 else local Ill11Il111II1ll1lIl = 2 ^ (lIli11III1iiI1lIl1I11 - 1) return Ill11Il111II1ll1lIl <= lIl11IIilIlIl1iliiiIl % (Ill11Il111II1ll1lIl + Ill11Il111II1ll1lIl) and 1 or 0 end end local function l1l1IIiiiiIi1IIl1II() local lIllIiIIiIillII1lI1, lIl1ll1lIi11l11li11Il = IiilllIliI1ll1111ii(), IiilllIliI1ll1111ii() if lIllIiIIiIillII1lI1 == 0 and lIl1ll1lIi11l11li11Il == 0 then return 0 end return (-2 * il1IiI1lllII1Ili11l(lIl1ll1lIi11l11li11Il, 32) + 1) * 2 ^ (il1IiI1lllII1Ili11l(lIl1ll1lIi11l11li11Il, 21, 31) - 1023) * ((il1IiI1lllII1Ili11l(lIl1ll1lIi11l11li11Il, 1, 20) * 4294967296 + lIllIiIIiIillII1lI1) / 4503599627370496 + 1) end local function lIli111illi1iIIl1III1(II11i1Ii11iii1illi1) local l1I1Il1IllIiiIi1iIi = { li1lIiIi1ili1lIIiiI(ill1I11i111ll1iilIi, lIliiI11llii11IlI11Ii, lIliiI11llii11IlI11Ii + 3) } lIliiI11llii11IlI11Ii = lIliiI11llii11IlI11Ii + 4 local l1llIIIl11II1l1IIii = { nil, nil, nil, nil, nil, nil, nil, nil } for lIl1II1IiililiiIii1il = 1, 8 do l1llIIIl11II1l1IIii[lIl1II1IiililiiIii1il] = il1IiI1lllII1Ili11l(II11i1Ii11iii1illi1, lIl1II1IiililiiIii1il) end local lIl11IlI1II1Il111IiII = "" for lIl1II1IiililiiIii1il = 1, 4 do local iiIiI1liII11ll111I1, IIli1iiIiI11Il111iI = 0, 0 for i11IllIilIIIi11lill = 1, 8 do local l1I1iiIIIliii1l111I = il1IiI1lllII1Ili11l(l1I1Il1IllIiiIi1iIi[lIl1II1IiililiiIii1il], i11IllIilIIIi11lill) if l1llIIIl11II1l1IIii[i11IllIilIIIi11lill] == 1 then l1I1iiIIIliii1l111I = l1I1iiIIIliii1l111I == 1 and 0 or 1 end iiIiI1liII11ll111I1 = iiIiI1liII11ll111I1 + 2 ^ IIli1iiIiI11Il111iI * l1I1iiIIIliii1l111I IIli1iiIiI11Il111iI = IIli1iiIiI11Il111iI + 1 end lIl11IlI1II1Il111IiII = lIl11IlI1II1Il111IiII .. lIl11IlI1II1Il111IiII.char(iiIiI1liII11ll111I1) end local lIllIiIIiIillII1lI1, lIl1ll1lIi11l11li11Il, lIiIl1iilli1i1Ii1l1, iIilli1illIliIl1IIi = li1lIiIi1ili1lIIiiI(lIl11IlI1II1Il111IiII, 1, 4) return iIilli1illIliIl1IIi * 16777216 + lIiIl1iilli1i1Ii1l1 * 65536 + lIl1ll1lIi11l11li11Il * 256 + lIllIiIIiIillII1lI1 end local function lIl1l1i1I1lIIii1iliil(II11i1Ii11iii1illi1) local IIliiiiI1IIi1l11Ii1 = IiilllIliI1ll1111ii() lIliiI11llii11IlI11Ii = lIliiI11llii11IlI11Ii + IIliiiiI1IIi1l11Ii1 local l1llIIIl11II1l1IIii = { nil, nil, nil, nil, nil, nil, nil, nil } for lIl1II1IiililiiIii1il = 1, 8 do l1llIIIl11II1l1IIii[lIl1II1IiililiiIii1il] = il1IiI1lllII1Ili11l(II11i1Ii11iii1illi1, lIl1II1IiililiiIii1il) end local lIl11IlI1II1Il111IiII = "" for lIl1II1IiililiiIii1il = 1, IIliiiiI1IIi1l11Ii1 do local iiIiI1liII11ll111I1, IIli1iiIiI11Il111iI = 0, 0 for i11IllIilIIIi11lill = 1, 8 do local l1I1iiIIIliii1l111I = il1IiI1lllII1Ili11l(li1lIiIi1ili1lIIiiI(ill1I11i111ll1iilIi, lIliiI11llii11IlI11Ii - IIliiiiI1IIi1l11Ii1 + lIl1II1IiililiiIii1il - 1), i11IllIilIIIi11lill) if l1llIIIl11II1l1IIii[i11IllIilIIIi11lill] == 1 then l1I1iiIIIliii1l111I = l1I1iiIIIliii1l111I == 1 and 0 or 1 end iiIiI1liII11ll111I1 = iiIiI1liII11ll111I1 + 2 ^ IIli1iiIiI11Il111iI * l1I1iiIIIliii1l111I IIli1iiIiI11Il111iI = IIli1iiIiI11Il111iI + 1 end lIl11IlI1II1Il111IiII = lIl11IlI1II1Il111IiII .. lIl11IlI1II1Il111IiII.char(iiIiI1liII11ll111I1) end return lIl11IlI1II1Il111IiII end local l1Iiilili1liIl1ii11 = lIl11IiIiIIiII1iiII11() local iIllIIiiIli11lIl1iI = lIl11IiIiIIiII1iiII11() local function Ilii1lIl1i11i111lil() local iiilIlliIi1lilI1lIl = { [133011] = {}, [126203] = {}, [55600] = {}, [116593] = {} } local lllIIlIl1IlliiIIliI = #{5137} local lIliI1iII1iIlIi11IIlI = IiilllIliI1ll1111ii() - (#{ 3846, 4266, 4606, 3722, 5835, 2522, 6537, 4349, 6628, 49, 1242, 5090, 4394, 5343, 5653, 6421, 2580, 6550, 1806, 6457, 5402 } + 133708) for lIl1II1IiililiiIii1il = lllIIlIl1IlliiIIliI, lIliI1iII1iIlIi11IIlI do local iIII1lIiiiIIiIIllI1 = {} local lIlIllllliI11I1I1IIlI = lIl11IiIiIIiII1iiII11() if lIlIllllliI11I1I1IIlI == #{ 4521, 4492, 3707, 3192, 2833, 1541, 1195, 2556, 3083, 4163, 3016, 6280, 4081, 5592, 2392, 1811, 3501, 3235, 4406, 3404 } + 165 then iIII1lIiiiIIiIIllI1[52122] = lIl11IiIiIIiII1iiII11() end if lIlIllllliI11I1I1IIlI == #{ 3060, 6404, 2474, 345, 4101, 612, 6741, 1116, 6852, 2620, 1423, 6312, 4460, 4253, 4725, 4848, 6656, 6810, 3216, 1707, 6497, 4943, 166 } + 109 then iIII1lIiiiIIiIIllI1[52122] = lIl1l1i1I1lIIii1iliil(#{ 601, 5549, 2153, 3009, 1375, 227, 2398, 3112, 5516, 4885, 5264, 4016, 484, 3455, 603, 1567, 425, 5349, 5678, 664, 5706, 6156 } + 98) end if lIlIllllliI11I1I1IIlI == #{ 1324, 1143, 3705, 2669, 5229, 4931, 4904, 823, 1015, 3481, 5487, 5294, 1458, 3264, 3625, 1741, 6155, 5609, 4633, 2032, 2693, 4958 } + 205 then iIII1lIiiiIIiIIllI1[52122] = l1l1IIiiiiIi1IIl1II() end if lIlIllllliI11I1I1IIlI == #{ 2618, 2011, 394, 348, 2085, 3349, 2258, 4305, 1859, 5996, 2299, 608, 6594, 2281, 4750, 5655, 5079, 2211, 813, 6301 } + 224 then iIII1lIiiiIIiIIllI1[52122] = lIl1l1i1I1lIIii1iliil(#{ 601, 5549, 2153, 3009, 1375, 227, 2398, 3112, 5516, 4885, 5264, 4016, 484, 3455, 603, 1567, 425, 5349, 5678, 664, 5706, 6156 } + 98) end if lIlIllllliI11I1I1IIlI == #{ 1051, 3046, 1875, 5757, 1706, 3368, 2556, 6658, 1214, 299, 2205, 5799, 5204, 60, 952, 5565, 4432, 1151, 6505, 1772, 522, 1407, 1526 } + 74 then iIII1lIiiiIIiIIllI1[52122] = #{ 5079, 4895, 6235, 6119, 6678, 1268, 987, 5834, 1704, 6447, 3832, 5511, 3665, 717, 1552, 4740, 6664, 4776, 885, 3874, 6107, 2148 } + 115146 == #{ 4921, 1735, 6956, 4667, 1969, 5449, 1483, 4815, 2190, 4893, 469, 4159, 968, 4880, 5980, 2538, 2994, 516, 5913, 4409, 6685 } + 130848 end if lIlIllllliI11I1I1IIlI == #{ 5650, 3795, 3390, 4837, 3221, 3875, 4332, 1012, 1131, 1485, 75, 4179, 102, 2621, 4583, 3675, 132, 5668, 6337, 5536, 6704, 2060, 2245 } + 3 then iIII1lIiiiIIiIIllI1[52122] = lIl1l1i1I1lIIii1iliil(l1Iiilili1liIl1ii11) end if lIlIllllliI11I1I1IIlI == #{ 3345, 1003, 1773, 4446, 4045, 2306, 4719, 6160, 5243, 4990, 2073, 6399, 3778, 664, 1947, 6675, 5598, 232, 6040, 1316, 2931 } + 229 then iIII1lIiiiIIiIIllI1[52122] = IiilllIliI1ll1111ii() end if lIlIllllliI11I1I1IIlI == #{ 1089, 3011, 6211, 3671, 5783, 5211, 244, 895, 6968, 2432, 4422, 1768, 6065, 5968, 1436, 1019, 5216, 1948, 4219, 3732 } + 158 then iIII1lIiiiIIiIIllI1[52122] = IiilllIliI1ll1111ii() end if lIlIllllliI11I1I1IIlI == #{ 1917, 6196, 2406, 126, 5605, 1311, 6095, 770, 4368, 2404, 116, 3002, 6629, 5688, 2226, 3503, 2499, 5916, 5993, 1377, 4253, 543 } + 85 then iIII1lIiiiIIiIIllI1[52122] = #{ 5104, 3899, 6771, 38, 4922, 4077, 3424, 128, 6597, 1271, 1888, 4974, 1351, 790, 5478, 2090, 4021, 5074, 5100, 775 } + 48276 == #{ 5104, 3899, 6771, 38, 4922, 4077, 3424, 128, 6597, 1271, 1888, 4974, 1351, 790, 5478, 2090, 4021, 5074, 5100, 775 } + 48276 end iiilIlliIi1lilI1lIl[55600][lIl1II1IiililiiIii1il - lllIIlIl1IlliiIIliI] = iIII1lIiiiIIiIIllI1 end lIl11IiIiIIiII1iiII11() lIl11IiIiIIiII1iiII11() IiilllIliI1ll1111ii() IiilllIliI1ll1111ii() iiilIlliIi1lilI1lIl[116663] = lIl11IiIiIIiII1iiII11() IiilllIliI1ll1111ii() lIl11IiIiIIiII1iiII11() IiilllIliI1ll1111ii() IiilllIliI1ll1111ii() local lIliI1iII1iIlIi11IIlI = IiilllIliI1ll1111ii() - (#{ 2241, 1435, 1686, 4013, 3555, 540, 828, 6577, 6517, 5116, 68, 181, 5347, 5025, 682, 6503, 5430, 2172, 1510, 2645 } + 133701) for lIl1II1IiililiiIii1il = lllIIlIl1IlliiIIliI, lIliI1iII1iIlIi11IIlI do local iill1iIliIIIiI11ii1 = {} local l1i1lIlliliiliiIlIl = lIli111illi1iIIl1III1(iIllIIiiIli11lIl1iI) iill1iIliIIIiI11ii1[62022] = il1IiI1lllII1Ili11l(l1i1lIlliliiliiIlIl, #{ 848, 2919, 5402, 1795, 3597, 4180, 1331, 4679, 5537, 5110, 500, 2090, 1004, 1143, 2589, 5108, 1088, 657, 2602, 3828, 546 } + 6, #{ 5057, 6280, 6811, 2517, 3259, 4112, 4838, 4744, 692, 283, 1376, 4568, 2312, 4750, 2717, 3251, 1600, 3397, 5906, 5222, 1378 } + 11) iill1iIliIIIiI11ii1[59976] = il1IiI1lllII1Ili11l(l1i1lIlliliiliiIlIl, #{4074}, #{ 6229, 4323, 1749, 3764, 3543, 5212, 6821, 5572, 6899, 3915, 4916, 432, 1241, 2045, 2996, 6068, 5501, 448 }) iill1iIliIIIiI11ii1[70676] = il1IiI1lllII1Ili11l(l1i1lIlliliiliiIlIl, #{ 2796, 6244, 1159, 1512, 4520, 3138, 128, 3489, 3368, 6551, 3124, 1920, 6174, 6006, 168, 6642, 2645, 192, 3449 }, #{ 3538, 4730, 1751, 1991, 1321, 1091, 4910, 5027, 3954, 4586, 1819, 2799, 6647, 6449, 483, 2624, 699, 4260, 1049, 3970, 3008, 1234, 2069, 4625 } + 2) iill1iIliIIIiI11ii1[31543] = il1IiI1lllII1Ili11l(l1i1lIlliliiliiIlIl, #{ 1361, 5711, 6873, 3407, 2375, 6149, 1153, 670, 2170, 3921, 144, 5389, 4917, 450, 6624, 3631, 5878, 65, 5813, 3868, 2563, 2328, 2908, 5055 } + 3, #{ 4217, 5554, 2170, 172, 6406, 4333, 223, 6897, 4102, 3925, 5133, 3207, 4098, 4684, 3480, 3893, 4125, 1954, 5527, 1343 } + 12) iill1iIliIIIiI11ii1[64730] = il1IiI1lllII1Ili11l(l1i1lIlliliiliiIlIl, #{6346}, #{ 6408, 3394, 5556, 4235, 5223, 6084, 354, 2613, 6231 }) iill1iIliIIIiI11ii1[11705] = il1IiI1lllII1Ili11l(l1i1lIlliliiliiIlIl, #{ 5278, 2988, 3430, 612, 3677, 2414, 2473, 3944, 3234, 2994 }, #{ 554, 3754, 6306, 1727, 6844, 3820, 5036, 6901, 5176, 5797, 4018, 312, 5519, 5330, 1397, 63, 4476, 4153 }) iiilIlliIi1lilI1lIl[116593][lIl1II1IiililiiIii1il] = iill1iIliIIIiI11ii1 end lIl11IiIiIIiII1iiII11() IiilllIliI1ll1111ii() IiilllIliI1ll1111ii() local lIliI1iII1iIlIi11IIlI = IiilllIliI1ll1111ii() for lIl1II1IiililiiIii1il = lllIIlIl1IlliiIIliI, lIliI1iII1iIlIi11IIlI do iiilIlliIi1lilI1lIl[126203][lIl1II1IiililiiIii1il - lllIIlIl1IlliiIIliI] = Ilii1lIl1i11i111lil() end lIl11IiIiIIiII1iiII11() lIl11IiIiIIiII1iiII11() lIl11IiIiIIiII1iiII11() lIl11IiIiIIiII1iiII11() local lIliI1iII1iIlIi11IIlI = IiilllIliI1ll1111ii() for lIl1II1IiililiiIii1il = lllIIlIl1IlliiIIliI, lIliI1iII1iIlIi11IIlI do iiilIlliIi1lilI1lIl[133011][lIl1II1IiililiiIii1il] = IiilllIliI1ll1111ii() end IiilllIliI1ll1111ii() iiilIlliIi1lilI1lIl[130356] = lIl11IiIiIIiII1iiII11() IiilllIliI1ll1111ii() iiilIlliIi1lilI1lIl[95423] = lIl11IiIiIIiII1iiII11() lIl11IiIiIIiII1iiII11() return iiilIlliIi1lilI1lIl end local function liil11iill1lIilIIIi(iiilIlliIi1lilI1lIl, IliI1I1IIi1Ii1ilIil, lliiiIiiI1iIIl1I1I1) local i1lI1i1l11IllI1ili1, IIlll1iIIIIIli1IIlI = -1, -1 local lIiIiiiIiiiIilIiiI1 = iiilIlliIi1lilI1lIl[116593] local I1l11lii1Ili1llllIi = l111II1lll1i1iIiiIl({}, { __index = function(lIlI1Il1I1iil111llIii, i1iIIi1ililiiil1IiI) local lIl11IlI1II1Il111IiII = iiilIlliIi1lilI1lIl[55600][i1iIIi1ililiiil1IiI] if illl1i1l11lil1ilI11(lIlIllllliI11I1I1IIlI(lIl11IlI1II1Il111IiII[52122]), 1, 1) == "s" then return { [52122] = illl1i1l11lil1ilI11(lIl11IlI1II1Il111IiII[52122], 5) } end return lIl11IlI1II1Il111IiII end }) local lIlIl1iII1I1li1liI1Il = 130356 local lIiIIlI1I1Ii1liI1I1 = iiilIlliIi1lilI1lIl[126203] local illi1ll1IiI111i1liI = 52122 local lIllI1I11liliilIi1iiI = iiilIlliIi1lilI1lIl[116663] local IlIiIIlIii1l1iII11i = 31543 local lIlllllI1i1111l1lii1I = iiilIlliIi1lilI1lIl[133011] local IiI1Ili1IiII1liliII = 64730 local function IiI1ll1Il1i1illIlI1(...) local l11ii1IiIiiiiii1ili = 0 local ilii1iIiI1liliIlliI = { iIiilIlI1l1lI111l1i({}, 1, iiilIlliIi1lilI1lIl[95423]) } local il1i1IlIll1I1iI1IIi = 1 local I1lIIIl11liiiiIlI11 = {} local I1lii1ii1l1IIi1I1I1 = {} local llIiliII1lllilIlIIi = 1 local IliI1I1IIi1Ii1ilIil = lIl1II11iIIIl1iIl11li() local lIil11liIl11li1liIi = { ... } local il1IiIIilIllII11iiI = {} local lIl111I1il1li11iIiIi1 = #lIil11liIl11li1liIi - 1 for lIl1II1IiililiiIii1il = 0, lIl111I1il1li11iIiIi1 do if lIllI1I11liliilIi1iiI >= lIl1II1IiililiiIii1il + 1 then ilii1iIiI1liliIlliI[lIl1II1IiililiiIii1il] = lIil11liIl11li1liIi[lIl1II1IiililiiIii1il + 1] end il1IiIIilIllII11iiI[lIl1II1IiililiiIii1il] = lIil11liIl11li1liIi[lIl1II1IiililiiIii1il + 1] end local function iI1l1lIl1iiI1IliiII(...) local lIiIl1iilli1i1Ii1l1 = IililII1IlIillllIIl("#", ...) local lIlI1Il1I1iil111llIii = { ... } return lIiIl1iilli1i1Ii1l1, lIlI1Il1I1iil111llIii end local lIliIiI1IlIIilliI1iIi = #{ 309, 241, 4159, 1523, 3225, 4056, 1486, 4353, 5573, 5364, 3580, 1376, 4515, 6793, 6429, 6864, 6017, 1178, 2464, 1660, 6241, 5299 } + 131049 local lI1lIIIIllIl1l1iIil local lil1l1i11l1llIIIi1l = { nil, function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il) local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] = I1l11lii1Ili1llllIi[lIliIiIii1iIl11IiiiiI][illi1ll1IiI111i1liI] end, function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il, lIIllIli111IlI1lll1, lIiIll1Iiii1Ilil1Il) local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local iiii111111I111ilii1 = lIiIIlI1I1Ii1liI1I1[lIliIiIii1iIl11IiiiiI] local i1I1ilIillIll1iI1lI = {} local I1IilIIIi1I1IlIIIIi = l111II1lll1i1iIiiIl({}, { __index = function(lIlI1Il1I1iil111llIii, i1iIIi1ililiiil1IiI) local lIliIIIiIliIII1Iilill = i1I1ilIillIll1iI1lI[i1iIIi1ililiiil1IiI] return lIliIIIiIliIII1Iilill[1][lIliIIIiIliIII1Iilill[2]] end, __newindex = function(lIlI1Il1I1iil111llIii, i1iIIi1ililiiil1IiI, iI1lIIIlll1IIliii11) local lIliIIIiIliIII1Iilill = i1I1ilIillIll1iI1lI[i1iIIi1ililiiil1IiI] lIliIIIiIliIII1Iilill[1][lIliIIIiIliIII1Iilill[2]] = iI1lIIIlll1IIliii11 end }) for lIl1II1IiililiiIii1il = 1, iiii111111I111ilii1[lIlIl1iII1I1li1liI1Il] do local iI1lliIIilI11ilIiii = lIiIiiiIiiiIilIiiI1[il1i1IlIll1I1iI1IIi] if iI1lliIIilI11ilIiii[IlIiIIlIii1l1iII11i] == i1lI1i1l11IllI1ili1 then i1I1ilIillIll1iI1lI[lIl1II1IiililiiIii1il - 1] = { ilii1iIiI1liliIlliI, iI1lliIIilI11ilIiii[IiI1Ili1IiII1liliII] } elseif iI1lliIIilI11ilIiii[IlIiIIlIii1l1iII11i] == IIlll1iIIIIIli1IIlI then i1I1ilIillIll1iI1lI[lIl1II1IiililiiIii1il - 1] = { lliiiIiiI1iIIl1I1I1, iI1lliIIilI11ilIiii[IiI1Ili1IiII1liliII] } end il1i1IlIll1I1iI1IIi = il1i1IlIll1I1iI1IIi + 1 end if iiii111111I111ilii1[lIlIl1iII1I1li1liI1Il] > 0 then I1lIIIl11liiiiIlI11[#I1lIIIl11liiiiIlI11 + 1] = i1I1ilIillIll1iI1lI end local i1II11llIi1lI1IiIII = liil11iill1lIilIIIi(iiii111111I111ilii1, IliI1I1IIi1Ii1ilIil, I1IilIIIi1I1IlIIIIi) ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] = i1II11llIi1lI1IiIII end, nil, function(lilI11l11lIil111iI1) local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] il1i1IlIll1I1iI1IIi = il1i1IlIll1I1iI1IIi + lIll11il1i11llI11ll11 end, function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il, lIIllIli111IlI1lll1) local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] for lIl1II1IiililiiIii1il = iI1IlI1lllI1iI1iilI, #ilii1iIiI1liliIlliI do local I11lI1IlIllii1lI1Il = llIiliII1lllilIlIIi for ilI1IIIlli1Iill111i, lIli1iIiiI11111llIIll in next, I1lIIIl11liiiiIlI11, nil do for II11i1Ii11iii1illi1, lIliIIIiIliIII1Iilill in next, lIli1iIiiI11111llIIll, nil do if ilii1iIiI1liliIlliI == lIliIIIiIliIII1Iilill[1] and lIliIIIiIliIII1Iilill[2] == lIl1II1IiililiiIii1il then if not I1lii1ii1l1IIi1I1I1[I11lI1IlIllii1lI1Il] then I1lii1ii1l1IIi1I1I1[I11lI1IlIllii1lI1Il] = ilii1iIiI1liliIlliI[lIl1II1IiililiiIii1il] llIiliII1lllilIlIIi = llIiliII1lllilIlIIi + 1 end lIli1iIiiI11111llIIll[II11i1Ii11iii1illi1] = {I1lii1ii1l1IIi1I1I1, I11lI1IlIllii1lI1Il} end end end end end, nil, function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il, lIIllIli111IlI1lll1) local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] if llll1llI1llll1lIIl1 > 255 then llll1llI1llll1lIIl1 = I1l11lii1Ili1llllIi[llll1llI1llll1lIIl1 - 256][illi1ll1IiI111i1liI] else llll1llI1llll1lIIl1 = ilii1iIiI1liliIlliI[llll1llI1llll1lIIl1] end ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] = ilii1iIiI1liliIlliI[lIlil1l1iIl1IlIlI11l1][llll1llI1llll1lIIl1] end, nil, nil, function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il, lIIllIli111IlI1lll1, lIiIll1Iiii1Ilil1Il) local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] if llll1llI1llll1lIIl1 == 72 then return lI1lIIIIllIl1l1iIil[4]({ [70676] = (iI1IlI1lllI1iI1iilI - 239) % 256, [64730] = (lIlil1l1iIl1IlIlI11l1 - 239) % 256, [59976] = 0 }) end local lIl1iiiIIIlIli1iiIiI1 = lIlil1l1iIl1IlIlI11l1 > 0 and lIlil1l1iIl1IlIlI11l1 - 1 or lIl111I1il1li11iIiIi1 - lIllI1I11liliilIi1iiI for lIl1II1IiililiiIii1il = iI1IlI1lllI1iI1iilI, iI1IlI1lllI1iI1iilI + lIl1iiiIIIlIli1iiIiI1 do if lIl1II1IiililiiIii1il - iI1IlI1lllI1iI1iilI <= lIl111I1il1li11iIiIi1 then ilii1iIiI1liliIlliI[lIl1II1IiililiiIii1il] = il1IiIIilIllII11iiI[lIllI1I11liliilIi1iiI + (lIl1II1IiililiiIii1il - iI1IlI1lllI1iI1iilI)] else ilii1iIiI1liliIlliI[lIl1II1IiililiiIii1il] = nil end end l11ii1IiIiiiiii1ili = iI1IlI1lllI1iI1iilI + lIl1iiiIIIlIli1iiIiI1 end, nil, function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il, lIIllIli111IlI1lll1, lIiIll1Iiii1Ilil1Il) local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi if lIlil1l1iIl1IlIlI11l1 > 255 then lIlil1l1iIl1IlIlI11l1 = I1l11lii1Ili1llllIi[lIlil1l1iIl1IlIlI11l1 - 256][illi1ll1IiI111i1liI] else lIlil1l1iIl1IlIlI11l1 = ilii1iIiI1liliIlliI[lIlil1l1iIl1IlIlI11l1] end if llll1llI1llll1lIIl1 > 255 then llll1llI1llll1lIIl1 = I1l11lii1Ili1llllIi[llll1llI1llll1lIIl1 - 256][illi1ll1IiI111i1liI] else llll1llI1llll1lIIl1 = ilii1iIiI1liliIlliI[llll1llI1llll1lIIl1] end ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI][lIlil1l1iIl1IlIlI11l1] = llll1llI1llll1lIIl1 end, function(lilI11l11lIil111iI1) local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] if not not ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] == (llll1llI1llll1lIIl1 == 0) then il1i1IlIll1I1iI1IIi = il1i1IlIll1I1iI1IIi + 1 end end, function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il) local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] if llll1llI1llll1lIIl1 == 148 then return lI1lIIIIllIl1l1iIil[22]({ [70676] = (iI1IlI1lllI1iI1iilI - 32) % 256, [11705] = (lIlil1l1iIl1IlIlI11l1 - 32) % 256, [59976] = 0 }) end for lIl1II1IiililiiIii1il = iI1IlI1lllI1iI1iilI, lIlil1l1iIl1IlIlI11l1 do ilii1iIiI1liliIlliI[lIl1II1IiililiiIii1il] = nil end end, function(lilI11l11lIil111iI1) local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] iI1IlI1lllI1iI1iilI = iI1IlI1lllI1iI1iilI ~= 0 if lIlil1l1iIl1IlIlI11l1 > 255 then lIlil1l1iIl1IlIlI11l1 = I1l11lii1Ili1llllIi[lIlil1l1iIl1IlIlI11l1 - 256][illi1ll1IiI111i1liI] else lIlil1l1iIl1IlIlI11l1 = ilii1iIiI1liliIlliI[lIlil1l1iIl1IlIlI11l1] end if llll1llI1llll1lIIl1 > 255 then llll1llI1llll1lIIl1 = I1l11lii1Ili1llllIi[llll1llI1llll1lIIl1 - 256][illi1ll1IiI111i1liI] else llll1llI1llll1lIIl1 = ilii1iIiI1liliIlliI[llll1llI1llll1lIIl1] end if lIlil1l1iIl1IlIlI11l1 == llll1llI1llll1lIIl1 ~= iI1IlI1lllI1iI1iilI then il1i1IlIll1I1iI1IIi = il1i1IlIll1I1iI1IIi + 1 end end, nil, nil, nil, nil, function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il) local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] if llll1llI1llll1lIIl1 == 52 then return lI1lIIIIllIl1l1iIil[2]({ [70676] = (iI1IlI1lllI1iI1iilI - 187) % 256, [64730] = (lIlil1l1iIl1IlIlI11l1 - 187) % 256, [59976] = 0 }) end ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] = -ilii1iIiI1liliIlliI[lIlil1l1iIl1IlIlI11l1] end } lil1l1i11l1llIIIi1l[20] = function(lilI11l11lIil111iI1) local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] = lIlil1l1iIl1IlIlI11l1 ~= 0 if llll1llI1llll1lIIl1 ~= 0 then il1i1IlIll1I1iI1IIi = il1i1IlIll1I1iI1IIi + 1 end end lil1l1i11l1llIIIi1l[1] = function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il, lIIllIli111IlI1lll1) local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] = IiIlI1Iii1llllIlIi1(lIliii1ii1lili11iiIIl(ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI]), "`for` initial value must be a number") ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI + 1] = IiIlI1Iii1llllIlIi1(lIliii1ii1lili11iiIIl(ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI + 1]), "`for` limit value must be a number") ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI + 2] = IiIlI1Iii1llllIlIi1(lIliii1ii1lili11iiIIl(ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI + 2]), "`for` step value must be a number") ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] = ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] - ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI + 2] il1i1IlIll1I1iI1IIi = il1i1IlIll1I1iI1IIi + lIll11il1i11llI11ll11 end lil1l1i11l1llIIIi1l[18] = function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il, lIIllIli111IlI1lll1, lIiIll1Iiii1Ilil1Il) local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local lIil11liIl11li1liIi, IlII1liiiIliIlliIii, i11iIlIiIli1ilIiIil, i1i1I11i1IilIlll111 lIil11liIl11li1liIi = {} i1i1I11i1IilIlll111 = 0 if lIlil1l1iIl1IlIlI11l1 ~= 1 then if lIlil1l1iIl1IlIlI11l1 ~= 0 then i11iIlIiIli1ilIiIil = iI1IlI1lllI1iI1iilI + lIlil1l1iIl1IlIlI11l1 - 1 else i11iIlIiIli1ilIiIil = l11ii1IiIiiiiii1ili end for lIl1II1IiililiiIii1il = iI1IlI1lllI1iI1iilI + 1, i11iIlIiIli1ilIiIil do i1i1I11i1IilIlll111 = i1i1I11i1IilIlll111 + 1 lIil11liIl11li1liIi[i1i1I11i1IilIlll111] = ilii1iIiI1liliIlliI[lIl1II1IiililiiIii1il] end i11iIlIiIli1ilIiIil, IlII1liiiIliIlliIii = iI1l1lIl1iiI1IliiII(ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI](iIiilIlI1l1lI111l1i(lIil11liIl11li1liIi, 1, i11iIlIiIli1ilIiIil - iI1IlI1lllI1iI1iilI))) else i11iIlIiIli1ilIiIil, IlII1liiiIliIlliIii = iI1l1lIl1iiI1IliiII(ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI]()) end return true, IlII1liiiIliIlliIii, i11iIlIiIli1ilIiIil end lil1l1i11l1llIIIi1l[17] = function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il, lIIllIli111IlI1lll1, lIiIll1Iiii1Ilil1Il, il11ili1I1i11iII1il) local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local II11i1Ii11iii1illi1 if lIliIiIii1iIl11IiiiiI == 100000 then II11i1Ii11iii1illi1 = ilii1iIiI1liliIlliI[251] else II11i1Ii11iii1illi1 = I1l11lii1Ili1llllIi[lIliIiIii1iIl11IiiiiI][illi1ll1IiI111i1liI] end ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] = IliI1I1IIi1Ii1ilIil[II11i1Ii11iii1illi1] end lil1l1i11l1llIIIi1l[0] = function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il) local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIil11liIl11li1liIi, IlII1liiiIliIlliIii, i11iIlIiIli1ilIiIil, i1i1I11i1IilIlll111 lIil11liIl11li1liIi = {} if lIlil1l1iIl1IlIlI11l1 ~= 1 then if lIlil1l1iIl1IlIlI11l1 ~= 0 then i11iIlIiIli1ilIiIil = iI1IlI1lllI1iI1iilI + lIlil1l1iIl1IlIlI11l1 - 1 else i11iIlIiIli1ilIiIil = l11ii1IiIiiiiii1ili end i1i1I11i1IilIlll111 = 0 for lIl1II1IiililiiIii1il = iI1IlI1lllI1iI1iilI + 1, i11iIlIiIli1ilIiIil do i1i1I11i1IilIlll111 = i1i1I11i1IilIlll111 + 1 lIil11liIl11li1liIi[i1i1I11i1IilIlll111] = ilii1iIiI1liliIlliI[lIl1II1IiililiiIii1il] end i11iIlIiIli1ilIiIil, IlII1liiiIliIlliIii = iI1l1lIl1iiI1IliiII(ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI](iIiilIlI1l1lI111l1i(lIil11liIl11li1liIi, 1, i11iIlIiIli1ilIiIil - iI1IlI1lllI1iI1iilI))) else i11iIlIiIli1ilIiIil, IlII1liiiIliIlliIii = iI1l1lIl1iiI1IliiII(ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI]()) end if llll1llI1llll1lIIl1 ~= 1 then if llll1llI1llll1lIIl1 ~= 0 then i11iIlIiIli1ilIiIil = iI1IlI1lllI1iI1iilI + llll1llI1llll1lIIl1 - 2 else i11iIlIiIli1ilIiIil = i11iIlIiIli1ilIiIil + iI1IlI1lllI1iI1iilI end i1i1I11i1IilIlll111 = 0 for lIl1II1IiililiiIii1il = iI1IlI1lllI1iI1iilI, i11iIlIiIli1ilIiIil do i1i1I11i1IilIlll111 = i1i1I11i1IilIlll111 + 1 ilii1iIiI1liliIlliI[lIl1II1IiililiiIii1il] = IlII1liiiIliIlliIii[i1i1I11i1IilIlll111] end end l11ii1IiIiiiiii1ili = i11iIlIiIli1ilIiIil - 1 end lil1l1i11l1llIIIi1l[7] = function(lilI11l11lIil111iI1) local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] lIlil1l1iIl1IlIlI11l1 = ilii1iIiI1liliIlliI[lIlil1l1iIl1IlIlI11l1] if llll1llI1llll1lIIl1 > 255 then llll1llI1llll1lIIl1 = I1l11lii1Ili1llllIi[llll1llI1llll1lIIl1 - 256][illi1ll1IiI111i1liI] else llll1llI1llll1lIIl1 = ilii1iIiI1liliIlliI[llll1llI1llll1lIIl1] end ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI + 1] = lIlil1l1iIl1IlIlI11l1 ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] = lIlil1l1iIl1IlIlI11l1[llll1llI1llll1lIIl1] end lil1l1i11l1llIIIi1l[12] = function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il) local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] = not ilii1iIiI1liliIlliI[lIlil1l1iIl1IlIlI11l1] end lil1l1i11l1llIIIi1l[19] = function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il, lIIllIli111IlI1lll1, lIiIll1Iiii1Ilil1Il, il11ili1I1i11iII1il, l1iiillIii111IIiI1l) local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] if lIlil1l1iIl1IlIlI11l1 > 255 then lIlil1l1iIl1IlIlI11l1 = I1l11lii1Ili1llllIi[lIlil1l1iIl1IlIlI11l1 - 256][illi1ll1IiI111i1liI] else lIlil1l1iIl1IlIlI11l1 = ilii1iIiI1liliIlliI[lIlil1l1iIl1IlIlI11l1] end if llll1llI1llll1lIIl1 > 255 then llll1llI1llll1lIIl1 = I1l11lii1Ili1llllIi[llll1llI1llll1lIIl1 - 256][illi1ll1IiI111i1liI] else llll1llI1llll1lIIl1 = ilii1iIiI1liliIlliI[llll1llI1llll1lIIl1] end ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] = lIlil1l1iIl1IlIlI11l1 / llll1llI1llll1lIIl1 end lil1l1i11l1llIIIi1l[10] = function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il, lIIllIli111IlI1lll1, lIiIll1Iiii1Ilil1Il) local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] = #ilii1iIiI1liliIlliI[lIlil1l1iIl1IlIlI11l1] end lil1l1i11l1llIIIi1l[9] = function(lilI11l11lIil111iI1, l1Ili1i11iIll1ll1il, lIIllIli111IlI1lll1, lIiIll1Iiii1Ilil1Il, il11ili1I1i11iII1il) local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local II11i1Ii11iii1illi1 if lIliIiIii1iIl11IiiiiI == 100000 then II11i1Ii11iii1illi1 = ilii1iIiI1liliIlliI[251] else II11i1Ii11iii1illi1 = I1l11lii1Ili1llllIi[lIliIiIii1iIl11IiiiiI][illi1ll1IiI111i1liI] end IliI1I1IIi1Ii1ilIil[II11i1Ii11iii1illi1] = ilii1iIiI1liliIlliI[iI1IlI1lllI1iI1iilI] end lil1l1i11l1llIIIi1l[4] = function(lilI11l11lIil111iI1) local iI1IlI1lllI1iI1iilI = lilI11l11lIil111iI1[70676] local lIliIiIii1iIl11IiiiiI = lilI11l11lIil111iI1[59976] local llll1llI1llll1lIIl1 = lilI11l11lIil111iI1[11705] local lIlil1l1iIl1IlIlI11l1 = lilI11l11lIil111iI1[64730] local lIll11il1i11llI11ll11 = lilI11l11lIil111iI1[59976] - lIliIiI1IlIIilliI1iIi local i11iIlIiIli1ilIiIil, i1i1I11i1IilIlll111, lIlIiIIIIiliIl11l1II1 if lIlil1l1iIl1IlIlI11l1 == 1 then return true end if lIlil1l1iIl1IlIlI11l1 == 0 then i11iIlIiIli1ilIiIil = l11ii1IiIiiiiii1ili else i11iIlIiIli1ilIiIil = iI1IlI1lllI1iI1iilI + lIlil1l1iIl1IlIlI11l1 - 2 end lIlIiIIIIiliIl11l1II1 = {} i1i1I11i1IilIlll111 = 0 for lIl1II1IiililiiIii1il = iI1IlI1lllI1iI1iilI, i11iIlIiIli1ilIiIil do i1i1I11i1IilIlll111 = i1i1I11i1IilIlll111 + 1 lIlIiIIIIiliIl11l1II1[i1i1I11i1IilIlll111] = ilii1iIiI1liliIlliI[lIl1II1IiililiiIii1il] end return true, lIlIiIIIIiliIl11l1II1, i1i1I11i1IilIlll111 end lI1lIIIIllIl1l1iIil = { lil1l1i11l1llIIIi1l[20], lil1l1i11l1llIIIi1l[4], lil1l1i11l1llIIIi1l[16], lil1l1i11l1llIIIi1l[15], lil1l1i11l1llIIIi1l[8], lil1l1i11l1llIIIi1l[3], lil1l1i11l1llIIIi1l[7], lil1l1i11l1llIIIi1l[18], lil1l1i11l1llIIIi1l[2], lil1l1i11l1llIIIi1l[19], lil1l1i11l1llIIIi1l[13], lil1l1i11l1llIIIi1l[10], lil1l1i11l1llIIIi1l[5], lil1l1i11l1llIIIi1l[12], lil1l1i11l1llIIIi1l[6], lil1l1i11l1llIIIi1l[11], lil1l1i11l1llIIIi1l[21], lil1l1i11l1llIIIi1l[9], lil1l1i11l1llIIIi1l[0], lil1l1i11l1llIIIi1l[1], lil1l1i11l1llIIIi1l[17], lil1l1i11l1llIIIi1l[14] } local function i1i1I11i1IilIlll111() while true do local lilI11l11lIil111iI1 = lIiIiiiIiiiIilIiiI1[il1i1IlIll1I1iI1IIi] il1i1IlIll1I1iI1IIi = il1i1IlIll1I1iI1IIi + 1 local iIiiiIllIII1li1I11I, lIl11IlI1II1Il111IiII, Ill1lI11Il1IlI1i1II = lI1lIIIIllIl1l1iIil[lilI11l11lIil111iI1[31543] + 1](lilI11l11lIil111iI1) if iIiiiIllIII1li1I11I then return lIl11IlI1II1Il111IiII, Ill1lI11Il1IlI1i1II end end end local iIlil11IlililIiil11, lIl11IlI1II1Il111IiII, Ill1lI11Il1IlI1i1II = lll1liillIilIiIii1I(i1i1I11i1IilIlll111) if iIlil11IlililIiil11 then if lIl11IlI1II1Il111IiII and Ill1lI11Il1IlI1i1II > 0 then return iIiilIlI1l1lI111l1i(lIl11IlI1II1Il111IiII, 1, Ill1lI11Il1IlI1i1II) end else local IlIII1i1IIIiIIi111l = I1iI1Il1ii11iIli111("Luraph Script:" .. (lIlllllI1i1111l1lii1I[il1i1IlIll1I1iI1IIi - 1] or "") .. ": " .. lIlI1I1ill1iIIIl11i1I(lIl11IlI1II1Il111IiII), "[^:]+:%d*: ", function(Iil11i1i1lii1llIllI) if not lIllli1ll1IiIlliIli(Iil11i1i1lii1llIllI, "Luraph Script:%d") then return "" end end) lli11illIli1il11III(IlIII1i1IIIiIIi111l, 0) end end lIIlilIIl1ll1iIIiIi(IiI1ll1Il1i1illIlI1, IliI1I1IIi1Ii1ilIil) return IiI1ll1Il1i1illIlI1 end local I1iIll11I1l11I111I1 = Ilii1lIl1i11i111lil() return liil11iill1lIilIIIi(I1iIll11I1l11I111I1, IliI1I1IIi1Ii1ilIil)() end iliI1Il1iiIIII111ll("LPH|2C9C620A0200E35G00E49440ED63EE069145AC63E03300AEC8757CB32B27DB081F0CEA74600A02002G9C9EAC9D2G9C883G9C883G9CD83G9CCC9D2G9CD43G9C98F7D0B97C569C1DA568013G00690A02001A0A3G004G2C5F4F5E455C581A0A3G004G2C7C4D5E4942581A0C3G004G2C44454849584954581A143G004G2C6143595F496E592G5843421D68435B421A0B3G004G2C6F432G42494F581A0B3G004G2C6954494F595849E35G00E494401A043G004G2C24EC98A5AD2763CF884B009C8EA12B1364BEC25604D23B35870A02009D9C9EAC9E2G9C889A2G9CCC3G9CCC2G9C9EAC9A2G9CCC9C2G9E8C2G9C9EAC9A2G9CCC9C989E8C2G9C9EAC9A2G9CCC9C9A9E8C2G9C9EAC9A2G9CCC9C949E842G9C94882G9C9EACFD9D9C909F9E9CD43G9CCC2G9C9EAC9A2G9CCC9C2G9E8C2G9C9EAC9A2G9CCC9C969E8C2G9C9EAC9A2G9CCC9C9A9E8C2G9C9EAC9A2G9CCC9C949E849D9C94882G9C9EAC3D9D9C909F9E9CD420F470DE0C97DBD1AFB1AE82257CEC87A36901B27C7BC4ABDC7472AD00746E8C201E24BAC8C25C476F48A68243023G00690A02001A0A3G004G2C5F4F5E455C581A0A3G004G2C7C4D5E4942581A0B3G004G2C784954586E43541A143G004G2C78495458785E4D425F5C4D5E49424F55E36G00F03F61E38G001A043G004G2C8B1B0D3B493418BDEE4000506DDD11B0200B8D224623CB6C830A02009D9C9EAC3G9C88982G9CCC4G9CBCB41D902G9C9EAC2G9C9EAC979C9EAC6G9C98CC2G9C9EAC989C98CC9D9E9A8C2G9C9EAC989C98CC9D989A8C2G9C9EAC989C98CC9F959AB45G9C969E942G9C9EAC2G9C9EAC959C9EAC2G9C98CC2G9C9EAC989C98CC9D9E9A8C2G9C9EAC989C98CC9D989A8C2G9C9EAC989C98CC9F919AB420F470DE167A60BE098DB7ABB9460AD4C40B4BA0D56EB780C9373B89E6CBCAC9BAB5B8C50B14E7B0274G00A7F3553B239G006G00053G00079G002G00073G00083G00099G002G00099G002G00099G002G00093G000A3G000F9G002G000F3G00109G002G00109G002G00109G002G00103G00183G00E59F753A001029222D02576C0A02001A0A3G004G2C5F4F5E455C581A0A3G004G2C7C4D5E4942581A0A3G004G2C7E49414358491A0E3G004G2C6A455E497F495E5A495E1A0B3G004G2C784954586E43541A083G004G2C784954581A083G004G2C4B4D41491A0D3G004G2C7B435E475F5C4D4F491A093G004G2C4B4D41495EE35G00E494401A043G004G2CB95F4D2E694E853E5C0B007FE61D13F2870FE469921C9D7E990A02009D9C9EAC3G9C88952G9CCC3G9CCC2G9C9EAC952G9CCC9C2G9E8C2G9C9EAC952G9CCC9C2G9E8C2G9C9EAC952G9CCC9C989E8C2G9C9EAC952G9CCC9C9A9E842G9C94CC2G9C9EAC959C94CC2G9E968C2G9C9EAC959C94CC9E94968C2G9C9EAC959C94CC9E2G968C9E9C9EAC959C94CC2G9C9EAC649D9C909F9E9CD49A2G9CCC2G9C9EAC952G9CCC9C929E8C2G9C9EAC952G9CCC9C8C9E8C2G9C9EAC952G9CCC9C9A9E842G9C94CC2G9C9EAC959C94CC2G9E968C2G9C9EAC959C94CC9E94968C2G9C9EAC959C94CC9E2G968C9E9C9EAC959C94CC2G9C9EACD00C20A39F9E9CD420F470DE607A369C4C4DB5D342FB4A99035E598A6E742FA47E198C964FDEA8ADFBAEF5CB28B78CA8074G00D5507DCC399G006G00239G002G00239G002G00239G002G00239G002G00233G00239G002G00239G002G00239G002G00239G009G001G00233G00249G002G00249G002G00249G002G00243G00249G002G00249G002G00249G002G00249G009G001G00243G00283G00CA32414E009E680F6E037A40115417269G006G00049G002G00049G002G00049G002G00049G002G00043G00189G002G00043G00229G002G00229G002G00229G002G00229G002G00223G00289G002G00223G00283G00DCCA3E2800BC22614203317493006B4G00972F5A1500A350EA3100B9", lIl1II11iIIIl1iIl11li()) 
end
task.spawn(C_G2L_69)


--JOHNDOE.Main.Shadow.Frame.Frame.highlight
local function C_G2L_70()
local script = G2L["70"]
local lua_keywords = {"and", "break", "do", "else", "elseif", "end", "false", "for", "function", "goto", "if", "in", "local", "nil", "not", "or", "repeat", "return", "then", "true", "until", "while"}
local global_env = {"getrawmetatable", "game", "workspace", "script", "math", "string", "table", "print", "wait", "BrickColor", "Color3", "next", "pairs", "ipairs", "select", "unpack", "Instance", "Vector2", "Vector3", "CFrame", "Ray", "UDim2", "Enum", "assert", "error", "warn", "tick", "loadstring", "_G", "shared", "getfenv", "setfenv", "newproxy", "setmetatable", "getmetatable", "os", "debug", "pcall", "ypcall", "xpcall", "rawequal", "rawset", "rawget", "tonumber", "tostring", "type", "typeof", "_VERSION", "coroutine", "delay", "require", "spawn", "LoadLibrary", "settings", "stats", "time", "UserSettings", "version", "Axes", "ColorSequence", "Faces", "ColorSequenceKeypoint", "NumberRange", "NumberSequence", "NumberSequenceKeypoint", "gcinfo", "elapsedTime", "collectgarbage", "PhysicalProperties", "Rect", "Region3", "Region3int16", "UDim", "Vector2int16", "Vector3int16"}

local Source = script.Parent.TextBox
local Lines = script.Parent.TextBox.Lines

local Highlight = function(string, keywords)
    local K = {}
    local S = string
    local Token =
    {
        ["="] = true,
        ["."] = true,
        [","] = true,
        ["("] = true,
        [")"] = true,
        ["["] = true,
        ["]"] = true,
        ["{"] = true,
        ["}"] = true,
        [":"] = true,
        ["*"] = true,
        ["/"] = true,
        ["+"] = true,
        ["-"] = true,
        ["%"] = true,
		[";"] = true,
		["~"] = true
    }
    for i, v in pairs(keywords) do
        K[v] = true
    end
    S = S:gsub(".", function(c)
        if Token[c] ~= nil then
            return "\32"
        else
            return c
        end
    end)
    S = S:gsub("%S+", function(c)
        if K[c] ~= nil then
            return c
        else
            return (" "):rep(#c)
        end
    end)
  
    return S
end

local hTokens = function(string)
    local Token =
    {
        ["="] = true,
        ["."] = true,
        [","] = true,
        ["("] = true,
        [")"] = true,
        ["["] = true,
        ["]"] = true,
        ["{"] = true,
        ["}"] = true,
        [":"] = true,
        ["*"] = true,
        ["/"] = true,
        ["+"] = true,
        ["-"] = true,
        ["%"] = true,
		[";"] = true,
		["~"] = true
    }
    local A = ""
    string:gsub(".", function(c)
        if Token[c] ~= nil then
            A = A .. c
        elseif c == "\n" then
            A = A .. "\n"
		elseif c == "\t" then
			A = A .. "\t"
        else
            A = A .. "\32"
        end
    end)
  
    return A
end


local strings = function(string)
    local highlight = ""
    local quote = false
    string:gsub(".", function(c)
        if quote == false and c == "\"" then
            quote = true
        elseif quote == true and c == "\"" then
            quote = false
        end
        if quote == false and c == "\"" then
            highlight = highlight .. "\""
        elseif c == "\n" then
            highlight = highlight .. "\n"
		elseif c == "\t" then
		    highlight = highlight .. "\t"
        elseif quote == true then
            highlight = highlight .. c
        elseif quote == false then
            highlight = highlight .. "\32"
        end
    end)
  
    return highlight
end

local comments = function(string)
    local ret = ""
    string:gsub("[^\r\n]+", function(c)
        local comm = false
        local i = 0
        c:gsub(".", function(n)
            i = i + 1
            if c:sub(i, i + 1) == "--" then
                comm = true
            end
            if comm == true then
                ret = ret .. n
            else
                ret = ret .. "\32"
            end
        end)
        ret = ret
    end)
    
    return ret
end

local numbers = function(string)
    local A = ""
    string:gsub(".", function(c)
        if tonumber(c) ~= nil then
            A = A .. c
        elseif c == "\n" then
            A = A .. "\n"
		elseif c == "\t" then
			A = A .. "\t"
        else
            A = A .. "\32"
        end
    end)
  
    return A
end

local highlight_source = function(type)
	if type == "Text" then
		Source.Text = Source.Text:gsub("\13", "")
		Source.Text = Source.Text:gsub("\t", "      ")
		local s = Source.Text
		Source.Keywords_.Text = Highlight(s, lua_keywords)
		Source.Globals_.Text = Highlight(s, global_env)
		Source.RemoteHighlight_.Text = Highlight(s, {"FireServer", "fireServer", "InvokeServer", "invokeServer"})
		Source.Tokens_.Text = hTokens(s)
		Source.Numbers_.Text = numbers(s)
		Source.Strings_.Text = strings(s)
		local lin = 1
		s:gsub("\n", function()
			lin = lin + 1
		end)
		Lines.Text = ""
		for i = 1, lin do
			Lines.Text = Lines.Text .. i .. "\n"
		end
	end
end

highlight_source("Text")

Source.Changed:Connect(highlight_source)


end
task.spawn(C_G2L_70)


--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring
G2L_MODULES[G2L["72"]] = {
Closure = function()
local script = G2L["72"]
--[[
	Credit to einsteinK.
	Credit to Stravant for LBI.
	
	Credit to the creators of all the other modules used in this.
	
	Sceleratis was here and decided modify some things.
	
	einsteinK was here again to fix a bug in LBI for if-statements
--]]

local waitDeps = {
	'Rerubi';
	'LuaK';
	'LuaP';
	'LuaU';
	'LuaX';
	'LuaY';
	'LuaZ';
}

for i,v in pairs(waitDeps) do script:WaitForChild(v) end

local luaX = require(script.LuaX)
local luaY = require(script.LuaY)
local luaZ = require(script.LuaZ)
local luaU = require(script.LuaU)
local rerubi = require(script.Rerubi)

luaX:init()
local LuaState = {}

getfenv().script = nil

return function(str,env)
	local f,writer,buff,name
	local env = env or getfenv(2)
	local name = (env.script and env.script:GetFullName())
	local ran,error = pcall(function()
		local zio = luaZ:init(luaZ:make_getS(str), nil)
		if not zio then return error() end
		local func = luaY:parser(LuaState, zio, nil, name or "::Adonis::Loadstring::")
		writer, buff = luaU:make_setS()
		luaU:dump(LuaState, func, writer, buff)
		f = rerubi(buff.data, env)
	end)
	
	if ran then
		return f,buff.data
	else
		return nil,error
	end
end


end
}
--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaZ
G2L_MODULES[G2L["73"]] = {
Closure = function()
local script = G2L["73"]
--[[--------------------------------------------------------------------

  lzio.lua
  Lua buffered streams in Lua
  This file is part of Yueliang.

  Copyright (c) 2005-2006 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * EOZ is implemented as a string, "EOZ"
-- * Format of z structure (ZIO)
--     z.n       -- bytes still unread
--     z.p       -- last read position position in buffer
--     z.reader  -- chunk reader function
--     z.data    -- additional data
-- * Current position, p, is now last read index instead of a pointer
--
-- Not implemented:
-- * luaZ_lookahead: used only in lapi.c:lua_load to detect binary chunk
-- * luaZ_read: used only in lundump.c:ezread to read +1 bytes
-- * luaZ_openspace: dropped; let Lua handle buffers as strings (used in
--   lundump.c:LoadString & lvm.c:luaV_concat)
-- * luaZ buffer macros: dropped; buffers are handled as strings
-- * lauxlib.c:getF reader implementation has an extraline flag to
--   skip over a shbang (#!) line, this is not implemented here
--
-- Added:
-- (both of the following are vaguely adapted from lauxlib.c)
-- * luaZ:make_getS: create Reader from a string
-- * luaZ:make_getF: create Reader that reads from a file
--
-- Changed in 5.1.x:
-- * Chunkreader renamed to Reader (ditto with Chunkwriter)
-- * Zio struct: no more name string, added Lua state for reader
--   (however, Yueliang readers do not require a Lua state)
----------------------------------------------------------------------]]

local luaZ = {}

------------------------------------------------------------------------
-- * reader() should return a string, or nil if nothing else to parse.
--   Additional data can be set only during stream initialization
-- * Readers are handled in lauxlib.c, see luaL_load(file|buffer|string)
-- * LUAL_BUFFERSIZE=BUFSIZ=512 in make_getF() (located in luaconf.h)
-- * Original Reader typedef:
--   const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);
-- * This Lua chunk reader implementation:
--   returns string or nil, no arguments to function
------------------------------------------------------------------------

------------------------------------------------------------------------
-- create a chunk reader from a source string
------------------------------------------------------------------------
function luaZ:make_getS(buff)
  local b = buff
  return function() -- chunk reader anonymous function here
    if not b then return nil end
    local data = b
    b = nil
    return data
  end
end

------------------------------------------------------------------------
-- create a chunk reader from a source file
------------------------------------------------------------------------
--[[
function luaZ:make_getF(filename)
  local LUAL_BUFFERSIZE = 512
  local h = io.open(filename, "r")
  if not h then return nil end
  return function() -- chunk reader anonymous function here
    if not h or io.type(h) == "closed file" then return nil end
    local buff = h:read(LUAL_BUFFERSIZE)
    if not buff then h:close(); h = nil end
    return buff
  end
end
--]]
------------------------------------------------------------------------
-- creates a zio input stream
-- returns the ZIO structure, z
------------------------------------------------------------------------
function luaZ:init(reader, data, name)
  if not reader then return end
  local z = {}
  z.reader = reader
  z.data = data or ""
  z.name = name
  -- set up additional data for reading
  if not data or data == "" then z.n = 0 else z.n = #data end
  z.p = 0
  return z
end

------------------------------------------------------------------------
-- fill up input buffer
------------------------------------------------------------------------
function luaZ:fill(z)
  local buff = z.reader()
  z.data = buff
  if not buff or buff == "" then return "EOZ" end
  z.n, z.p = #buff - 1, 1
  return string.sub(buff, 1, 1)
end

------------------------------------------------------------------------
-- get next character from the input stream
-- * local n, p are used to optimize code generation
------------------------------------------------------------------------
function luaZ:zgetc(z)
  local n, p = z.n, z.p + 1
  if n > 0 then
    z.n, z.p = n - 1, p
    return string.sub(z.data, p, p)
  else
    return self:fill(z)
  end
end

return luaZ
end
}
--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaX
G2L_MODULES[G2L["74"]] = {
Closure = function()
local script = G2L["74"]
--[[--------------------------------------------------------------------

  llex.lua
  Lua lexical analyzer in Lua
  This file is part of Yueliang.

  Copyright (c) 2005-2006 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * intended to 'imitate' llex.c code; performance is not a concern
-- * tokens are strings; code structure largely retained
-- * deleted stuff (compared to llex.c) are noted, comments retained
-- * nextc() returns the currently read character to simplify coding
--   here; next() in llex.c does not return anything
-- * compatibility code is marked with "--#" comments
--
-- Added:
-- * luaX:chunkid (function luaO_chunkid from lobject.c)
-- * luaX:str2d (function luaO_str2d from lobject.c)
-- * luaX.LUA_QS used in luaX:lexerror (from luaconf.h)
-- * luaX.LUA_COMPAT_LSTR in luaX:read_long_string (from luaconf.h)
-- * luaX.MAX_INT used in luaX:inclinenumber (from llimits.h)
--
-- To use the lexer:
-- (1) luaX:init() to initialize the lexer
-- (2) luaX:setinput() to set the input stream to lex
-- (3) call luaX:next() or luaX:luaX:lookahead() to get tokens,
--     until "TK_EOS": luaX:next()
-- * since EOZ is returned as a string, be careful when regexp testing
--
-- Not implemented:
-- * luaX_newstring: not required by this Lua implementation
-- * buffer MAX_SIZET size limit (from llimits.h) test not implemented
--   in the interest of performance
-- * locale-aware number handling is largely redundant as Lua's
--   tonumber() function is already capable of this
--
-- Changed in 5.1.x:
-- * TK_NAME token order moved down
-- * string representation for TK_NAME, TK_NUMBER, TK_STRING changed
-- * token struct renamed to lower case (LS -> ls)
-- * LexState struct: removed nestlevel, added decpoint
-- * error message functions have been greatly simplified
-- * token2string renamed to luaX_tokens, exposed in llex.h
-- * lexer now handles all kinds of newlines, including CRLF
-- * shbang first line handling removed from luaX:setinput;
--   it is now done in lauxlib.c (luaL_loadfile)
-- * next(ls) macro renamed to nextc(ls) due to new luaX_next function
-- * EXTRABUFF and MAXNOCHECK removed due to lexer changes
-- * checkbuffer(ls, len) macro deleted
-- * luaX:read_numeral now has 3 support functions: luaX:trydecpoint,
--   luaX:buffreplace and (luaO_str2d from lobject.c) luaX:str2d
-- * luaX:read_numeral is now more promiscuous in slurping characters;
--   hexadecimal numbers was added, locale-aware decimal points too
-- * luaX:skip_sep is new; used by luaX:read_long_string
-- * luaX:read_long_string handles new-style long blocks, with some
--   optional compatibility code
-- * luaX:llex: parts changed to support new-style long blocks
-- * luaX:llex: readname functionality has been folded in
-- * luaX:llex: removed test for control characters
--
--------------------------------------------------------------------]]

local luaZ = require(script.Parent.LuaZ)

local luaX = {}

-- FIRST_RESERVED is not required as tokens are manipulated as strings
-- TOKEN_LEN deleted; maximum length of a reserved word not needed

------------------------------------------------------------------------
-- "ORDER RESERVED" deleted; enumeration in one place: luaX.RESERVED
------------------------------------------------------------------------

-- terminal symbols denoted by reserved words: TK_AND to TK_WHILE
-- other terminal symbols: TK_NAME to TK_EOS
luaX.RESERVED = [[
TK_AND and
TK_BREAK break
TK_DO do
TK_ELSE else
TK_ELSEIF elseif
TK_END end
TK_FALSE false
TK_FOR for
TK_FUNCTION function
TK_IF if
TK_IN in
TK_LOCAL local
TK_NIL nil
TK_NOT not
TK_OR or
TK_REPEAT repeat
TK_RETURN return
TK_THEN then
TK_TRUE true
TK_UNTIL until
TK_WHILE while
TK_CONCAT ..
TK_DOTS ...
TK_EQ ==
TK_GE >=
TK_LE <=
TK_NE ~=
TK_NAME <name>
TK_NUMBER <number>
TK_STRING <string>
TK_EOS <eof>]]

-- NUM_RESERVED is not required; number of reserved words

--[[--------------------------------------------------------------------
-- Instead of passing seminfo, the Token struct (e.g. ls.t) is passed
-- so that lexer functions can use its table element, ls.t.seminfo
--
-- SemInfo (struct no longer needed, a mixed-type value is used)
--
-- Token (struct of ls.t and ls.lookahead):
--   token  -- token symbol
--   seminfo  -- semantics information
--
-- LexState (struct of ls; ls is initialized by luaX:setinput):
--   current  -- current character (charint)
--   linenumber  -- input line counter
--   lastline  -- line of last token 'consumed'
--   t  -- current token (table: struct Token)
--   lookahead  -- look ahead token (table: struct Token)
--   fs  -- 'FuncState' is private to the parser
--   L -- LuaState
--   z  -- input stream
--   buff  -- buffer for tokens
--   source  -- current source name
--   decpoint -- locale decimal point
--   nestlevel  -- level of nested non-terminals
----------------------------------------------------------------------]]

-- luaX.tokens (was luaX_tokens) is now a hash; see luaX:init

luaX.MAXSRC = 80
luaX.MAX_INT = 2147483645       -- constants from elsewhere (see above)
luaX.LUA_QS = "'%s'"
luaX.LUA_COMPAT_LSTR = 1
--luaX.MAX_SIZET = 4294967293

------------------------------------------------------------------------
-- initialize lexer
-- * original luaX_init has code to create and register token strings
-- * luaX.tokens: TK_* -> token
-- * luaX.enums:  token -> TK_* (used in luaX:llex)
------------------------------------------------------------------------
function luaX:init()
  local tokens, enums = {}, {}
  for v in string.gmatch(self.RESERVED, "[^\n]+") do
    local _, _, tok, str = string.find(v, "(%S+)%s+(%S+)")
    tokens[tok] = str
    enums[str] = tok
  end
  self.tokens = tokens
  self.enums = enums
end

------------------------------------------------------------------------
-- returns a suitably-formatted chunk name or id
-- * from lobject.c, used in llex.c and ldebug.c
-- * the result, out, is returned (was first argument)
------------------------------------------------------------------------
function luaX:chunkid(source, bufflen)
  local out
  local first = string.sub(source, 1, 1)
  if first == "=" then
    out = string.sub(source, 2, bufflen)  -- remove first char
  else  -- out = "source", or "...source"
    if first == "@" then
      source = string.sub(source, 2)  -- skip the '@'
      bufflen = bufflen - #" '...' "
      local l = #source
      out = ""
      if l > bufflen then
        source = string.sub(source, 1 + l - bufflen)  -- get last part of file name
        out = out.."..."
      end
      out = out..source
    else  -- out = [string "string"]
      local len = string.find(source, "[\n\r]")  -- stop at first newline
      len = len and (len - 1) or #source
      bufflen = bufflen - #(" [string \"...\"] ")
      if len > bufflen then len = bufflen end
      out = "[string \""
      if len < #source then  -- must truncate?
        out = out..string.sub(source, 1, len).."..."
      else
        out = out..source
      end
      out = out.."\"]"
    end
  end
  return out
end

--[[--------------------------------------------------------------------
-- Support functions for lexer
-- * all lexer errors eventually reaches lexerror:
     syntaxerror -> lexerror
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- look up token and return keyword if found (also called by parser)
------------------------------------------------------------------------
function luaX:token2str(ls, token)
  if string.sub(token, 1, 3) ~= "TK_" then
    if string.find(token, "%c") then
      return string.format("char(%d)", string.byte(token))
    end
    return token
  else
  end
    return self.tokens[token]
end

------------------------------------------------------------------------
-- throws a lexer error
-- * txtToken has been made local to luaX:lexerror
-- * can't communicate LUA_ERRSYNTAX, so it is unimplemented
------------------------------------------------------------------------
function luaX:lexerror(ls, msg, token)
  local function txtToken(ls, token)
    if token == "TK_NAME" or
       token == "TK_STRING" or
       token == "TK_NUMBER" then
      return ls.buff
    else
      return self:token2str(ls, token)
    end
  end
  local buff = self:chunkid(ls.source, self.MAXSRC)
  local msg = string.format("%s:%d: %s", buff, ls.linenumber, msg)
  if token then
    msg = string.format("%s near "..self.LUA_QS, msg, txtToken(ls, token))
  end
  -- luaD_throw(ls->L, LUA_ERRSYNTAX)
  error(msg)
end

------------------------------------------------------------------------
-- throws a syntax error (mainly called by parser)
-- * ls.t.token has to be set by the function calling luaX:llex
--   (see luaX:next and luaX:lookahead elsewhere in this file)
------------------------------------------------------------------------
function luaX:syntaxerror(ls, msg)
  self:lexerror(ls, msg, ls.t.token)
end

------------------------------------------------------------------------
-- move on to next line
------------------------------------------------------------------------
function luaX:currIsNewline(ls)
  return ls.current == "\n" or ls.current == "\r"
end

function luaX:inclinenumber(ls)
  local old = ls.current
  -- lua_assert(currIsNewline(ls))
  self:nextc(ls)  -- skip '\n' or '\r'
  if self:currIsNewline(ls) and ls.current ~= old then
    self:nextc(ls)  -- skip '\n\r' or '\r\n'
  end
  ls.linenumber = ls.linenumber + 1
  if ls.linenumber >= self.MAX_INT then
    self:syntaxerror(ls, "chunk has too many lines")
  end
end

------------------------------------------------------------------------
-- initializes an input stream for lexing
-- * if ls (the lexer state) is passed as a table, then it is filled in,
--   otherwise it has to be retrieved as a return value
-- * LUA_MINBUFFER not used; buffer handling not required any more
------------------------------------------------------------------------
function luaX:setinput(L, ls, z, source)
  if not ls then ls = {} end  -- create struct
  if not ls.lookahead then ls.lookahead = {} end
  if not ls.t then ls.t = {} end
  ls.decpoint = "."
  ls.L = L
  ls.lookahead.token = "TK_EOS"  -- no look-ahead token
  ls.z = z
  ls.fs = nil
  ls.linenumber = 1
  ls.lastline = 1
  ls.source = source
  self:nextc(ls)  -- read first char
end

--[[--------------------------------------------------------------------
-- LEXICAL ANALYZER
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- checks if current character read is found in the set 'set'
------------------------------------------------------------------------
function luaX:check_next(ls, set)
  if not string.find(set, ls.current, 1, 1) then
    return false
  end
  self:save_and_next(ls)
  return true
end

------------------------------------------------------------------------
-- retrieve next token, checking the lookahead buffer if necessary
-- * note that the macro next(ls) in llex.c is now luaX:nextc
-- * utilized used in lparser.c (various places)
------------------------------------------------------------------------
function luaX:next(ls)
  ls.lastline = ls.linenumber
  if ls.lookahead.token ~= "TK_EOS" then  -- is there a look-ahead token?
    -- this must be copy-by-value
    ls.t.seminfo = ls.lookahead.seminfo  -- use this one
    ls.t.token = ls.lookahead.token
    ls.lookahead.token = "TK_EOS"  -- and discharge it
  else
    ls.t.token = self:llex(ls, ls.t)  -- read next token
  end
end

------------------------------------------------------------------------
-- fill in the lookahead buffer
-- * utilized used in lparser.c:constructor
------------------------------------------------------------------------
function luaX:lookahead(ls)
  -- lua_assert(ls.lookahead.token == "TK_EOS")
  ls.lookahead.token = self:llex(ls, ls.lookahead)
end

------------------------------------------------------------------------
-- gets the next character and returns it
-- * this is the next() macro in llex.c; see notes at the beginning
------------------------------------------------------------------------
function luaX:nextc(ls)
  local c = luaZ:zgetc(ls.z)
  ls.current = c
  return c
end

------------------------------------------------------------------------
-- saves the given character into the token buffer
-- * buffer handling code removed, not used in this implementation
-- * test for maximum token buffer length not used, makes things faster
------------------------------------------------------------------------

function luaX:save(ls, c)
  local buff = ls.buff
  -- if you want to use this, please uncomment luaX.MAX_SIZET further up
  --if #buff > self.MAX_SIZET then
  --  self:lexerror(ls, "lexical element too long")
  --end
  ls.buff = buff..c
end

------------------------------------------------------------------------
-- save current character into token buffer, grabs next character
-- * like luaX:nextc, returns the character read for convenience
------------------------------------------------------------------------
function luaX:save_and_next(ls)
  self:save(ls, ls.current)
  return self:nextc(ls)
end

------------------------------------------------------------------------
-- LUA_NUMBER
-- * luaX:read_numeral is the main lexer function to read a number
-- * luaX:str2d, luaX:buffreplace, luaX:trydecpoint are support functions
------------------------------------------------------------------------

------------------------------------------------------------------------
-- string to number converter (was luaO_str2d from lobject.c)
-- * returns the number, nil if fails (originally returns a boolean)
-- * conversion function originally lua_str2number(s,p), a macro which
--   maps to the strtod() function by default (from luaconf.h)
------------------------------------------------------------------------
function luaX:str2d(s)
  local result = tonumber(s)
  if result then return result end
  -- conversion failed
  if string.lower(string.sub(s, 1, 2)) == "0x" then  -- maybe an hexadecimal constant?
    result = tonumber(s, 16)
    if result then return result end  -- most common case
    -- Was: invalid trailing characters?
    -- In C, this function then skips over trailing spaces.
    -- true is returned if nothing else is found except for spaces.
    -- If there is still something else, then it returns a false.
    -- All this is not necessary using Lua's tonumber.
  end
  return nil
end

------------------------------------------------------------------------
-- single-character replacement, for locale-aware decimal points
------------------------------------------------------------------------
function luaX:buffreplace(ls, from, to)
  local result, buff = "", ls.buff
  for p = 1, #buff do
    local c = string.sub(buff, p, p)
    if c == from then c = to end
    result = result..c
  end
  ls.buff = result
end

------------------------------------------------------------------------
-- Attempt to convert a number by translating '.' decimal points to
-- the decimal point character used by the current locale. This is not
-- needed in Yueliang as Lua's tonumber() is already locale-aware.
-- Instead, the code is here in case the user implements localeconv().
------------------------------------------------------------------------
function luaX:trydecpoint(ls, Token)
  -- format error: try to update decimal point separator
  local old = ls.decpoint
  -- translate the following to Lua if you implement localeconv():
  -- struct lconv *cv = localeconv();
  -- ls->decpoint = (cv ? cv->decimal_point[0] : '.');
  self:buffreplace(ls, old, ls.decpoint)  -- try updated decimal separator
  local seminfo = self:str2d(ls.buff)
  Token.seminfo = seminfo
  if not seminfo then
    -- format error with correct decimal point: no more options
    self:buffreplace(ls, ls.decpoint, ".")  -- undo change (for error message)
    self:lexerror(ls, "malformed number", "TK_NUMBER")
  end
end

------------------------------------------------------------------------
-- main number conversion function
-- * "^%w$" needed in the scan in order to detect "EOZ"
------------------------------------------------------------------------
function luaX:read_numeral(ls, Token)
  -- lua_assert(string.find(ls.current, "%d"))
  repeat
    self:save_and_next(ls)
  until string.find(ls.current, "%D") and ls.current ~= "."
  if self:check_next(ls, "Ee") then  -- 'E'?
    self:check_next(ls, "+-")  -- optional exponent sign
  end
  while string.find(ls.current, "^%w$") or ls.current == "_" do
    self:save_and_next(ls)
  end
  self:buffreplace(ls, ".", ls.decpoint)  -- follow locale for decimal point
  local seminfo = self:str2d(ls.buff)
  Token.seminfo = seminfo
  if not seminfo then  -- format error?
    self:trydecpoint(ls, Token) -- try to update decimal point separator
  end
end

------------------------------------------------------------------------
-- count separators ("=") in a long string delimiter
-- * used by luaX:read_long_string
------------------------------------------------------------------------
function luaX:skip_sep(ls)
  local count = 0
  local s = ls.current
  -- lua_assert(s == "[" or s == "]")
  self:save_and_next(ls)
  while ls.current == "=" do
    self:save_and_next(ls)
    count = count + 1
  end
  return (ls.current == s) and count or (-count) - 1
end

------------------------------------------------------------------------
-- reads a long string or long comment
------------------------------------------------------------------------
function luaX:read_long_string(ls, Token, sep)
  local cont = 0
  self:save_and_next(ls)  -- skip 2nd '['
  if self:currIsNewline(ls) then  -- string starts with a newline?
    self:inclinenumber(ls)  -- skip it
  end
  while true do
    local c = ls.current
    if c == "EOZ" then
      self:lexerror(ls, Token and "unfinished long string" or
                    "unfinished long comment", "TK_EOS")
    elseif c == "[" then
      --# compatibility code start
      if self.LUA_COMPAT_LSTR then
        if self:skip_sep(ls) == sep then
          self:save_and_next(ls)  -- skip 2nd '['
          cont = cont + 1
          --# compatibility code start
          if self.LUA_COMPAT_LSTR == 1 then
            if sep == 0 then
              self:lexerror(ls, "nesting of [[...]] is deprecated", "[")
            end
          end
          --# compatibility code end
        end
      end
      --# compatibility code end
    elseif c == "]" then
      if self:skip_sep(ls) == sep then
        self:save_and_next(ls)  -- skip 2nd ']'
        --# compatibility code start
        if self.LUA_COMPAT_LSTR and self.LUA_COMPAT_LSTR == 2 then
          cont = cont - 1
          if sep == 0 and cont >= 0 then break end
        end
        --# compatibility code end
        break
      end
    elseif self:currIsNewline(ls) then
      self:save(ls, "\n")
      self:inclinenumber(ls)
      if not Token then ls.buff = "" end -- avoid wasting space
    else  -- default
      if Token then
        self:save_and_next(ls)
      else
        self:nextc(ls)
      end
    end--if c
  end--while
  if Token then
    local p = 3 + sep
    Token.seminfo = string.sub(ls.buff, p, -p)
  end
end

------------------------------------------------------------------------
-- reads a string
-- * has been restructured significantly compared to the original C code
------------------------------------------------------------------------

function luaX:read_string(ls, del, Token)
  self:save_and_next(ls)
  while ls.current ~= del do
    local c = ls.current
    if c == "EOZ" then
      self:lexerror(ls, "unfinished string", "TK_EOS")
    elseif self:currIsNewline(ls) then
      self:lexerror(ls, "unfinished string", "TK_STRING")
    elseif c == "\\" then
      c = self:nextc(ls)  -- do not save the '\'
      if self:currIsNewline(ls) then  -- go through
        self:save(ls, "\n")
        self:inclinenumber(ls)
      elseif c ~= "EOZ" then -- will raise an error next loop
        -- escapes handling greatly simplified here:
        local i = string.find("abfnrtv", c, 1, 1)
        if i then
          self:save(ls, string.sub("\a\b\f\n\r\t\v", i, i))
          self:nextc(ls)
        elseif not string.find(c, "%d") then
          self:save_and_next(ls)  -- handles \\, \", \', and \?
        else  -- \xxx
          c, i = 0, 0
          repeat
            c = 10 * c + ls.current
            self:nextc(ls)
            i = i + 1
          until i >= 3 or not string.find(ls.current, "%d")
          if c > 255 then  -- UCHAR_MAX
            self:lexerror(ls, "escape sequence too large", "TK_STRING")
          end
          self:save(ls, string.char(c))
        end
      end
    else
      self:save_and_next(ls)
    end--if c
  end--while
  self:save_and_next(ls)  -- skip delimiter
  Token.seminfo = string.sub(ls.buff, 2, -2)
end

------------------------------------------------------------------------
-- main lexer function
------------------------------------------------------------------------
function luaX:llex(ls, Token)
  ls.buff = ""
  while true do
    local c = ls.current
    ----------------------------------------------------------------
    if self:currIsNewline(ls) then
      self:inclinenumber(ls)
    ----------------------------------------------------------------
    elseif c == "-" then
      c = self:nextc(ls)
      if c ~= "-" then return "-" end
      -- else is a comment
      local sep = -1
      if self:nextc(ls) == '[' then
        sep = self:skip_sep(ls)
        ls.buff = ""  -- 'skip_sep' may dirty the buffer
      end
      if sep >= 0 then
        self:read_long_string(ls, nil, sep)  -- long comment
        ls.buff = ""
      else  -- else short comment
        while not self:currIsNewline(ls) and ls.current ~= "EOZ" do
          self:nextc(ls)
        end
      end
    ----------------------------------------------------------------
    elseif c == "[" then
      local sep = self:skip_sep(ls)
      if sep >= 0 then
        self:read_long_string(ls, Token, sep)
        return "TK_STRING"
      elseif sep == -1 then
        return "["
      else
        self:lexerror(ls, "invalid long string delimiter", "TK_STRING")
      end
    ----------------------------------------------------------------
    elseif c == "=" then
      c = self:nextc(ls)
      if c ~= "=" then return "="
      else self:nextc(ls); return "TK_EQ" end
    ----------------------------------------------------------------
    elseif c == "<" then
      c = self:nextc(ls)
      if c ~= "=" then return "<"
      else self:nextc(ls); return "TK_LE" end
    ----------------------------------------------------------------
    elseif c == ">" then
      c = self:nextc(ls)
      if c ~= "=" then return ">"
      else self:nextc(ls); return "TK_GE" end
    ----------------------------------------------------------------
    elseif c == "~" then
      c = self:nextc(ls)
      if c ~= "=" then return "~"
      else self:nextc(ls); return "TK_NE" end
    ----------------------------------------------------------------
    elseif c == "\"" or c == "'" then
      self:read_string(ls, c, Token)
      return "TK_STRING"
    ----------------------------------------------------------------
    elseif c == "." then
      c = self:save_and_next(ls)
      if self:check_next(ls, ".") then
        if self:check_next(ls, ".") then
          return "TK_DOTS"   -- ...
        else return "TK_CONCAT"   -- ..
        end
      elseif not string.find(c, "%d") then
        return "."
      else
        self:read_numeral(ls, Token)
        return "TK_NUMBER"
      end
    ----------------------------------------------------------------
    elseif c == "EOZ" then
      return "TK_EOS"
    ----------------------------------------------------------------
    else  -- default
      if string.find(c, "%s") then
        -- lua_assert(self:currIsNewline(ls))
        self:nextc(ls)
      elseif string.find(c, "%d") then
        self:read_numeral(ls, Token)
        return "TK_NUMBER"
      elseif string.find(c, "[_%a]") then
        -- identifier or reserved word
        repeat
          c = self:save_and_next(ls)
        until c == "EOZ" or not string.find(c, "[_%w]")
        local ts = ls.buff
        local tok = self.enums[ts]
        if tok then return tok end  -- reserved word?
        Token.seminfo = ts
        return "TK_NAME"
      else
        self:nextc(ls)
        return c  -- single-char tokens (+ - / ...)
      end
    ----------------------------------------------------------------
    end--if c
  end--while
end

return luaX
end
}
--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaY
G2L_MODULES[G2L["75"]] = {
Closure = function()
local script = G2L["75"]
--[[--------------------------------------------------------------------

  lparser.lua
  Lua 5 parser in Lua
  This file is part of Yueliang.

  Copyright (c) 2005-2007 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * some unused C code that were not converted are kept as comments
-- * LUA_COMPAT_VARARG option changed into a comment block
-- * for value/size specific code added, look for 'NOTE: '
--
-- Not implemented:
-- * luaX_newstring not needed by this Lua implementation
-- * luaG_checkcode() in assert is not currently implemented
--
-- Added:
-- * some constants added from various header files
-- * luaY.LUA_QS used in error_expected, check_match (from luaconf.h)
-- * luaY:LUA_QL needed for error messages (from luaconf.h)
-- * luaY:growvector (from lmem.h) -- skeleton only, limit checking
-- * luaY.SHRT_MAX (from <limits.h>) for registerlocalvar
-- * luaY:newproto (from lfunc.c)
-- * luaY:int2fb (from lobject.c)
-- * NOTE: HASARG_MASK, for implementing a VARARG_HASARG bit operation
-- * NOTE: value-specific code for VARARG_NEEDSARG to replace a bitop
--
-- Changed in 5.1.x:
-- * various code changes are not detailed...
-- * names of constants may have changed, e.g. added a LUAI_ prefix
-- * struct expkind: added VKNUM, VVARARG; VCALL's info changed?
-- * struct expdesc: added nval
-- * struct FuncState: upvalues data type changed to upvaldesc
-- * macro hasmultret is new
-- * function checklimit moved to parser from lexer
-- * functions anchor_token, errorlimit, checknext are new
-- * checknext is new, equivalent to 5.0.x's check, see check too
-- * luaY:next and luaY:lookahead moved to lexer
-- * break keyword no longer skipped in luaY:breakstat
-- * function new_localvarstr replaced by new_localvarliteral
-- * registerlocalvar limits local variables to SHRT_MAX
-- * create_local deleted, new_localvarliteral used instead
-- * constant LUAI_MAXUPVALUES increased to 60
-- * constants MAXPARAMS, LUA_MAXPARSERLEVEL, MAXSTACK removed
-- * function interface changed: singlevaraux, singlevar
-- * enterlevel and leavelevel uses nCcalls to track call depth
-- * added a name argument to main entry function, luaY:parser
-- * function luaY_index changed to yindex
-- * luaY:int2fb()'s table size encoding format has been changed
-- * luaY:log2() no longer needed for table constructors
-- * function code_params deleted, functionality folded in parlist
-- * vararg flags handling (is_vararg) changes; also see VARARG_*
-- * LUA_COMPATUPSYNTAX section for old-style upvalues removed
-- * repeatstat() calls chunk() instead of block()
-- * function interface changed: cond, test_then_block
-- * while statement implementation considerably simplified; MAXEXPWHILE
--   and EXTRAEXP no longer required, no limits to the complexity of a
--   while condition
-- * repeat, forbody statement implementation has major changes,
--   mostly due to new scoping behaviour of local variables
-- * OPR_MULT renamed to OPR_MUL
----------------------------------------------------------------------]]

--requires luaP, luaX, luaK
local luaY = {}
local luaX = require(script.Parent.LuaX)
local luaK = require(script.Parent.LuaK)(luaY)
local luaP = require(script.Parent.LuaP)

--[[--------------------------------------------------------------------
-- Expression descriptor
-- * expkind changed to string constants; luaY:assignment was the only
--   function to use a relational operator with this enumeration
-- VVOID       -- no value
-- VNIL        -- no value
-- VTRUE       -- no value
-- VFALSE      -- no value
-- VK          -- info = index of constant in 'k'
-- VKNUM       -- nval = numerical value
-- VLOCAL      -- info = local register
-- VUPVAL,     -- info = index of upvalue in 'upvalues'
-- VGLOBAL     -- info = index of table; aux = index of global name in 'k'
-- VINDEXED    -- info = table register; aux = index register (or 'k')
-- VJMP        -- info = instruction pc
-- VRELOCABLE  -- info = instruction pc
-- VNONRELOC   -- info = result register
-- VCALL       -- info = instruction pc
-- VVARARG     -- info = instruction pc
} ----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- * expdesc in Lua 5.1.x has a union u and another struct s; this Lua
--   implementation ignores all instances of u and s usage
-- struct expdesc:
--   k  -- (enum: expkind)
--   info, aux -- (int, int)
--   nval -- (lua_Number)
--   t  -- patch list of 'exit when true'
--   f  -- patch list of 'exit when false'
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct upvaldesc:
--   k  -- (lu_byte)
--   info -- (lu_byte)
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- state needed to generate code for a given function
-- struct FuncState:
--   f  -- current function header (table: Proto)
--   h  -- table to find (and reuse) elements in 'k' (table: Table)
--   prev  -- enclosing function (table: FuncState)
--   ls  -- lexical state (table: LexState)
--   L  -- copy of the Lua state (table: lua_State)
--   bl  -- chain of current blocks (table: BlockCnt)
--   pc  -- next position to code (equivalent to 'ncode')
--   lasttarget   -- 'pc' of last 'jump target'
--   jpc  -- list of pending jumps to 'pc'
--   freereg  -- first free register
--   nk  -- number of elements in 'k'
--   np  -- number of elements in 'p'
--   nlocvars  -- number of elements in 'locvars'
--   nactvar  -- number of active local variables
--   upvalues[LUAI_MAXUPVALUES]  -- upvalues (table: upvaldesc)
--   actvar[LUAI_MAXVARS]  -- declared-variable stack
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- constants used by parser
-- * picks up duplicate values from luaX if required
------------------------------------------------------------------------

luaY.LUA_QS = luaX.LUA_QS or "'%s'"  -- (from luaconf.h)

luaY.SHRT_MAX = 32767 -- (from <limits.h>)
luaY.LUAI_MAXVARS = 200  -- (luaconf.h)
luaY.LUAI_MAXUPVALUES = 60  -- (luaconf.h)
luaY.MAX_INT = luaX.MAX_INT or 2147483645  -- (from llimits.h)
  -- * INT_MAX-2 for 32-bit systems
luaY.LUAI_MAXCCALLS = 200  -- (from luaconf.h)

luaY.VARARG_HASARG = 1  -- (from lobject.h)
-- NOTE: HASARG_MASK is value-specific
luaY.HASARG_MASK = 2 -- this was added for a bitop in parlist()
luaY.VARARG_ISVARARG = 2
-- NOTE: there is some value-specific code that involves VARARG_NEEDSARG
luaY.VARARG_NEEDSARG = 4

luaY.LUA_MULTRET = -1  -- (lua.h)

--[[--------------------------------------------------------------------
-- other functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- LUA_QL describes how error messages quote program elements.
-- CHANGE it if you want a different appearance. (from luaconf.h)
------------------------------------------------------------------------
function luaY:LUA_QL(x)
  return "'"..x.."'"
end

------------------------------------------------------------------------
-- this is a stripped-down luaM_growvector (from lmem.h) which is a
-- macro based on luaM_growaux (in lmem.c); all the following does is
-- reproduce the size limit checking logic of the original function
-- so that error behaviour is identical; all arguments preserved for
-- convenience, even those which are unused
-- * set the t field to nil, since this originally does a sizeof(t)
-- * size (originally a pointer) is never updated, their final values
--   are set by luaY:close_func(), so overall things should still work
------------------------------------------------------------------------
function luaY:growvector(L, v, nelems, size, t, limit, e)
  if nelems >= limit then
    error(e)  -- was luaG_runerror
  end
end

------------------------------------------------------------------------
-- initialize a new function prototype structure (from lfunc.c)
-- * used only in open_func()
------------------------------------------------------------------------
function luaY:newproto(L)
  local f = {} -- Proto
  -- luaC_link(L, obj2gco(f), LUA_TPROTO); /* GC */
  f.k = {}
  f.sizek = 0
  f.p = {}
  f.sizep = 0
  f.code = {}
  f.sizecode = 0
  f.sizelineinfo = 0
  f.sizeupvalues = 0
  f.nups = 0
  f.upvalues = {}
  f.numparams = 0
  f.is_vararg = 0
  f.maxstacksize = 0
  f.lineinfo = {}
  f.sizelocvars = 0
  f.locvars = {}
  f.lineDefined = 0
  f.lastlinedefined = 0
  f.source = nil
  return f
end

------------------------------------------------------------------------
-- converts an integer to a "floating point byte", represented as
-- (eeeeexxx), where the real value is (1xxx) * 2^(eeeee - 1) if
-- eeeee != 0 and (xxx) otherwise.
------------------------------------------------------------------------
function luaY:int2fb(x)
  local e = 0  -- exponent
  while x >= 16 do
    x = math.floor((x + 1) / 2)
    e = e + 1
  end
  if x < 8 then
    return x
  else
    return ((e + 1) * 8) + (x - 8)
  end
end

--[[--------------------------------------------------------------------
-- parser functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- true of the kind of expression produces multiple return values
------------------------------------------------------------------------
function luaY:hasmultret(k)
  return k == "VCALL" or k == "VVARARG"
end

------------------------------------------------------------------------
-- convenience function to access active local i, returns entry
------------------------------------------------------------------------
function luaY:getlocvar(fs, i)
  return fs.f.locvars[ fs.actvar[i] ]
end

------------------------------------------------------------------------
-- check a limit, string m provided as an error message
------------------------------------------------------------------------
function luaY:checklimit(fs, v, l, m)
  if v > l then self:errorlimit(fs, l, m) end
end

--[[--------------------------------------------------------------------
-- nodes for block list (list of active blocks)
-- struct BlockCnt:
--   previous  -- chain (table: BlockCnt)
--   breaklist  -- list of jumps out of this loop
--   nactvar  -- # active local variables outside the breakable structure
--   upval  -- true if some variable in the block is an upvalue (boolean)
--   isbreakable  -- true if 'block' is a loop (boolean)
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- prototypes for recursive non-terminal functions
------------------------------------------------------------------------
-- prototypes deleted; not required in Lua

------------------------------------------------------------------------
-- reanchor if last token is has a constant string, see close_func()
-- * used only in close_func()
------------------------------------------------------------------------
function luaY:anchor_token(ls)
  if ls.t.token == "TK_NAME" or ls.t.token == "TK_STRING" then
    -- not relevant to Lua implementation of parser
    -- local ts = ls.t.seminfo
    -- luaX_newstring(ls, getstr(ts), ts->tsv.len); /* C */
  end
end

------------------------------------------------------------------------
-- throws a syntax error if token expected is not there
------------------------------------------------------------------------
function luaY:error_expected(ls, token)
  luaX:syntaxerror(ls,
    string.format(self.LUA_QS.." expected", luaX:token2str(ls, token)))
end

------------------------------------------------------------------------
-- prepares error message for display, for limits exceeded
-- * used only in checklimit()
------------------------------------------------------------------------
function luaY:errorlimit(fs, limit, what)
  local msg = (fs.f.linedefined == 0) and
    string.format("main function has more than %d %s", limit, what) or
    string.format("function at line %d has more than %d %s",
                  fs.f.linedefined, limit, what)
  luaX:lexerror(fs.ls, msg, 0)
end

------------------------------------------------------------------------
-- tests for a token, returns outcome
-- * return value changed to boolean
------------------------------------------------------------------------
function luaY:testnext(ls, c)
  if ls.t.token == c then
    luaX:next(ls)
    return true
  else
    return false
  end
end

------------------------------------------------------------------------
-- check for existence of a token, throws error if not found
------------------------------------------------------------------------
function luaY:check(ls, c)
  if ls.t.token ~= c then
    self:error_expected(ls, c)
  end
end

------------------------------------------------------------------------
-- verify existence of a token, then skip it
------------------------------------------------------------------------
function luaY:checknext(ls, c)
  self:check(ls, c)
  luaX:next(ls)
end

------------------------------------------------------------------------
-- throws error if condition not matched
------------------------------------------------------------------------
function luaY:check_condition(ls, c, msg)
  if not c then luaX:syntaxerror(ls, msg) end
end

------------------------------------------------------------------------
-- verifies token conditions are met or else throw error
------------------------------------------------------------------------
function luaY:check_match(ls, what, who, where)
  if not self:testnext(ls, what) then
    if where == ls.linenumber then
      self:error_expected(ls, what)
    else
      luaX:syntaxerror(ls, string.format(
        self.LUA_QS.." expected (to close "..self.LUA_QS.." at line %d)",
        luaX:token2str(ls, what), luaX:token2str(ls, who), where))
    end
  end
end

------------------------------------------------------------------------
-- expect that token is a name, return the name
------------------------------------------------------------------------
function luaY:str_checkname(ls)
  self:check(ls, "TK_NAME")
  local ts = ls.t.seminfo
  luaX:next(ls)
  return ts
end

------------------------------------------------------------------------
-- initialize a struct expdesc, expression description data structure
------------------------------------------------------------------------
function luaY:init_exp(e, k, i)
  e.f, e.t = luaK.NO_JUMP, luaK.NO_JUMP
  e.k = k
  e.info = i
end

------------------------------------------------------------------------
-- adds given string s in string pool, sets e as VK
------------------------------------------------------------------------
function luaY:codestring(ls, e, s)
  self:init_exp(e, "VK", luaK:stringK(ls.fs, s))
end

------------------------------------------------------------------------
-- consume a name token, adds it to string pool, sets e as VK
------------------------------------------------------------------------
function luaY:checkname(ls, e)
  self:codestring(ls, e, self:str_checkname(ls))
end

------------------------------------------------------------------------
-- creates struct entry for a local variable
-- * used only in new_localvar()
------------------------------------------------------------------------
function luaY:registerlocalvar(ls, varname)
  local fs = ls.fs
  local f = fs.f
  self:growvector(ls.L, f.locvars, fs.nlocvars, f.sizelocvars,
                  nil, self.SHRT_MAX, "too many local variables")
  -- loop to initialize empty f.locvar positions not required
  f.locvars[fs.nlocvars] = {} -- LocVar
  f.locvars[fs.nlocvars].varname = varname
  -- luaC_objbarrier(ls.L, f, varname) /* GC */
  local nlocvars = fs.nlocvars
  fs.nlocvars = fs.nlocvars + 1
  return nlocvars
end

------------------------------------------------------------------------
-- creates a new local variable given a name and an offset from nactvar
-- * used in fornum(), forlist(), parlist(), body()
------------------------------------------------------------------------
function luaY:new_localvarliteral(ls, v, n)
  self:new_localvar(ls, v, n)
end

------------------------------------------------------------------------
-- register a local variable, set in active variable list
------------------------------------------------------------------------
function luaY:new_localvar(ls, name, n)
  local fs = ls.fs
  self:checklimit(fs, fs.nactvar + n + 1, self.LUAI_MAXVARS, "local variables")
  fs.actvar[fs.nactvar + n] = self:registerlocalvar(ls, name)
end

------------------------------------------------------------------------
-- adds nvars number of new local variables, set debug information
------------------------------------------------------------------------
function luaY:adjustlocalvars(ls, nvars)
  local fs = ls.fs
  fs.nactvar = fs.nactvar + nvars
  for i = nvars, 1, -1 do
    self:getlocvar(fs, fs.nactvar - i).startpc = fs.pc
  end
end

------------------------------------------------------------------------
-- removes a number of locals, set debug information
------------------------------------------------------------------------
function luaY:removevars(ls, tolevel)
  local fs = ls.fs
  while fs.nactvar > tolevel do
    fs.nactvar = fs.nactvar - 1
    self:getlocvar(fs, fs.nactvar).endpc = fs.pc
  end
end

------------------------------------------------------------------------
-- returns an existing upvalue index based on the given name, or
-- creates a new upvalue struct entry and returns the new index
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:indexupvalue(fs, name, v)
  local f = fs.f
  for i = 0, f.nups - 1 do
    if fs.upvalues[i].k == v.k and fs.upvalues[i].info == v.info then
      assert(f.upvalues[i] == name)
      return i
    end
  end
  -- new one
  self:checklimit(fs, f.nups + 1, self.LUAI_MAXUPVALUES, "upvalues")
  self:growvector(fs.L, f.upvalues, f.nups, f.sizeupvalues,
                  nil, self.MAX_INT, "")
  -- loop to initialize empty f.upvalues positions not required
  f.upvalues[f.nups] = name
  -- luaC_objbarrier(fs->L, f, name); /* GC */
  assert(v.k == "VLOCAL" or v.k == "VUPVAL")
  -- this is a partial copy; only k & info fields used
  fs.upvalues[f.nups] = { k = v.k, info = v.info }
  local nups = f.nups
  f.nups = f.nups + 1
  return nups
end

------------------------------------------------------------------------
-- search the local variable namespace of the given fs for a match
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:searchvar(fs, n)
  for i = fs.nactvar - 1, 0, -1 do
    if n == self:getlocvar(fs, i).varname then
      return i
    end
  end
  return -1  -- not found
end

------------------------------------------------------------------------
-- * mark upvalue flags in function states up to a given level
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:markupval(fs, level)
  local bl = fs.bl
  while bl and bl.nactvar > level do bl = bl.previous end
  if bl then bl.upval = true end
end

------------------------------------------------------------------------
-- handle locals, globals and upvalues and related processing
-- * search mechanism is recursive, calls itself to search parents
-- * used only in singlevar()
------------------------------------------------------------------------
function luaY:singlevaraux(fs, n, var, base)
  if fs == nil then  -- no more levels?
    self:init_exp(var, "VGLOBAL", luaP.NO_REG)  -- default is global variable
    return "VGLOBAL"
  else
    local v = self:searchvar(fs, n)  -- look up at current level
    if v >= 0 then
      self:init_exp(var, "VLOCAL", v)
      if base == 0 then
        self:markupval(fs, v)  -- local will be used as an upval
      end
      return "VLOCAL"
    else  -- not found at current level; try upper one
      if self:singlevaraux(fs.prev, n, var, 0) == "VGLOBAL" then
        return "VGLOBAL"
      end
      var.info = self:indexupvalue(fs, n, var)  -- else was LOCAL or UPVAL
      var.k = "VUPVAL"  -- upvalue in this level
      return "VUPVAL"
    end--if v
  end--if fs
end

------------------------------------------------------------------------
-- consume a name token, creates a variable (global|local|upvalue)
-- * used in prefixexp(), funcname()
------------------------------------------------------------------------
function luaY:singlevar(ls, var)
  local varname = self:str_checkname(ls)
  local fs = ls.fs
  if self:singlevaraux(fs, varname, var, 1) == "VGLOBAL" then
    var.info = luaK:stringK(fs, varname)  -- info points to global name
  end
end

------------------------------------------------------------------------
-- adjust RHS to match LHS in an assignment
-- * used in assignment(), forlist(), localstat()
------------------------------------------------------------------------
function luaY:adjust_assign(ls, nvars, nexps, e)
  local fs = ls.fs
  local extra = nvars - nexps
  if self:hasmultret(e.k) then
    extra = extra + 1  -- includes call itself
    if extra <= 0 then extra = 0 end
    luaK:setreturns(fs, e, extra)  -- last exp. provides the difference
    if extra > 1 then luaK:reserveregs(fs, extra - 1) end
  else
    if e.k ~= "VVOID" then luaK:exp2nextreg(fs, e) end  -- close last expression
    if extra > 0 then
      local reg = fs.freereg
      luaK:reserveregs(fs, extra)
      luaK:_nil(fs, reg, extra)
    end
  end
end

------------------------------------------------------------------------
-- tracks and limits parsing depth, assert check at end of parsing
------------------------------------------------------------------------
function luaY:enterlevel(ls)
  ls.L.nCcalls = ls.L.nCcalls + 1
  if ls.L.nCcalls > self.LUAI_MAXCCALLS then
    luaX:lexerror(ls, "chunk has too many syntax levels", 0)
  end
end

------------------------------------------------------------------------
-- tracks parsing depth, a pair with luaY:enterlevel()
------------------------------------------------------------------------
function luaY:leavelevel(ls)
  ls.L.nCcalls = ls.L.nCcalls - 1
end

------------------------------------------------------------------------
-- enters a code unit, initializes elements
------------------------------------------------------------------------
function luaY:enterblock(fs, bl, isbreakable)
  bl.breaklist = luaK.NO_JUMP
  bl.isbreakable = isbreakable
  bl.nactvar = fs.nactvar
  bl.upval = false
  bl.previous = fs.bl
  fs.bl = bl
  assert(fs.freereg == fs.nactvar)
end

------------------------------------------------------------------------
-- leaves a code unit, close any upvalues
------------------------------------------------------------------------
function luaY:leaveblock(fs)
  local bl = fs.bl
  fs.bl = bl.previous
  self:removevars(fs.ls, bl.nactvar)
  if bl.upval then
    luaK:codeABC(fs, "OP_CLOSE", bl.nactvar, 0, 0)
  end
  -- a block either controls scope or breaks (never both)
  assert(not bl.isbreakable or not bl.upval)
  assert(bl.nactvar == fs.nactvar)
  fs.freereg = fs.nactvar  -- free registers
  luaK:patchtohere(fs, bl.breaklist)
end

------------------------------------------------------------------------
-- implement the instantiation of a function prototype, append list of
-- upvalues after the instantiation instruction
-- * used only in body()
------------------------------------------------------------------------
function luaY:pushclosure(ls, func, v)
  local fs = ls.fs
  local f = fs.f
  self:growvector(ls.L, f.p, fs.np, f.sizep, nil,
                  luaP.MAXARG_Bx, "constant table overflow")
  -- loop to initialize empty f.p positions not required
  f.p[fs.np] = func.f
  fs.np = fs.np + 1
  -- luaC_objbarrier(ls->L, f, func->f); /* C */
  self:init_exp(v, "VRELOCABLE", luaK:codeABx(fs, "OP_CLOSURE", 0, fs.np - 1))
  for i = 0, func.f.nups - 1 do
    local o = (func.upvalues[i].k == "VLOCAL") and "OP_MOVE" or "OP_GETUPVAL"
    luaK:codeABC(fs, o, 0, func.upvalues[i].info, 0)
  end
end

------------------------------------------------------------------------
-- opening of a function
------------------------------------------------------------------------
function luaY:open_func(ls, fs)
  local L = ls.L
  local f = self:newproto(ls.L)
  fs.f = f
  fs.prev = ls.fs  -- linked list of funcstates
  fs.ls = ls
  fs.L = L
  ls.fs = fs
  fs.pc = 0
  fs.lasttarget = -1
  fs.jpc = luaK.NO_JUMP
  fs.freereg = 0
  fs.nk = 0
  fs.np = 0
  fs.nlocvars = 0
  fs.nactvar = 0
  fs.bl = nil
  f.source = ls.source
  f.maxstacksize = 2  -- registers 0/1 are always valid
  fs.h = {}  -- constant table; was luaH_new call
  -- anchor table of constants and prototype (to avoid being collected)
  -- sethvalue2s(L, L->top, fs->h); incr_top(L); /* C */
  -- setptvalue2s(L, L->top, f); incr_top(L);
end

------------------------------------------------------------------------
-- closing of a function
------------------------------------------------------------------------
function luaY:close_func(ls)
  local L = ls.L
  local fs = ls.fs
  local f = fs.f
  self:removevars(ls, 0)
  luaK:ret(fs, 0, 0)  -- final return
  -- luaM_reallocvector deleted for f->code, f->lineinfo, f->k, f->p,
  -- f->locvars, f->upvalues; not required for Lua table arrays
  f.sizecode = fs.pc
  f.sizelineinfo = fs.pc
  f.sizek = fs.nk
  f.sizep = fs.np
  f.sizelocvars = fs.nlocvars
  f.sizeupvalues = f.nups
  --assert(luaG_checkcode(f))  -- currently not implemented
  assert(fs.bl == nil)
  ls.fs = fs.prev
  -- the following is not required for this implementation; kept here
  -- for completeness
  -- L->top -= 2;  /* remove table and prototype from the stack */
  -- last token read was anchored in defunct function; must reanchor it
  if fs then self:anchor_token(ls) end
end

------------------------------------------------------------------------
-- parser initialization function
-- * note additional sub-tables needed for LexState, FuncState
------------------------------------------------------------------------
function luaY:parser(L, z, buff, name)
  local lexstate = {}  -- LexState
        lexstate.t = {}
        lexstate.lookahead = {}
  local funcstate = {}  -- FuncState
        funcstate.upvalues = {}
        funcstate.actvar = {}
  -- the following nCcalls initialization added for convenience
  L.nCcalls = 0
  lexstate.buff = buff
  luaX:setinput(L, lexstate, z, name)
  self:open_func(lexstate, funcstate)
  funcstate.f.is_vararg = self.VARARG_ISVARARG  -- main func. is always vararg
  luaX:next(lexstate)  -- read first token
  self:chunk(lexstate)
  self:check(lexstate, "TK_EOS")
  self:close_func(lexstate)
  assert(funcstate.prev == nil)
  assert(funcstate.f.nups == 0)
  assert(lexstate.fs == nil)
  return funcstate.f
end

--[[--------------------------------------------------------------------
-- GRAMMAR RULES
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parse a function name suffix, for function call specifications
-- * used in primaryexp(), funcname()
------------------------------------------------------------------------
function luaY:field(ls, v)
  -- field -> ['.' | ':'] NAME
  local fs = ls.fs
  local key = {}  -- expdesc
  luaK:exp2anyreg(fs, v)
  luaX:next(ls)  -- skip the dot or colon
  self:checkname(ls, key)
  luaK:indexed(fs, v, key)
end

------------------------------------------------------------------------
-- parse a table indexing suffix, for constructors, expressions
-- * used in recfield(), primaryexp()
------------------------------------------------------------------------
function luaY:yindex(ls, v)
  -- index -> '[' expr ']'
  luaX:next(ls)  -- skip the '['
  self:expr(ls, v)
  luaK:exp2val(ls.fs, v)
  self:checknext(ls, "]")
end

--[[--------------------------------------------------------------------
-- Rules for Constructors
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct ConsControl:
--   v  -- last list item read (table: struct expdesc)
--   t  -- table descriptor (table: struct expdesc)
--   nh  -- total number of 'record' elements
--   na  -- total number of array elements
--   tostore  -- number of array elements pending to be stored
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parse a table record (hash) field
-- * used in constructor()
------------------------------------------------------------------------
function luaY:recfield(ls, cc)
  -- recfield -> (NAME | '['exp1']') = exp1
  local fs = ls.fs
  local reg = ls.fs.freereg
  local key, val = {}, {}  -- expdesc
  if ls.t.token == "TK_NAME" then
    self:checklimit(fs, cc.nh, self.MAX_INT, "items in a constructor")
    self:checkname(ls, key)
  else  -- ls->t.token == '['
    self:yindex(ls, key)
  end
  cc.nh = cc.nh + 1
  self:checknext(ls, "=")
  local rkkey = luaK:exp2RK(fs, key)
  self:expr(ls, val)
  luaK:codeABC(fs, "OP_SETTABLE", cc.t.info, rkkey, luaK:exp2RK(fs, val))
  fs.freereg = reg  -- free registers
end

------------------------------------------------------------------------
-- emit a set list instruction if enough elements (LFIELDS_PER_FLUSH)
-- * used in constructor()
------------------------------------------------------------------------
function luaY:closelistfield(fs, cc)
  if cc.v.k == "VVOID" then return end  -- there is no list item
  luaK:exp2nextreg(fs, cc.v)
  cc.v.k = "VVOID"
  if cc.tostore == luaP.LFIELDS_PER_FLUSH then
    luaK:setlist(fs, cc.t.info, cc.na, cc.tostore)  -- flush
    cc.tostore = 0  -- no more items pending
  end
end

------------------------------------------------------------------------
-- emit a set list instruction at the end of parsing list constructor
-- * used in constructor()
------------------------------------------------------------------------
function luaY:lastlistfield(fs, cc)
  if cc.tostore == 0 then return end
  if self:hasmultret(cc.v.k) then
    luaK:setmultret(fs, cc.v)
    luaK:setlist(fs, cc.t.info, cc.na, self.LUA_MULTRET)
    cc.na = cc.na - 1  -- do not count last expression (unknown number of elements)
  else
    if cc.v.k ~= "VVOID" then
      luaK:exp2nextreg(fs, cc.v)
    end
    luaK:setlist(fs, cc.t.info, cc.na, cc.tostore)
  end
end

------------------------------------------------------------------------
-- parse a table list (array) field
-- * used in constructor()
------------------------------------------------------------------------
function luaY:listfield(ls, cc)
  self:expr(ls, cc.v)
  self:checklimit(ls.fs, cc.na, self.MAX_INT, "items in a constructor")
  cc.na = cc.na + 1
  cc.tostore = cc.tostore + 1
end

------------------------------------------------------------------------
-- parse a table constructor
-- * used in funcargs(), simpleexp()
------------------------------------------------------------------------
function luaY:constructor(ls, t)
  -- constructor -> '{' [ field { fieldsep field } [ fieldsep ] ] '}'
  -- field -> recfield | listfield
  -- fieldsep -> ',' | ';'
  local fs = ls.fs
  local line = ls.linenumber
  local pc = luaK:codeABC(fs, "OP_NEWTABLE", 0, 0, 0)
  local cc = {}  -- ConsControl
        cc.v = {}
  cc.na, cc.nh, cc.tostore = 0, 0, 0
  cc.t = t
  self:init_exp(t, "VRELOCABLE", pc)
  self:init_exp(cc.v, "VVOID", 0)  -- no value (yet)
  luaK:exp2nextreg(ls.fs, t)  -- fix it at stack top (for gc)
  self:checknext(ls, "{")
  repeat
    assert(cc.v.k == "VVOID" or cc.tostore > 0)
    if ls.t.token == "}" then break end
    self:closelistfield(fs, cc)
    local c = ls.t.token

    if c == "TK_NAME" then  -- may be listfields or recfields
      luaX:lookahead(ls)
      if ls.lookahead.token ~= "=" then  -- expression?
        self:listfield(ls, cc)
      else
        self:recfield(ls, cc)
      end
    elseif c == "[" then  -- constructor_item -> recfield
      self:recfield(ls, cc)
    else  -- constructor_part -> listfield
      self:listfield(ls, cc)
    end
  until not self:testnext(ls, ",") and not self:testnext(ls, ";")
  self:check_match(ls, "}", "{", line)
  self:lastlistfield(fs, cc)
  luaP:SETARG_B(fs.f.code[pc], self:int2fb(cc.na)) -- set initial array size
  luaP:SETARG_C(fs.f.code[pc], self:int2fb(cc.nh)) -- set initial table size
end

-- }======================================================================

------------------------------------------------------------------------
-- parse the arguments (parameters) of a function declaration
-- * used in body()
------------------------------------------------------------------------
function luaY:parlist(ls)
  -- parlist -> [ param { ',' param } ]
  local fs = ls.fs
  local f = fs.f
  local nparams = 0
  f.is_vararg = 0
  if ls.t.token ~= ")" then  -- is 'parlist' not empty?
    repeat
      local c = ls.t.token
      if c == "TK_NAME" then  -- param -> NAME
        self:new_localvar(ls, self:str_checkname(ls), nparams)
        nparams = nparams + 1
      elseif c == "TK_DOTS" then  -- param -> `...'
        luaX:next(ls)
-- [[
-- #if defined(LUA_COMPAT_VARARG)
        -- use `arg' as default name
        self:new_localvarliteral(ls, "arg", nparams)
        nparams = nparams + 1
        f.is_vararg = self.VARARG_HASARG + self.VARARG_NEEDSARG
-- #endif
--]]
        f.is_vararg = f.is_vararg + self.VARARG_ISVARARG
      else
        luaX:syntaxerror(ls, "<name> or "..self:LUA_QL("...").." expected")
      end
    until f.is_vararg ~= 0 or not self:testnext(ls, ",")
  end--if
  self:adjustlocalvars(ls, nparams)
  -- NOTE: the following works only when HASARG_MASK is 2!
  f.numparams = fs.nactvar - (f.is_vararg % self.HASARG_MASK)
  luaK:reserveregs(fs, fs.nactvar)  -- reserve register for parameters
end

------------------------------------------------------------------------
-- parse function declaration body
-- * used in simpleexp(), localfunc(), funcstat()
------------------------------------------------------------------------
function luaY:body(ls, e, needself, line)
  -- body ->  '(' parlist ')' chunk END
  local new_fs = {}  -- FuncState
        new_fs.upvalues = {}
        new_fs.actvar = {}
  self:open_func(ls, new_fs)
  new_fs.f.lineDefined = line
  self:checknext(ls, "(")
  if needself then
    self:new_localvarliteral(ls, "self", 0)
    self:adjustlocalvars(ls, 1)
  end
  self:parlist(ls)
  self:checknext(ls, ")")
  self:chunk(ls)
  new_fs.f.lastlinedefined = ls.linenumber
  self:check_match(ls, "TK_END", "TK_FUNCTION", line)
  self:close_func(ls)
  self:pushclosure(ls, new_fs, e)
end

------------------------------------------------------------------------
-- parse a list of comma-separated expressions
-- * used is multiple locations
------------------------------------------------------------------------
function luaY:explist1(ls, v)
  -- explist1 -> expr { ',' expr }
  local n = 1  -- at least one expression
  self:expr(ls, v)
  while self:testnext(ls, ",") do
    luaK:exp2nextreg(ls.fs, v)
    self:expr(ls, v)
    n = n + 1
  end
  return n
end

------------------------------------------------------------------------
-- parse the parameters of a function call
-- * contrast with parlist(), used in function declarations
-- * used in primaryexp()
------------------------------------------------------------------------
function luaY:funcargs(ls, f)
  local fs = ls.fs
  local args = {}  -- expdesc
  local nparams
  local line = ls.linenumber
  local c = ls.t.token
  if c == "(" then  -- funcargs -> '(' [ explist1 ] ')'
    if line ~= ls.lastline then
      luaX:syntaxerror(ls, "ambiguous syntax (function call x new statement)")
    end
    luaX:next(ls)
    if ls.t.token == ")" then  -- arg list is empty?
      args.k = "VVOID"
    else
      self:explist1(ls, args)
      luaK:setmultret(fs, args)
    end
    self:check_match(ls, ")", "(", line)
  elseif c == "{" then  -- funcargs -> constructor
    self:constructor(ls, args)
  elseif c == "TK_STRING" then  -- funcargs -> STRING
    self:codestring(ls, args, ls.t.seminfo)
    luaX:next(ls)  -- must use 'seminfo' before 'next'
  else
    luaX:syntaxerror(ls, "function arguments expected")
    return
  end
  assert(f.k == "VNONRELOC")
  local base = f.info  -- base register for call
  if self:hasmultret(args.k) then
    nparams = self.LUA_MULTRET  -- open call
  else
    if args.k ~= "VVOID" then
      luaK:exp2nextreg(fs, args)  -- close last argument
    end
    nparams = fs.freereg - (base + 1)
  end
  self:init_exp(f, "VCALL", luaK:codeABC(fs, "OP_CALL", base, nparams + 1, 2))
  luaK:fixline(fs, line)
  fs.freereg = base + 1  -- call remove function and arguments and leaves
                         -- (unless changed) one result
end

--[[--------------------------------------------------------------------
-- Expression parsing
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parses an expression in parentheses or a single variable
-- * used in primaryexp()
------------------------------------------------------------------------
function luaY:prefixexp(ls, v)
  -- prefixexp -> NAME | '(' expr ')'
  local c = ls.t.token
  if c == "(" then
    local line = ls.linenumber
    luaX:next(ls)
    self:expr(ls, v)
    self:check_match(ls, ")", "(", line)
    luaK:dischargevars(ls.fs, v)
  elseif c == "TK_NAME" then
    self:singlevar(ls, v)
  else
    luaX:syntaxerror(ls, "unexpected symbol")
  end--if c
  return
end

------------------------------------------------------------------------
-- parses a prefixexp (an expression in parentheses or a single variable)
-- or a function call specification
-- * used in simpleexp(), assignment(), exprstat()
------------------------------------------------------------------------
function luaY:primaryexp(ls, v)
  -- primaryexp ->
  --    prefixexp { '.' NAME | '[' exp ']' | ':' NAME funcargs | funcargs }
  local fs = ls.fs
  self:prefixexp(ls, v)
  while true do
    local c = ls.t.token
    if c == "." then  -- field
      self:field(ls, v)
    elseif c == "[" then  -- '[' exp1 ']'
      local key = {}  -- expdesc
      luaK:exp2anyreg(fs, v)
      self:yindex(ls, key)
      luaK:indexed(fs, v, key)
    elseif c == ":" then  -- ':' NAME funcargs
      local key = {}  -- expdesc
      luaX:next(ls)
      self:checkname(ls, key)
      luaK:_self(fs, v, key)
      self:funcargs(ls, v)
    elseif c == "(" or c == "TK_STRING" or c == "{" then  -- funcargs
      luaK:exp2nextreg(fs, v)
      self:funcargs(ls, v)
    else
      return
    end--if c
  end--while
end

------------------------------------------------------------------------
-- parses general expression types, constants handled here
-- * used in subexpr()
------------------------------------------------------------------------
function luaY:simpleexp(ls, v)
  -- simpleexp -> NUMBER | STRING | NIL | TRUE | FALSE | ... |
  --              constructor | FUNCTION body | primaryexp
  local c = ls.t.token
  if c == "TK_NUMBER" then
    self:init_exp(v, "VKNUM", 0)
    v.nval = ls.t.seminfo
  elseif c == "TK_STRING" then
    self:codestring(ls, v, ls.t.seminfo)
  elseif c == "TK_NIL" then
    self:init_exp(v, "VNIL", 0)
  elseif c == "TK_TRUE" then
    self:init_exp(v, "VTRUE", 0)
  elseif c == "TK_FALSE" then
    self:init_exp(v, "VFALSE", 0)
  elseif c == "TK_DOTS" then  -- vararg
    local fs = ls.fs
    self:check_condition(ls, fs.f.is_vararg ~= 0,
                    "cannot use "..self:LUA_QL("...").." outside a vararg function");
    -- NOTE: the following substitutes for a bitop, but is value-specific
    local is_vararg = fs.f.is_vararg
    if is_vararg >= self.VARARG_NEEDSARG then
      fs.f.is_vararg = is_vararg - self.VARARG_NEEDSARG  -- don't need 'arg'
    end
    self:init_exp(v, "VVARARG", luaK:codeABC(fs, "OP_VARARG", 0, 1, 0))
  elseif c == "{" then  -- constructor
    self:constructor(ls, v)
    return
  elseif c == "TK_FUNCTION" then
    luaX:next(ls)
    self:body(ls, v, false, ls.linenumber)
    return
  else
    self:primaryexp(ls, v)
    return
  end--if c
  luaX:next(ls)
end

------------------------------------------------------------------------
-- Translates unary operators tokens if found, otherwise returns
-- OPR_NOUNOPR. getunopr() and getbinopr() are used in subexpr().
-- * used in subexpr()
------------------------------------------------------------------------
function luaY:getunopr(op)
  if op == "TK_NOT" then
    return "OPR_NOT"
  elseif op == "-" then
    return "OPR_MINUS"
  elseif op == "#" then
    return "OPR_LEN"
  else
    return "OPR_NOUNOPR"
  end
end

------------------------------------------------------------------------
-- Translates binary operator tokens if found, otherwise returns
-- OPR_NOBINOPR. Code generation uses OPR_* style tokens.
-- * used in subexpr()
------------------------------------------------------------------------
luaY.getbinopr_table = {
  ["+"] = "OPR_ADD",
  ["-"] = "OPR_SUB",
  ["*"] = "OPR_MUL",
  ["/"] = "OPR_DIV",
  ["%"] = "OPR_MOD",
  ["^"] = "OPR_POW",
  ["TK_CONCAT"] = "OPR_CONCAT",
  ["TK_NE"] = "OPR_NE",
  ["TK_EQ"] = "OPR_EQ",
  ["<"] = "OPR_LT",
  ["TK_LE"] = "OPR_LE",
  [">"] = "OPR_GT",
  ["TK_GE"] = "OPR_GE",
  ["TK_AND"] = "OPR_AND",
  ["TK_OR"] = "OPR_OR",
}
function luaY:getbinopr(op)
  local opr = self.getbinopr_table[op]
  if opr then return opr else return "OPR_NOBINOPR" end
end

------------------------------------------------------------------------
-- the following priority table consists of pairs of left/right values
-- for binary operators (was a static const struct); grep for ORDER OPR
-- * the following struct is replaced:
--   static const struct {
--     lu_byte left;  /* left priority for each binary operator */
--     lu_byte right; /* right priority */
--   } priority[] = {  /* ORDER OPR */
------------------------------------------------------------------------
luaY.priority = {
  {6, 6}, {6, 6}, {7, 7}, {7, 7}, {7, 7}, -- `+' `-' `/' `%'
  {10, 9}, {5, 4},                 -- power and concat (right associative)
  {3, 3}, {3, 3},                  -- equality
  {3, 3}, {3, 3}, {3, 3}, {3, 3},  -- order
  {2, 2}, {1, 1}                   -- logical (and/or)
}

luaY.UNARY_PRIORITY = 8  -- priority for unary operators

------------------------------------------------------------------------
-- Parse subexpressions. Includes handling of unary operators and binary
-- operators. A subexpr is given the rhs priority level of the operator
-- immediately left of it, if any (limit is -1 if none,) and if a binop
-- is found, limit is compared with the lhs priority level of the binop
-- in order to determine which executes first.
------------------------------------------------------------------------

------------------------------------------------------------------------
-- subexpr -> (simpleexp | unop subexpr) { binop subexpr }
-- where 'binop' is any binary operator with a priority higher than 'limit'
-- * for priority lookups with self.priority[], 1=left and 2=right
-- * recursively called
-- * used in expr()
------------------------------------------------------------------------
function luaY:subexpr(ls, v, limit)
  self:enterlevel(ls)
  local uop = self:getunopr(ls.t.token)
  if uop ~= "OPR_NOUNOPR" then
    luaX:next(ls)
    self:subexpr(ls, v, self.UNARY_PRIORITY)
    luaK:prefix(ls.fs, uop, v)
  else
    self:simpleexp(ls, v)
  end
  -- expand while operators have priorities higher than 'limit'
  local op = self:getbinopr(ls.t.token)
  while op ~= "OPR_NOBINOPR" and self.priority[luaK.BinOpr[op] + 1][1] > limit do
    local v2 = {}  -- expdesc
    luaX:next(ls)
    luaK:infix(ls.fs, op, v)
    -- read sub-expression with higher priority
    local nextop = self:subexpr(ls, v2, self.priority[luaK.BinOpr[op] + 1][2])
    luaK:posfix(ls.fs, op, v, v2)
    op = nextop
  end
  self:leavelevel(ls)
  return op  -- return first untreated operator
end

------------------------------------------------------------------------
-- Expression parsing starts here. Function subexpr is entered with the
-- left operator (which is non-existent) priority of -1, which is lower
-- than all actual operators. Expr information is returned in parm v.
-- * used in multiple locations
------------------------------------------------------------------------
function luaY:expr(ls, v)
  self:subexpr(ls, v, 0)
end

-- }====================================================================

--[[--------------------------------------------------------------------
-- Rules for Statements
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- checks next token, used as a look-ahead
-- * returns boolean instead of 0|1
-- * used in retstat(), chunk()
------------------------------------------------------------------------
function luaY:block_follow(token)
  if token == "TK_ELSE" or token == "TK_ELSEIF" or token == "TK_END"
     or token == "TK_UNTIL" or token == "TK_EOS" then
    return true
  else
    return false
  end
end

------------------------------------------------------------------------
-- parse a code block or unit
-- * used in multiple functions
------------------------------------------------------------------------
function luaY:block(ls)
  -- block -> chunk
  local fs = ls.fs
  local bl = {}  -- BlockCnt
  self:enterblock(fs, bl, false)
  self:chunk(ls)
  assert(bl.breaklist == luaK.NO_JUMP)
  self:leaveblock(fs)
end

------------------------------------------------------------------------
-- structure to chain all variables in the left-hand side of an
-- assignment
-- struct LHS_assign:
--   prev  -- (table: struct LHS_assign)
--   v  -- variable (global, local, upvalue, or indexed) (table: expdesc)
------------------------------------------------------------------------

------------------------------------------------------------------------
-- check whether, in an assignment to a local variable, the local variable
-- is needed in a previous assignment (to a table). If so, save original
-- local value in a safe place and use this safe copy in the previous
-- assignment.
-- * used in assignment()
------------------------------------------------------------------------
function luaY:check_conflict(ls, lh, v)
  local fs = ls.fs
  local extra = fs.freereg  -- eventual position to save local variable
  local conflict = false
  while lh do
    if lh.v.k == "VINDEXED" then
      if lh.v.info == v.info then  -- conflict?
        conflict = true
        lh.v.info = extra  -- previous assignment will use safe copy
      end
      if lh.v.aux == v.info then  -- conflict?
        conflict = true
        lh.v.aux = extra  -- previous assignment will use safe copy
      end
    end
    lh = lh.prev
  end
  if conflict then
    luaK:codeABC(fs, "OP_MOVE", fs.freereg, v.info, 0)  -- make copy
    luaK:reserveregs(fs, 1)
  end
end

------------------------------------------------------------------------
-- parse a variable assignment sequence
-- * recursively called
-- * used in exprstat()
------------------------------------------------------------------------
function luaY:assignment(ls, lh, nvars)
  local e = {}  -- expdesc
  -- test was: VLOCAL <= lh->v.k && lh->v.k <= VINDEXED
  local c = lh.v.k
  self:check_condition(ls, c == "VLOCAL" or c == "VUPVAL" or c == "VGLOBAL"
                       or c == "VINDEXED", "syntax error")
  if self:testnext(ls, ",") then  -- assignment -> ',' primaryexp assignment
    local nv = {}  -- LHS_assign
          nv.v = {}
    nv.prev = lh
    self:primaryexp(ls, nv.v)
    if nv.v.k == "VLOCAL" then
      self:check_conflict(ls, lh, nv.v)
    end
    self:checklimit(ls.fs, nvars, self.LUAI_MAXCCALLS - ls.L.nCcalls,
                    "variables in assignment")
    self:assignment(ls, nv, nvars + 1)
  else  -- assignment -> '=' explist1
    self:checknext(ls, "=")
    local nexps = self:explist1(ls, e)
    if nexps ~= nvars then
      self:adjust_assign(ls, nvars, nexps, e)
      if nexps > nvars then
        ls.fs.freereg = ls.fs.freereg - (nexps - nvars)  -- remove extra values
      end
    else
      luaK:setoneret(ls.fs, e)  -- close last expression
      luaK:storevar(ls.fs, lh.v, e)
      return  -- avoid default
    end
  end
  self:init_exp(e, "VNONRELOC", ls.fs.freereg - 1)  -- default assignment
  luaK:storevar(ls.fs, lh.v, e)
end

------------------------------------------------------------------------
-- parse condition in a repeat statement or an if control structure
-- * used in repeatstat(), test_then_block()
------------------------------------------------------------------------
function luaY:cond(ls)
  -- cond -> exp
  local v = {}  -- expdesc
  self:expr(ls, v)  -- read condition
  if v.k == "VNIL" then v.k = "VFALSE" end  -- 'falses' are all equal here
  luaK:goiftrue(ls.fs, v)
  return v.f
end

------------------------------------------------------------------------
-- parse a break statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:breakstat(ls)
  -- stat -> BREAK
  local fs = ls.fs
  local bl = fs.bl
  local upval = false
  while bl and not bl.isbreakable do
    if bl.upval then upval = true end
    bl = bl.previous
  end
  if not bl then
    luaX:syntaxerror(ls, "no loop to break")
  end
  if upval then
    luaK:codeABC(fs, "OP_CLOSE", bl.nactvar, 0, 0)
  end
  bl.breaklist = luaK:concat(fs, bl.breaklist, luaK:jump(fs))
end

------------------------------------------------------------------------
-- parse a while-do control structure, body processed by block()
-- * with dynamic array sizes, MAXEXPWHILE + EXTRAEXP limits imposed by
--   the function's implementation can be removed
-- * used in statements()
------------------------------------------------------------------------
function luaY:whilestat(ls, line)
  -- whilestat -> WHILE cond DO block END
  local fs = ls.fs
  local bl = {}  -- BlockCnt
  luaX:next(ls)  -- skip WHILE
  local whileinit = luaK:getlabel(fs)
  local condexit = self:cond(ls)
  self:enterblock(fs, bl, true)
  self:checknext(ls, "TK_DO")
  self:block(ls)
  luaK:patchlist(fs, luaK:jump(fs), whileinit)
  self:check_match(ls, "TK_END", "TK_WHILE", line)
  self:leaveblock(fs)
  luaK:patchtohere(fs, condexit)  -- false conditions finish the loop
end

------------------------------------------------------------------------
-- parse a repeat-until control structure, body parsed by chunk()
-- * used in statements()
------------------------------------------------------------------------
function luaY:repeatstat(ls, line)
  -- repeatstat -> REPEAT block UNTIL cond
  local fs = ls.fs
  local repeat_init = luaK:getlabel(fs)
  local bl1, bl2 = {}, {}  -- BlockCnt
  self:enterblock(fs, bl1, true)  -- loop block
  self:enterblock(fs, bl2, false)  -- scope block
  luaX:next(ls)  -- skip REPEAT
  self:chunk(ls)
  self:check_match(ls, "TK_UNTIL", "TK_REPEAT", line)
  local condexit = self:cond(ls)  -- read condition (inside scope block)
  if not bl2.upval then  -- no upvalues?
    self:leaveblock(fs)  -- finish scope
    luaK:patchlist(ls.fs, condexit, repeat_init)  -- close the loop
  else  -- complete semantics when there are upvalues
    self:breakstat(ls)  -- if condition then break
    luaK:patchtohere(ls.fs, condexit)  -- else...
    self:leaveblock(fs)  -- finish scope...
    luaK:patchlist(ls.fs, luaK:jump(fs), repeat_init)  -- and repeat
  end
  self:leaveblock(fs)  -- finish loop
end

------------------------------------------------------------------------
-- parse the single expressions needed in numerical for loops
-- * used in fornum()
------------------------------------------------------------------------
function luaY:exp1(ls)
  local e = {}  -- expdesc
  self:expr(ls, e)
  local k = e.k
  luaK:exp2nextreg(ls.fs, e)
  return k
end

------------------------------------------------------------------------
-- parse a for loop body for both versions of the for loop
-- * used in fornum(), forlist()
------------------------------------------------------------------------
function luaY:forbody(ls, base, line, nvars, isnum)
  -- forbody -> DO block
  local bl = {}  -- BlockCnt
  local fs = ls.fs
  self:adjustlocalvars(ls, 3)  -- control variables
  self:checknext(ls, "TK_DO")
  local prep = isnum and luaK:codeAsBx(fs, "OP_FORPREP", base, luaK.NO_JUMP)
                     or luaK:jump(fs)
  self:enterblock(fs, bl, false)  -- scope for declared variables
  self:adjustlocalvars(ls, nvars)
  luaK:reserveregs(fs, nvars)
  self:block(ls)
  self:leaveblock(fs)  -- end of scope for declared variables
  luaK:patchtohere(fs, prep)
  local endfor = isnum and luaK:codeAsBx(fs, "OP_FORLOOP", base, luaK.NO_JUMP)
                       or luaK:codeABC(fs, "OP_TFORLOOP", base, 0, nvars)
  luaK:fixline(fs, line)  -- pretend that `OP_FOR' starts the loop
  luaK:patchlist(fs, isnum and endfor or luaK:jump(fs), prep + 1)
end

------------------------------------------------------------------------
-- parse a numerical for loop, calls forbody()
-- * used in forstat()
------------------------------------------------------------------------
function luaY:fornum(ls, varname, line)
  -- fornum -> NAME = exp1,exp1[,exp1] forbody
  local fs = ls.fs
  local base = fs.freereg
  self:new_localvarliteral(ls, "(for index)", 0)
  self:new_localvarliteral(ls, "(for limit)", 1)
  self:new_localvarliteral(ls, "(for step)", 2)
  self:new_localvar(ls, varname, 3)
  self:checknext(ls, '=')
  self:exp1(ls)  -- initial value
  self:checknext(ls, ",")
  self:exp1(ls)  -- limit
  if self:testnext(ls, ",") then
    self:exp1(ls)  -- optional step
  else  -- default step = 1
    luaK:codeABx(fs, "OP_LOADK", fs.freereg, luaK:numberK(fs, 1))
    luaK:reserveregs(fs, 1)
  end
  self:forbody(ls, base, line, 1, true)
end

------------------------------------------------------------------------
-- parse a generic for loop, calls forbody()
-- * used in forstat()
------------------------------------------------------------------------
function luaY:forlist(ls, indexname)
  -- forlist -> NAME {,NAME} IN explist1 forbody
  local fs = ls.fs
  local e = {}  -- expdesc
  local nvars = 0
  local base = fs.freereg
  -- create control variables
  self:new_localvarliteral(ls, "(for generator)", nvars)
  nvars = nvars + 1
  self:new_localvarliteral(ls, "(for state)", nvars)
  nvars = nvars + 1
  self:new_localvarliteral(ls, "(for control)", nvars)
  nvars = nvars + 1
  -- create declared variables
  self:new_localvar(ls, indexname, nvars)
  nvars = nvars + 1
  while self:testnext(ls, ",") do
    self:new_localvar(ls, self:str_checkname(ls), nvars)
    nvars = nvars + 1
  end
  self:checknext(ls, "TK_IN")
  local line = ls.linenumber
  self:adjust_assign(ls, 3, self:explist1(ls, e), e)
  luaK:checkstack(fs, 3)  -- extra space to call generator
  self:forbody(ls, base, line, nvars - 3, false)
end

------------------------------------------------------------------------
-- initial parsing for a for loop, calls fornum() or forlist()
-- * used in statements()
------------------------------------------------------------------------
function luaY:forstat(ls, line)
  -- forstat -> FOR (fornum | forlist) END
  local fs = ls.fs
  local bl = {}  -- BlockCnt
  self:enterblock(fs, bl, true)  -- scope for loop and control variables
  luaX:next(ls)  -- skip `for'
  local varname = self:str_checkname(ls)  -- first variable name
  local c = ls.t.token
  if c == "=" then
    self:fornum(ls, varname, line)
  elseif c == "," or c == "TK_IN" then
    self:forlist(ls, varname)
  else
    luaX:syntaxerror(ls, self:LUA_QL("=").." or "..self:LUA_QL("in").." expected")
  end
  self:check_match(ls, "TK_END", "TK_FOR", line)
  self:leaveblock(fs)  -- loop scope (`break' jumps to this point)
end

------------------------------------------------------------------------
-- parse part of an if control structure, including the condition
-- * used in ifstat()
------------------------------------------------------------------------
function luaY:test_then_block(ls)
  -- test_then_block -> [IF | ELSEIF] cond THEN block
  luaX:next(ls)  -- skip IF or ELSEIF
  local condexit = self:cond(ls)
  self:checknext(ls, "TK_THEN")
  self:block(ls)  -- `then' part
  return condexit
end

------------------------------------------------------------------------
-- parse an if control structure
-- * used in statements()
------------------------------------------------------------------------
function luaY:ifstat(ls, line)
  -- ifstat -> IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END
  local fs = ls.fs
  local escapelist = luaK.NO_JUMP
  local flist = self:test_then_block(ls)  -- IF cond THEN block
  while ls.t.token == "TK_ELSEIF" do
    escapelist = luaK:concat(fs, escapelist, luaK:jump(fs))
    luaK:patchtohere(fs, flist)
    flist = self:test_then_block(ls)  -- ELSEIF cond THEN block
  end
  if ls.t.token == "TK_ELSE" then
    escapelist = luaK:concat(fs, escapelist, luaK:jump(fs))
    luaK:patchtohere(fs, flist)
    luaX:next(ls)  -- skip ELSE (after patch, for correct line info)
    self:block(ls)  -- 'else' part
  else
    escapelist = luaK:concat(fs, escapelist, flist)
  end
  luaK:patchtohere(fs, escapelist)
  self:check_match(ls, "TK_END", "TK_IF", line)
end

------------------------------------------------------------------------
-- parse a local function statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:localfunc(ls)
  local v, b = {}, {}  -- expdesc
  local fs = ls.fs
  self:new_localvar(ls, self:str_checkname(ls), 0)
  self:init_exp(v, "VLOCAL", fs.freereg)
  luaK:reserveregs(fs, 1)
  self:adjustlocalvars(ls, 1)
  self:body(ls, b, false, ls.linenumber)
  luaK:storevar(fs, v, b)
  -- debug information will only see the variable after this point!
  self:getlocvar(fs, fs.nactvar - 1).startpc = fs.pc
end

------------------------------------------------------------------------
-- parse a local variable declaration statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:localstat(ls)
  -- stat -> LOCAL NAME {',' NAME} ['=' explist1]
  local nvars = 0
  local nexps
  local e = {}  -- expdesc
  repeat
    self:new_localvar(ls, self:str_checkname(ls), nvars)
    nvars = nvars + 1
  until not self:testnext(ls, ",")
  if self:testnext(ls, "=") then
    nexps = self:explist1(ls, e)
  else
    e.k = "VVOID"
    nexps = 0
  end
  self:adjust_assign(ls, nvars, nexps, e)
  self:adjustlocalvars(ls, nvars)
end

------------------------------------------------------------------------
-- parse a function name specification
-- * used in funcstat()
------------------------------------------------------------------------
function luaY:funcname(ls, v)
  -- funcname -> NAME {field} [':' NAME]
  local needself = false
  self:singlevar(ls, v)
  while ls.t.token == "." do
    self:field(ls, v)
  end
  if ls.t.token == ":" then
    needself = true
    self:field(ls, v)
  end
  return needself
end

------------------------------------------------------------------------
-- parse a function statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:funcstat(ls, line)
  -- funcstat -> FUNCTION funcname body
  local v, b = {}, {}  -- expdesc
  luaX:next(ls)  -- skip FUNCTION
  local needself = self:funcname(ls, v)
  self:body(ls, b, needself, line)
  luaK:storevar(ls.fs, v, b)
  luaK:fixline(ls.fs, line)  -- definition 'happens' in the first line
end

------------------------------------------------------------------------
-- parse a function call with no returns or an assignment statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:exprstat(ls)
  -- stat -> func | assignment
  local fs = ls.fs
  local v = {}  -- LHS_assign
        v.v = {}
  self:primaryexp(ls, v.v)
  if v.v.k == "VCALL" then  -- stat -> func
    luaP:SETARG_C(luaK:getcode(fs, v.v), 1)  -- call statement uses no results
  else  -- stat -> assignment
    v.prev = nil
    self:assignment(ls, v, 1)
  end
end

------------------------------------------------------------------------
-- parse a return statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:retstat(ls)
  -- stat -> RETURN explist
  local fs = ls.fs
  local e = {}  -- expdesc
  local first, nret  -- registers with returned values
  luaX:next(ls)  -- skip RETURN
  if self:block_follow(ls.t.token) or ls.t.token == ";" then
    first, nret = 0, 0  -- return no values
  else
    nret = self:explist1(ls, e)  -- optional return values
    if self:hasmultret(e.k) then
      luaK:setmultret(fs, e)
      if e.k == "VCALL" and nret == 1 then  -- tail call?
        luaP:SET_OPCODE(luaK:getcode(fs, e), "OP_TAILCALL")
        assert(luaP:GETARG_A(luaK:getcode(fs, e)) == fs.nactvar)
      end
      first = fs.nactvar
      nret = self.LUA_MULTRET  -- return all values
    else
      if nret == 1 then  -- only one single value?
        first = luaK:exp2anyreg(fs, e)
      else
        luaK:exp2nextreg(fs, e)  -- values must go to the 'stack'
        first = fs.nactvar  -- return all 'active' values
        assert(nret == fs.freereg - first)
      end
    end--if
  end--if
  luaK:ret(fs, first, nret)
end

------------------------------------------------------------------------
-- initial parsing for statements, calls a lot of functions
-- * returns boolean instead of 0|1
-- * used in chunk()
------------------------------------------------------------------------
function luaY:statement(ls)
  local line = ls.linenumber  -- may be needed for error messages
  local c = ls.t.token
  if c == "TK_IF" then  -- stat -> ifstat
    self:ifstat(ls, line)
    return false
  elseif c == "TK_WHILE" then  -- stat -> whilestat
    self:whilestat(ls, line)
    return false
  elseif c == "TK_DO" then  -- stat -> DO block END
    luaX:next(ls)  -- skip DO
    self:block(ls)
    self:check_match(ls, "TK_END", "TK_DO", line)
    return false
  elseif c == "TK_FOR" then  -- stat -> forstat
    self:forstat(ls, line)
    return false
  elseif c == "TK_REPEAT" then  -- stat -> repeatstat
    self:repeatstat(ls, line)
    return false
  elseif c == "TK_FUNCTION" then  -- stat -> funcstat
    self:funcstat(ls, line)
    return false
  elseif c == "TK_LOCAL" then  -- stat -> localstat
    luaX:next(ls)  -- skip LOCAL
    if self:testnext(ls, "TK_FUNCTION") then  -- local function?
      self:localfunc(ls)
    else
      self:localstat(ls)
    end
    return false
  elseif c == "TK_RETURN" then  -- stat -> retstat
    self:retstat(ls)
    return true  -- must be last statement
  elseif c == "TK_BREAK" then  -- stat -> breakstat
    luaX:next(ls)  -- skip BREAK
    self:breakstat(ls)
    return true  -- must be last statement
  else
    self:exprstat(ls)
    return false  -- to avoid warnings
  end--if c
end

------------------------------------------------------------------------
-- parse a chunk, which consists of a bunch of statements
-- * used in parser(), body(), block(), repeatstat()
------------------------------------------------------------------------
function luaY:chunk(ls)
  -- chunk -> { stat [';'] }
  local islast = false
  self:enterlevel(ls)
  while not islast and not self:block_follow(ls.t.token) do
    islast = self:statement(ls)
    self:testnext(ls, ";")
    assert(ls.fs.f.maxstacksize >= ls.fs.freereg and
               ls.fs.freereg >= ls.fs.nactvar)
    ls.fs.freereg = ls.fs.nactvar  -- free registers
  end
  self:leavelevel(ls)
end

-- }======================================================================
return luaY
end
}
--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaK
G2L_MODULES[G2L["76"]] = {
Closure = function()
local script = G2L["76"]
--[[--------------------------------------------------------------------

  lcode.lua
  Lua 5 code generator in Lua
  This file is part of Yueliang.

  Copyright (c) 2005-2007 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * one function manipulate a pointer argument with a simple data type
--   (can't be emulated by a table, ambiguous), now returns that value:
--   luaK:concat(fs, l1, l2)
-- * luaM_growvector uses the faux luaY:growvector, for limit checking
-- * some function parameters changed to boolean, additional code
--   translates boolean back to 1/0 for instruction fields
--
-- Not implemented:
-- * NOTE there is a failed assert in luaK:addk, a porting problem
--
-- Added:
-- * constant MAXSTACK from llimits.h
-- * luaK:ttisnumber(o) (from lobject.h)
-- * luaK:nvalue(o) (from lobject.h)
-- * luaK:setnilvalue(o) (from lobject.h)
-- * luaK:setnvalue(o, x) (from lobject.h)
-- * luaK:setbvalue(o, x) (from lobject.h)
-- * luaK:sethvalue(o, x) (from lobject.h), parameter L deleted
-- * luaK:setsvalue(o, x) (from lobject.h), parameter L deleted
-- * luaK:numadd, luaK:numsub, luaK:nummul, luaK:numdiv, luaK:nummod,
--   luaK:numpow, luaK:numunm, luaK:numisnan (from luaconf.h)
-- * copyexp(e1, e2) added in luaK:posfix to copy expdesc struct
--
-- Changed in 5.1.x:
-- * enum BinOpr has a new entry, OPR_MOD
-- * enum UnOpr has a new entry, OPR_LEN
-- * binopistest, unused in 5.0.x, has been deleted
-- * macro setmultret is new
-- * functions isnumeral, luaK_ret, boolK are new
-- * funcion nilK was named nil_constant in 5.0.x
-- * function interface changed: need_value, patchtestreg, concat
-- * TObject now a TValue
-- * functions luaK_setreturns, luaK_setoneret are new
-- * function luaK:setcallreturns deleted, to be replaced by:
--   luaK:setmultret, luaK:ret, luaK:setreturns, luaK:setoneret
-- * functions constfolding, codearith, codecomp are new
-- * luaK:codebinop has been deleted
-- * function luaK_setlist is new
-- * OPR_MULT renamed to OPR_MUL
----------------------------------------------------------------------]]

-- requires luaP, luaX, luaY
local luaK = {}
local luaP = require(script.Parent.LuaP)
local luaX = require(script.Parent.LuaX)

------------------------------------------------------------------------
-- constants used by code generator
------------------------------------------------------------------------
-- maximum stack for a Lua function
luaK.MAXSTACK = 250  -- (from llimits.h)

--[[--------------------------------------------------------------------
-- other functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- emulation of TValue macros (these are from lobject.h)
-- * TValue is a table since lcode passes references around
-- * tt member field removed, using Lua's type() instead
-- * for setsvalue, sethvalue, parameter L (deleted here) in lobject.h
--   is used in an assert for testing, see checkliveness(g,obj)
------------------------------------------------------------------------
function luaK:ttisnumber(o)
  if o then return type(o.value) == "number" else return false end
end
function luaK:nvalue(o) return o.value end
function luaK:setnilvalue(o) o.value = nil end
function luaK:setsvalue(o, x) o.value = x end
luaK.setnvalue = luaK.setsvalue
luaK.sethvalue = luaK.setsvalue
luaK.setbvalue = luaK.setsvalue

------------------------------------------------------------------------
-- The luai_num* macros define the primitive operations over numbers.
-- * this is not the entire set of primitive operations from luaconf.h
-- * used in luaK:constfolding()
------------------------------------------------------------------------
function luaK:numadd(a, b) return a + b end
function luaK:numsub(a, b) return a - b end
function luaK:nummul(a, b) return a * b end
function luaK:numdiv(a, b) return a / b end
function luaK:nummod(a, b) return a % b end
  -- ((a) - floor((a)/(b))*(b)) /* actual, for reference */
function luaK:numpow(a, b) return a ^ b end
function luaK:numunm(a) return -a end
function luaK:numisnan(a) return not a == a end
  -- a NaN cannot equal another NaN

--[[--------------------------------------------------------------------
-- code generator functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- Marks the end of a patch list. It is an invalid value both as an absolute
-- address, and as a list link (would link an element to itself).
------------------------------------------------------------------------
luaK.NO_JUMP = -1

------------------------------------------------------------------------
-- grep "ORDER OPR" if you change these enums
------------------------------------------------------------------------
luaK.BinOpr = {
  OPR_ADD = 0, OPR_SUB = 1, OPR_MUL = 2, OPR_DIV = 3, OPR_MOD = 4, OPR_POW = 5,
  OPR_CONCAT = 6,
  OPR_NE = 7, OPR_EQ = 8,
  OPR_LT = 9, OPR_LE = 10, OPR_GT = 11, OPR_GE = 12,
  OPR_AND = 13, OPR_OR = 14,
  OPR_NOBINOPR = 15,
}

-- * UnOpr is used by luaK:prefix's op argument, but not directly used
--   because the function receives the symbols as strings, e.g. "OPR_NOT"
luaK.UnOpr = {
  OPR_MINUS = 0, OPR_NOT = 1, OPR_LEN = 2, OPR_NOUNOPR = 3
}

------------------------------------------------------------------------
-- returns the instruction object for given e (expdesc), was a macro
------------------------------------------------------------------------
function luaK:getcode(fs, e)
  return fs.f.code[e.info]
end

------------------------------------------------------------------------
-- codes an instruction with a signed Bx (sBx) field, was a macro
-- * used in luaK:jump(), (lparser) luaY:forbody()
------------------------------------------------------------------------
function luaK:codeAsBx(fs, o, A, sBx)
  return self:codeABx(fs, o, A, sBx + luaP.MAXARG_sBx)
end

------------------------------------------------------------------------
-- set the expdesc e instruction for multiple returns, was a macro
------------------------------------------------------------------------
function luaK:setmultret(fs, e)
  self:setreturns(fs, e, luaY.LUA_MULTRET)
end

------------------------------------------------------------------------
-- there is a jump if patch lists are not identical, was a macro
-- * used in luaK:exp2reg(), luaK:exp2anyreg(), luaK:exp2val()
------------------------------------------------------------------------
function luaK:hasjumps(e)
  return e.t ~= e.f
end

------------------------------------------------------------------------
-- true if the expression is a constant number (for constant folding)
-- * used in constfolding(), infix()
------------------------------------------------------------------------
function luaK:isnumeral(e)
  return e.k == "VKNUM" and e.t == self.NO_JUMP and e.f == self.NO_JUMP
end

------------------------------------------------------------------------
-- codes loading of nil, optimization done if consecutive locations
-- * used in luaK:discharge2reg(), (lparser) luaY:adjust_assign()
------------------------------------------------------------------------
function luaK:_nil(fs, from, n)
  if fs.pc > fs.lasttarget then  -- no jumps to current position?
    if fs.pc == 0 then  -- function start?
      if from >= fs.nactvar then
        return  -- positions are already clean
      end
    else
      local previous = fs.f.code[fs.pc - 1]
      if luaP:GET_OPCODE(previous) == "OP_LOADNIL" then
        local pfrom = luaP:GETARG_A(previous)
        local pto = luaP:GETARG_B(previous)
        if pfrom <= from and from <= pto + 1 then  -- can connect both?
          if from + n - 1 > pto then
            luaP:SETARG_B(previous, from + n - 1)
          end
          return
        end
      end
    end
  end
  self:codeABC(fs, "OP_LOADNIL", from, from + n - 1, 0)  -- else no optimization
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:jump(fs)
  local jpc = fs.jpc  -- save list of jumps to here
  fs.jpc = self.NO_JUMP
  local j = self:codeAsBx(fs, "OP_JMP", 0, self.NO_JUMP)
  j = self:concat(fs, j, jpc)  -- keep them on hold
  return j
end

------------------------------------------------------------------------
-- codes a RETURN instruction
-- * used in luaY:close_func(), luaY:retstat()
------------------------------------------------------------------------
function luaK:ret(fs, first, nret)
  self:codeABC(fs, "OP_RETURN", first, nret + 1, 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:jumponcond(), luaK:codecomp()
------------------------------------------------------------------------
function luaK:condjump(fs, op, A, B, C)
  self:codeABC(fs, op, A, B, C)
  return self:jump(fs)
end

------------------------------------------------------------------------
--
-- * used in luaK:patchlistaux(), luaK:concat()
------------------------------------------------------------------------
function luaK:fixjump(fs, pc, dest)
  local jmp = fs.f.code[pc]
  local offset = dest - (pc + 1)
  assert(dest ~= self.NO_JUMP)
  if math.abs(offset) > luaP.MAXARG_sBx then
    luaX:syntaxerror(fs.ls, "control structure too long")
  end
  luaP:SETARG_sBx(jmp, offset)
end

------------------------------------------------------------------------
-- returns current 'pc' and marks it as a jump target (to avoid wrong
-- optimizations with consecutive instructions not in the same basic block).
-- * used in multiple locations
-- * fs.lasttarget tested only by luaK:_nil() when optimizing OP_LOADNIL
------------------------------------------------------------------------
function luaK:getlabel(fs)
  fs.lasttarget = fs.pc
  return fs.pc
end

------------------------------------------------------------------------
--
-- * used in luaK:need_value(), luaK:removevalues(), luaK:patchlistaux(),
--   luaK:concat()
------------------------------------------------------------------------
function luaK:getjump(fs, pc)
  local offset = luaP:GETARG_sBx(fs.f.code[pc])
  if offset == self.NO_JUMP then  -- point to itself represents end of list
    return self.NO_JUMP  -- end of list
  else
    return (pc + 1) + offset  -- turn offset into absolute position
  end
end

------------------------------------------------------------------------
--
-- * used in luaK:need_value(), luaK:patchtestreg(), luaK:invertjump()
------------------------------------------------------------------------
function luaK:getjumpcontrol(fs, pc)
  local pi = fs.f.code[pc]
  local ppi = fs.f.code[pc - 1]
  if pc >= 1 and luaP:testTMode(luaP:GET_OPCODE(ppi)) ~= 0 then
    return ppi
  else
    return pi
  end
end

------------------------------------------------------------------------
-- check whether list has any jump that do not produce a value
-- (or produce an inverted value)
-- * return value changed to boolean
-- * used only in luaK:exp2reg()
------------------------------------------------------------------------
function luaK:need_value(fs, list)
  while list ~= self.NO_JUMP do
    local i = self:getjumpcontrol(fs, list)
    if luaP:GET_OPCODE(i) ~= "OP_TESTSET" then return true end
    list = self:getjump(fs, list)
  end
  return false  -- not found
end

------------------------------------------------------------------------
--
-- * used in luaK:removevalues(), luaK:patchlistaux()
------------------------------------------------------------------------
function luaK:patchtestreg(fs, node, reg)
  local i = self:getjumpcontrol(fs, node)
  if luaP:GET_OPCODE(i) ~= "OP_TESTSET" then
    return false  -- cannot patch other instructions
  end
  if reg ~= luaP.NO_REG and reg ~= luaP:GETARG_B(i) then
    luaP:SETARG_A(i, reg)
  else  -- no register to put value or register already has the value
    -- due to use of a table as i, i cannot be replaced by another table
    -- so the following is required; there is no change to ARG_C
    luaP:SET_OPCODE(i, "OP_TEST")
    local b = luaP:GETARG_B(i)
    luaP:SETARG_A(i, b)
    luaP:SETARG_B(i, 0)
    -- *i = CREATE_ABC(OP_TEST, GETARG_B(*i), 0, GETARG_C(*i)); /* C */
  end
  return true
end

------------------------------------------------------------------------
--
-- * used only in luaK:codenot()
------------------------------------------------------------------------
function luaK:removevalues(fs, list)
  while list ~= self.NO_JUMP do
    self:patchtestreg(fs, list, luaP.NO_REG)
    list = self:getjump(fs, list)
  end
end

------------------------------------------------------------------------
--
-- * used in luaK:dischargejpc(), luaK:patchlist(), luaK:exp2reg()
------------------------------------------------------------------------
function luaK:patchlistaux(fs, list, vtarget, reg, dtarget)
  while list ~= self.NO_JUMP do
    local _next = self:getjump(fs, list)
    if self:patchtestreg(fs, list, reg) then
      self:fixjump(fs, list, vtarget)
    else
      self:fixjump(fs, list, dtarget)  -- jump to default target
    end
    list = _next
  end
end

------------------------------------------------------------------------
--
-- * used only in luaK:code()
------------------------------------------------------------------------
function luaK:dischargejpc(fs)
  self:patchlistaux(fs, fs.jpc, fs.pc, luaP.NO_REG, fs.pc)
  fs.jpc = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:whilestat(), luaY:repeatstat(), luaY:forbody()
------------------------------------------------------------------------
function luaK:patchlist(fs, list, target)
  if target == fs.pc then
    self:patchtohere(fs, list)
  else
    assert(target < fs.pc)
    self:patchlistaux(fs, list, target, luaP.NO_REG, target)
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:patchtohere(fs, list)
  self:getlabel(fs)
  fs.jpc = self:concat(fs, fs.jpc, list)
end

------------------------------------------------------------------------
-- * l1 was a pointer, now l1 is returned and callee assigns the value
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:concat(fs, l1, l2)
  if l2 == self.NO_JUMP then return l1
  elseif l1 == self.NO_JUMP then
    return l2
  else
    local list = l1
    local _next = self:getjump(fs, list)
    while _next ~= self.NO_JUMP do  -- find last element
      list = _next
      _next = self:getjump(fs, list)
    end
    self:fixjump(fs, list, l2)
  end
  return l1
end

------------------------------------------------------------------------
--
-- * used in luaK:reserveregs(), (lparser) luaY:forlist()
------------------------------------------------------------------------
function luaK:checkstack(fs, n)
  local newstack = fs.freereg + n
  if newstack > fs.f.maxstacksize then
    if newstack >= self.MAXSTACK then
      luaX:syntaxerror(fs.ls, "function or expression too complex")
    end
    fs.f.maxstacksize = newstack
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:reserveregs(fs, n)
  self:checkstack(fs, n)
  fs.freereg = fs.freereg + n
end

------------------------------------------------------------------------
--
-- * used in luaK:freeexp(), luaK:dischargevars()
------------------------------------------------------------------------
function luaK:freereg(fs, reg)
  if not luaP:ISK(reg) and reg >= fs.nactvar then
    fs.freereg = fs.freereg - 1
    assert(reg == fs.freereg)
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:freeexp(fs, e)
  if e.k == "VNONRELOC" then
    self:freereg(fs, e.info)
  end
end

------------------------------------------------------------------------
-- * TODO NOTE implementation is not 100% correct, since the assert fails
-- * luaH_set, setobj deleted; direct table access used instead
-- * used in luaK:stringK(), luaK:numberK(), luaK:boolK(), luaK:nilK()
------------------------------------------------------------------------
function luaK:addk(fs, k, v)
  local L = fs.L
  local idx = fs.h[k.value]
  --TValue *idx = luaH_set(L, fs->h, k); /* C */
  local f = fs.f
  if self:ttisnumber(idx) then
    --TODO this assert currently FAILS (last tested for 5.0.2)
    --assert(fs.f.k[self:nvalue(idx)] == v)
    --assert(luaO_rawequalObj(&fs->f->k[cast_int(nvalue(idx))], v)); /* C */
    return self:nvalue(idx)
  else -- constant not found; create a new entry
    idx = {}
    self:setnvalue(idx, fs.nk)
    fs.h[k.value] = idx
    -- setnvalue(idx, cast_num(fs->nk)); /* C */
    luaY:growvector(L, f.k, fs.nk, f.sizek, nil,
                    luaP.MAXARG_Bx, "constant table overflow")
    -- loop to initialize empty f.k positions not required
    f.k[fs.nk] = v
    -- setobj(L, &f->k[fs->nk], v); /* C */
    -- luaC_barrier(L, f, v); /* GC */
    local nk = fs.nk
    fs.nk = fs.nk + 1
    return nk
  end

end

------------------------------------------------------------------------
-- creates and sets a string object
-- * used in (lparser) luaY:codestring(), luaY:singlevar()
------------------------------------------------------------------------
function luaK:stringK(fs, s)
  local o = {}  -- TValue
  self:setsvalue(o, s)
  return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a number object
-- * used in luaK:prefix() for negative (or negation of) numbers
-- * used in (lparser) luaY:simpleexp(), luaY:fornum()
------------------------------------------------------------------------
function luaK:numberK(fs, r)
  local o = {}  -- TValue
  self:setnvalue(o, r)
  return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a boolean object
-- * used only in luaK:exp2RK()
------------------------------------------------------------------------
function luaK:boolK(fs, b)
  local o = {}  -- TValue
  self:setbvalue(o, b)
  return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a nil object
-- * used only in luaK:exp2RK()
------------------------------------------------------------------------
function luaK:nilK(fs)
  local k, v = {}, {}  -- TValue
  self:setnilvalue(v)
  -- cannot use nil as key; instead use table itself to represent nil
  self:sethvalue(k, fs.h)
  return self:addk(fs, k, v)
end

------------------------------------------------------------------------
--
-- * used in luaK:setmultret(), (lparser) luaY:adjust_assign()
------------------------------------------------------------------------
function luaK:setreturns(fs, e, nresults)
  if e.k == "VCALL" then  -- expression is an open function call?
    luaP:SETARG_C(self:getcode(fs, e), nresults + 1)
  elseif e.k == "VVARARG" then
    luaP:SETARG_B(self:getcode(fs, e), nresults + 1);
    luaP:SETARG_A(self:getcode(fs, e), fs.freereg);
    luaK:reserveregs(fs, 1)
  end
end

------------------------------------------------------------------------
--
-- * used in luaK:dischargevars(), (lparser) luaY:assignment()
------------------------------------------------------------------------
function luaK:setoneret(fs, e)
  if e.k == "VCALL" then  -- expression is an open function call?
    e.k = "VNONRELOC"
    e.info = luaP:GETARG_A(self:getcode(fs, e))
  elseif e.k == "VVARARG" then
    luaP:SETARG_B(self:getcode(fs, e), 2)
    e.k = "VRELOCABLE"  -- can relocate its simple result
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:dischargevars(fs, e)
  local k = e.k
  if k == "VLOCAL" then
    e.k = "VNONRELOC"
  elseif k == "VUPVAL" then
    e.info = self:codeABC(fs, "OP_GETUPVAL", 0, e.info, 0)
    e.k = "VRELOCABLE"
  elseif k == "VGLOBAL" then
    e.info = self:codeABx(fs, "OP_GETGLOBAL", 0, e.info)
    e.k = "VRELOCABLE"
  elseif k == "VINDEXED" then
    self:freereg(fs, e.aux)
    self:freereg(fs, e.info)
    e.info = self:codeABC(fs, "OP_GETTABLE", 0, e.info, e.aux)
    e.k = "VRELOCABLE"
  elseif k == "VVARARG" or k == "VCALL" then
    self:setoneret(fs, e)
  else
    -- there is one value available (somewhere)
  end
end

------------------------------------------------------------------------
--
-- * used only in luaK:exp2reg()
------------------------------------------------------------------------
function luaK:code_label(fs, A, b, jump)
  self:getlabel(fs)  -- those instructions may be jump targets
  return self:codeABC(fs, "OP_LOADBOOL", A, b, jump)
end

------------------------------------------------------------------------
--
-- * used in luaK:discharge2anyreg(), luaK:exp2reg()
------------------------------------------------------------------------
function luaK:discharge2reg(fs, e, reg)
  self:dischargevars(fs, e)
  local k = e.k
  if k == "VNIL" then
    self:_nil(fs, reg, 1)
  elseif k == "VFALSE" or k == "VTRUE" then
    self:codeABC(fs, "OP_LOADBOOL", reg, (e.k == "VTRUE") and 1 or 0, 0)
  elseif k == "VK" then
    self:codeABx(fs, "OP_LOADK", reg, e.info)
  elseif k == "VKNUM" then
    self:codeABx(fs, "OP_LOADK", reg, self:numberK(fs, e.nval))
  elseif k == "VRELOCABLE" then
    local pc = self:getcode(fs, e)
    luaP:SETARG_A(pc, reg)
  elseif k == "VNONRELOC" then
    if reg ~= e.info then
      self:codeABC(fs, "OP_MOVE", reg, e.info, 0)
    end
  else
    assert(e.k == "VVOID" or e.k == "VJMP")
    return  -- nothing to do...
  end
  e.info = reg
  e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in luaK:jumponcond(), luaK:codenot()
------------------------------------------------------------------------
function luaK:discharge2anyreg(fs, e)
  if e.k ~= "VNONRELOC" then
    self:reserveregs(fs, 1)
    self:discharge2reg(fs, e, fs.freereg - 1)
  end
end

------------------------------------------------------------------------
--
-- * used in luaK:exp2nextreg(), luaK:exp2anyreg(), luaK:storevar()
------------------------------------------------------------------------
function luaK:exp2reg(fs, e, reg)
  self:discharge2reg(fs, e, reg)
  if e.k == "VJMP" then
    e.t = self:concat(fs, e.t, e.info)  -- put this jump in 't' list
  end
  if self:hasjumps(e) then
    local final  -- position after whole expression
    local p_f = self.NO_JUMP  -- position of an eventual LOAD false
    local p_t = self.NO_JUMP  -- position of an eventual LOAD true
    if self:need_value(fs, e.t) or self:need_value(fs, e.f) then
      local fj = (e.k == "VJMP") and self.NO_JUMP or self:jump(fs)
      p_f = self:code_label(fs, reg, 0, 1)
      p_t = self:code_label(fs, reg, 1, 0)
      self:patchtohere(fs, fj)
    end
    final = self:getlabel(fs)
    self:patchlistaux(fs, e.f, final, reg, p_f)
    self:patchlistaux(fs, e.t, final, reg, p_t)
  end
  e.f, e.t = self.NO_JUMP, self.NO_JUMP
  e.info = reg
  e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2nextreg(fs, e)
  self:dischargevars(fs, e)
  self:freeexp(fs, e)
  self:reserveregs(fs, 1)
  self:exp2reg(fs, e, fs.freereg - 1)
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2anyreg(fs, e)
  self:dischargevars(fs, e)
  if e.k == "VNONRELOC" then
    if not self:hasjumps(e) then  -- exp is already in a register
      return e.info
    end
    if e.info >= fs.nactvar then  -- reg. is not a local?
      self:exp2reg(fs, e, e.info)  -- put value on it
      return e.info
    end
  end
  self:exp2nextreg(fs, e)  -- default
  return e.info
end

------------------------------------------------------------------------
--
-- * used in luaK:exp2RK(), luaK:prefix(), luaK:posfix()
-- * used in (lparser) luaY:yindex()
------------------------------------------------------------------------
function luaK:exp2val(fs, e)
  if self:hasjumps(e) then
    self:exp2anyreg(fs, e)
  else
    self:dischargevars(fs, e)
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2RK(fs, e)
  self:exp2val(fs, e)
  local k = e.k
  if k == "VKNUM" or k == "VTRUE" or k == "VFALSE" or k == "VNIL" then
    if fs.nk <= luaP.MAXINDEXRK then  -- constant fit in RK operand?
      -- converted from a 2-deep ternary operator expression
      if e.k == "VNIL" then
        e.info = self:nilK(fs)
      else
        e.info = (e.k == "VKNUM") and self:numberK(fs, e.nval)
                                  or self:boolK(fs, e.k == "VTRUE")
      end
      e.k = "VK"
      return luaP:RKASK(e.info)
    end
  elseif k == "VK" then
    if e.info <= luaP.MAXINDEXRK then  -- constant fit in argC?
      return luaP:RKASK(e.info)
    end
  else
    -- default
  end
  -- not a constant in the right range: put it in a register
  return self:exp2anyreg(fs, e)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:assignment(), luaY:localfunc(), luaY:funcstat()
------------------------------------------------------------------------
function luaK:storevar(fs, var, ex)
  local k = var.k
  if k == "VLOCAL" then
    self:freeexp(fs, ex)
    self:exp2reg(fs, ex, var.info)
    return
  elseif k == "VUPVAL" then
    local e = self:exp2anyreg(fs, ex)
    self:codeABC(fs, "OP_SETUPVAL", e, var.info, 0)
  elseif k == "VGLOBAL" then
    local e = self:exp2anyreg(fs, ex)
    self:codeABx(fs, "OP_SETGLOBAL", e, var.info)
  elseif k == "VINDEXED" then
    local e = self:exp2RK(fs, ex)
    self:codeABC(fs, "OP_SETTABLE", var.info, var.aux, e)
  else
    assert(0)  -- invalid var kind to store
  end
  self:freeexp(fs, ex)
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:primaryexp()
------------------------------------------------------------------------
function luaK:_self(fs, e, key)
  self:exp2anyreg(fs, e)
  self:freeexp(fs, e)
  local func = fs.freereg
  self:reserveregs(fs, 2)
  self:codeABC(fs, "OP_SELF", func, e.info, self:exp2RK(fs, key))
  self:freeexp(fs, key)
  e.info = func
  e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in luaK:goiftrue(), luaK:codenot()
------------------------------------------------------------------------
function luaK:invertjump(fs, e)
  local pc = self:getjumpcontrol(fs, e.info)
  assert(luaP:testTMode(luaP:GET_OPCODE(pc)) ~= 0 and
             luaP:GET_OPCODE(pc) ~= "OP_TESTSET" and
             luaP:GET_OPCODE(pc) ~= "OP_TEST")
  luaP:SETARG_A(pc, (luaP:GETARG_A(pc) == 0) and 1 or 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:goiftrue(), luaK:goiffalse()
------------------------------------------------------------------------
function luaK:jumponcond(fs, e, cond)
  if e.k == "VRELOCABLE" then
    local ie = self:getcode(fs, e)
    if luaP:GET_OPCODE(ie) == "OP_NOT" then
      fs.pc = fs.pc - 1  -- remove previous OP_NOT
      return self:condjump(fs, "OP_TEST", luaP:GETARG_B(ie), 0, cond and 0 or 1)
    end
    -- else go through
  end
  self:discharge2anyreg(fs, e)
  self:freeexp(fs, e)
  return self:condjump(fs, "OP_TESTSET", luaP.NO_REG, e.info, cond and 1 or 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:infix(), (lparser) luaY:cond()
------------------------------------------------------------------------
function luaK:goiftrue(fs, e)
  local pc  -- pc of last jump
  self:dischargevars(fs, e)
  local k = e.k
  if k == "VK" or k == "VKNUM" or k == "VTRUE" then
    pc = self.NO_JUMP  -- always true; do nothing
  elseif k == "VFALSE" then
    pc = self:jump(fs)  -- always jump
  elseif k == "VJMP" then
    self:invertjump(fs, e)
    pc = e.info
  else
    pc = self:jumponcond(fs, e, false)
  end
  e.f = self:concat(fs, e.f, pc)  -- insert last jump in `f' list
  self:patchtohere(fs, e.t)
  e.t = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used in luaK:infix()
------------------------------------------------------------------------
function luaK:goiffalse(fs, e)
  local pc  -- pc of last jump
  self:dischargevars(fs, e)
  local k = e.k
  if k == "VNIL" or k == "VFALSE"then
    pc = self.NO_JUMP  -- always false; do nothing
  elseif k == "VTRUE" then
    pc = self:jump(fs)  -- always jump
  elseif k == "VJMP" then
    pc = e.info
  else
    pc = self:jumponcond(fs, e, true)
  end
  e.t = self:concat(fs, e.t, pc)  -- insert last jump in `t' list
  self:patchtohere(fs, e.f)
  e.f = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used only in luaK:prefix()
------------------------------------------------------------------------
function luaK:codenot(fs, e)
  self:dischargevars(fs, e)
  local k = e.k
  if k == "VNIL" or k == "VFALSE" then
    e.k = "VTRUE"
  elseif k == "VK" or k == "VKNUM" or k == "VTRUE" then
    e.k = "VFALSE"
  elseif k == "VJMP" then
    self:invertjump(fs, e)
  elseif k == "VRELOCABLE" or k == "VNONRELOC" then
    self:discharge2anyreg(fs, e)
    self:freeexp(fs, e)
    e.info = self:codeABC(fs, "OP_NOT", 0, e.info, 0)
    e.k = "VRELOCABLE"
  else
    assert(0)  -- cannot happen
  end
  -- interchange true and false lists
  e.f, e.t = e.t, e.f
  self:removevalues(fs, e.f)
  self:removevalues(fs, e.t)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:field(), luaY:primaryexp()
------------------------------------------------------------------------
function luaK:indexed(fs, t, k)
  t.aux = self:exp2RK(fs, k)
  t.k = "VINDEXED"
end

------------------------------------------------------------------------
--
-- * used only in luaK:codearith()
------------------------------------------------------------------------
function luaK:constfolding(op, e1, e2)
  local r
  if not self:isnumeral(e1) or not self:isnumeral(e2) then return false end
  local v1 = e1.nval
  local v2 = e2.nval
  if op == "OP_ADD" then
    r = self:numadd(v1, v2)
  elseif op == "OP_SUB" then
    r = self:numsub(v1, v2)
  elseif op == "OP_MUL" then
    r = self:nummul(v1, v2)
  elseif op == "OP_DIV" then
    if v2 == 0 then return false end  -- do not attempt to divide by 0
    r = self:numdiv(v1, v2)
  elseif op == "OP_MOD" then
    if v2 == 0 then return false end  -- do not attempt to divide by 0
    r = self:nummod(v1, v2)
  elseif op == "OP_POW" then
    r = self:numpow(v1, v2)
  elseif op == "OP_UNM" then
    r = self:numunm(v1)
  elseif op == "OP_LEN" then
    return false  -- no constant folding for 'len'
  else
    assert(0)
    r = 0
  end
  if self:numisnan(r) then return false end  -- do not attempt to produce NaN
  e1.nval = r
  return true
end

------------------------------------------------------------------------
--
-- * used in luaK:prefix(), luaK:posfix()
------------------------------------------------------------------------
function luaK:codearith(fs, op, e1, e2)
  if self:constfolding(op, e1, e2) then
    return
  else
    local o2 = (op ~= "OP_UNM" and op ~= "OP_LEN") and self:exp2RK(fs, e2) or 0
    local o1 = self:exp2RK(fs, e1)
    if o1 > o2 then
      self:freeexp(fs, e1)
      self:freeexp(fs, e2)
    else
      self:freeexp(fs, e2)
      self:freeexp(fs, e1)
    end
    e1.info = self:codeABC(fs, op, 0, o1, o2)
    e1.k = "VRELOCABLE"
  end
end

------------------------------------------------------------------------
--
-- * used only in luaK:posfix()
------------------------------------------------------------------------
function luaK:codecomp(fs, op, cond, e1, e2)
  local o1 = self:exp2RK(fs, e1)
  local o2 = self:exp2RK(fs, e2)
  self:freeexp(fs, e2)
  self:freeexp(fs, e1)
  if cond == 0 and op ~= "OP_EQ" then
    -- exchange args to replace by `<' or `<='
    o1, o2 = o2, o1  -- o1 <==> o2
    cond = 1
  end
  e1.info = self:condjump(fs, op, cond, o1, o2)
  e1.k = "VJMP"
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
function luaK:prefix(fs, op, e)
  local e2 = {}  -- expdesc
  e2.t, e2.f = self.NO_JUMP, self.NO_JUMP
  e2.k = "VKNUM"
  e2.nval = 0
  if op == "OPR_MINUS" then
    if not self:isnumeral(e) then
      self:exp2anyreg(fs, e)  -- cannot operate on non-numeric constants
    end
    self:codearith(fs, "OP_UNM", e, e2)
  elseif op == "OPR_NOT" then
    self:codenot(fs, e)
  elseif op == "OPR_LEN" then
    self:exp2anyreg(fs, e)  -- cannot operate on constants
    self:codearith(fs, "OP_LEN", e, e2)
  else
    assert(0)
  end
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
function luaK:infix(fs, op, v)
  if op == "OPR_AND" then
    self:goiftrue(fs, v)
  elseif op == "OPR_OR" then
    self:goiffalse(fs, v)
  elseif op == "OPR_CONCAT" then
    self:exp2nextreg(fs, v)  -- operand must be on the 'stack'
  elseif op == "OPR_ADD" or op == "OPR_SUB" or
         op == "OPR_MUL" or op == "OPR_DIV" or
         op == "OPR_MOD" or op == "OPR_POW" then
    if not self:isnumeral(v) then self:exp2RK(fs, v) end
  else
    self:exp2RK(fs, v)
  end
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
-- table lookups to simplify testing
luaK.arith_op = {
  OPR_ADD = "OP_ADD", OPR_SUB = "OP_SUB", OPR_MUL = "OP_MUL",
  OPR_DIV = "OP_DIV", OPR_MOD = "OP_MOD", OPR_POW = "OP_POW",
}
luaK.comp_op = {
  OPR_EQ = "OP_EQ", OPR_NE = "OP_EQ", OPR_LT = "OP_LT",
  OPR_LE = "OP_LE", OPR_GT = "OP_LT", OPR_GE = "OP_LE",
}
luaK.comp_cond = {
  OPR_EQ = 1, OPR_NE = 0, OPR_LT = 1,
  OPR_LE = 1, OPR_GT = 0, OPR_GE = 0,
}
function luaK:posfix(fs, op, e1, e2)
  -- needed because e1 = e2 doesn't copy values...
  -- * in 5.0.x, only k/info/aux/t/f copied, t for AND, f for OR
  --   but here, all elements are copied for completeness' sake
  local function copyexp(e1, e2)
    e1.k = e2.k
    e1.info = e2.info; e1.aux = e2.aux
    e1.nval = e2.nval
    e1.t = e2.t; e1.f = e2.f
  end
  if op == "OPR_AND" then
    assert(e1.t == self.NO_JUMP)  -- list must be closed
    self:dischargevars(fs, e2)
    e2.f = self:concat(fs, e2.f, e1.f)
    copyexp(e1, e2)
  elseif op == "OPR_OR" then
    assert(e1.f == self.NO_JUMP)  -- list must be closed
    self:dischargevars(fs, e2)
    e2.t = self:concat(fs, e2.t, e1.t)
    copyexp(e1, e2)
  elseif op == "OPR_CONCAT" then
    self:exp2val(fs, e2)
    if e2.k == "VRELOCABLE" and luaP:GET_OPCODE(self:getcode(fs, e2)) == "OP_CONCAT" then
      assert(e1.info == luaP:GETARG_B(self:getcode(fs, e2)) - 1)
      self:freeexp(fs, e1)
      luaP:SETARG_B(self:getcode(fs, e2), e1.info)
      e1.k = "VRELOCABLE"
      e1.info = e2.info
    else
      self:exp2nextreg(fs, e2)  -- operand must be on the 'stack'
      self:codearith(fs, "OP_CONCAT", e1, e2)
    end
  else
    -- the following uses a table lookup in place of conditionals
    local arith = self.arith_op[op]
    if arith then
      self:codearith(fs, arith, e1, e2)
    else
      local comp = self.comp_op[op]
      if comp then
        self:codecomp(fs, comp, self.comp_cond[op], e1, e2)
      else
        assert(0)
      end
    end--if arith
  end--if op
end

------------------------------------------------------------------------
-- adjusts debug information for last instruction written, in order to
-- change the line where item comes into existence
-- * used in (lparser) luaY:funcargs(), luaY:forbody(), luaY:funcstat()
------------------------------------------------------------------------
function luaK:fixline(fs, line)
  fs.f.lineinfo[fs.pc - 1] = line
end

------------------------------------------------------------------------
-- general function to write an instruction into the instruction buffer,
-- sets debug information too
-- * used in luaK:codeABC(), luaK:codeABx()
-- * called directly by (lparser) luaY:whilestat()
------------------------------------------------------------------------
function luaK:code(fs, i, line)
  local f = fs.f
  self:dischargejpc(fs)  -- 'pc' will change
  -- put new instruction in code array
  luaY:growvector(fs.L, f.code, fs.pc, f.sizecode, nil,
                  luaY.MAX_INT, "code size overflow")
  f.code[fs.pc] = i
  -- save corresponding line information
  luaY:growvector(fs.L, f.lineinfo, fs.pc, f.sizelineinfo, nil,
                  luaY.MAX_INT, "code size overflow")
  f.lineinfo[fs.pc] = line
  local pc = fs.pc
  fs.pc = fs.pc + 1
  return pc
end

------------------------------------------------------------------------
-- writes an instruction of type ABC
-- * calls luaK:code()
------------------------------------------------------------------------
function luaK:codeABC(fs, o, a, b, c)
  assert(luaP:getOpMode(o) == luaP.OpMode.iABC)
  assert(luaP:getBMode(o) ~= luaP.OpArgMask.OpArgN or b == 0)
  assert(luaP:getCMode(o) ~= luaP.OpArgMask.OpArgN or c == 0)
  return self:code(fs, luaP:CREATE_ABC(o, a, b, c), fs.ls.lastline)
end

------------------------------------------------------------------------
-- writes an instruction of type ABx
-- * calls luaK:code(), called by luaK:codeAsBx()
------------------------------------------------------------------------
function luaK:codeABx(fs, o, a, bc)
  assert(luaP:getOpMode(o) == luaP.OpMode.iABx or
             luaP:getOpMode(o) == luaP.OpMode.iAsBx)
  assert(luaP:getCMode(o) == luaP.OpArgMask.OpArgN)
  return self:code(fs, luaP:CREATE_ABx(o, a, bc), fs.ls.lastline)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:closelistfield(), luaY:lastlistfield()
------------------------------------------------------------------------
function luaK:setlist(fs, base, nelems, tostore)
  local c = math.floor((nelems - 1)/luaP.LFIELDS_PER_FLUSH) + 1
  local b = (tostore == luaY.LUA_MULTRET) and 0 or tostore
  assert(tostore ~= 0)
  if c <= luaP.MAXARG_C then
    self:codeABC(fs, "OP_SETLIST", base, b, c)
  else
    self:codeABC(fs, "OP_SETLIST", base, b, 0)
    self:code(fs, luaP:CREATE_Inst(c), fs.ls.lastline)
  end
  fs.freereg = base + 1  -- free registers with list values
end

return function(a) luaY = a return luaK end
end
}
--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaU
G2L_MODULES[G2L["77"]] = {
Closure = function()
local script = G2L["77"]
--[[--------------------------------------------------------------------

  ldump.lua
  Save precompiled Lua chunks
  This file is part of Yueliang.

  Copyright (c) 2006 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * WARNING! byte order (little endian) and data type sizes for header
--   signature values hard-coded; see luaU:header
-- * chunk writer generators are included, see below
-- * one significant difference is that instructions are still in table
--   form (with OP/A/B/C/Bx fields) and luaP:Instruction() is needed to
--   convert them into 4-char strings
--
-- Not implemented:
-- * DumpVar, DumpMem has been removed
-- * DumpVector folded into folded into DumpDebug, DumpCode
--
-- Added:
-- * for convenience, the following two functions have been added:
--   luaU:make_setS: create a chunk writer that writes to a string
--   luaU:make_setF: create a chunk writer that writes to a file
--   (lua.h contains a typedef for lua_Writer/lua_Chunkwriter, and
--    a Lua-based implementation exists, writer() in lstrlib.c)
-- * luaU:ttype(o) (from lobject.h)
-- * for converting number types to its binary equivalent:
--   luaU:from_double(x): encode double value for writing
--   luaU:from_int(x): encode integer value for writing
--     (error checking is limited for these conversion functions)
--     (double conversion does not support denormals or NaNs)
--
-- Changed in 5.1.x:
-- * the dumper was mostly rewritten in Lua 5.1.x, so notes on the
--   differences between 5.0.x and 5.1.x is limited
-- * LUAC_VERSION bumped to 0x51, LUAC_FORMAT added
-- * developer is expected to adjust LUAC_FORMAT in order to identify
--   non-standard binary chunk formats
-- * header signature code is smaller, has been simplified, and is
--   tested as a single unit; its logic is shared with the undumper
-- * no more endian conversion, invalid endianness mean rejection
-- * opcode field sizes are no longer exposed in the header
-- * code moved to front of a prototype, followed by constants
-- * debug information moved to the end of the binary chunk, and the
--   relevant functions folded into a single function
-- * luaU:dump returns a writer status code
-- * chunk writer now implements status code because dumper uses it
-- * luaU:endianness removed
----------------------------------------------------------------------]]

--requires luaP
local luaU = {}
local luaP = require(script.Parent.LuaP)

-- mark for precompiled code ('<esc>Lua') (from lua.h)
luaU.LUA_SIGNATURE = "\27Lua"

-- constants used by dumper (from lua.h)
luaU.LUA_TNUMBER  = 3
luaU.LUA_TSTRING  = 4
luaU.LUA_TNIL     = 0
luaU.LUA_TBOOLEAN = 1
luaU.LUA_TNONE    = -1

-- constants for header of binary files (from lundump.h)
luaU.LUAC_VERSION    = 0x51     -- this is Lua 5.1
luaU.LUAC_FORMAT     = 0        -- this is the official format
luaU.LUAC_HEADERSIZE = 12       -- size of header of binary files

--[[--------------------------------------------------------------------
-- Additional functions to handle chunk writing
-- * to use make_setS and make_setF, see test_ldump.lua elsewhere
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- create a chunk writer that writes to a string
-- * returns the writer function and a table containing the string
-- * to get the final result, look in buff.data
------------------------------------------------------------------------
function luaU:make_setS()
  local buff = {}
        buff.data = ""
  local writer =
    function(s, buff)  -- chunk writer
      if not s then return 0 end
      buff.data = buff.data..s
      return 0
    end
  return writer, buff
end

------------------------------------------------------------------------
-- create a chunk writer that writes to a file
-- * returns the writer function and a table containing the file handle
-- * if a nil is passed, then writer should close the open file
------------------------------------------------------------------------

--[[
function luaU:make_setF(filename)
  local buff = {}
        buff.h = io.open(filename, "wb")
  if not buff.h then return nil end
  local writer =
    function(s, buff)  -- chunk writer
      if not buff.h then return 0 end
      if not s then
        if buff.h:close() then return 0 end
      else
        if buff.h:write(s) then return 0 end
      end
      return 1
    end
  return writer, buff
end--]]

------------------------------------------------------------------------
-- works like the lobject.h version except that TObject used in these
-- scripts only has a 'value' field, no 'tt' field (native types used)
------------------------------------------------------------------------
function luaU:ttype(o)
  local tt = type(o.value)
  if tt == "number" then return self.LUA_TNUMBER
  elseif tt == "string" then return self.LUA_TSTRING
  elseif tt == "nil" then return self.LUA_TNIL
  elseif tt == "boolean" then return self.LUA_TBOOLEAN
  else
    return self.LUA_TNONE  -- the rest should not appear
  end
end

-----------------------------------------------------------------------
-- converts a IEEE754 double number to an 8-byte little-endian string
-- * luaU:from_double() and luaU:from_int() are adapted from ChunkBake
-- * supports +/- Infinity, but not denormals or NaNs
-----------------------------------------------------------------------
function luaU:from_double(x)
  local function grab_byte(v)
    local c = v % 256
    return (v - c) / 256, string.char(c)
  end
  local sign = 0
  if x < 0 then sign = 1; x = -x end
  local mantissa, exponent = math.frexp(x)
  if x == 0 then -- zero
    mantissa, exponent = 0, 0
  elseif x == 1/0 then
    mantissa, exponent = 0, 2047
  else
    mantissa = (mantissa * 2 - 1) * math.ldexp(0.5, 53)
    exponent = exponent + 1022
  end
  local v, byte = "" -- convert to bytes
  x = math.floor(mantissa)
  for i = 1,6 do
    x, byte = grab_byte(x); v = v..byte -- 47:0
  end
  x, byte = grab_byte(exponent * 16 + x); v = v..byte -- 55:48
  x, byte = grab_byte(sign * 128 + x); v = v..byte -- 63:56
  return v
end

-----------------------------------------------------------------------
-- converts a number to a little-endian 32-bit integer string
-- * input value assumed to not overflow, can be signed/unsigned
-----------------------------------------------------------------------
function luaU:from_int(x)
  local v = ""
  x = math.floor(x)
  if x < 0 then x = 4294967296 + x end  -- ULONG_MAX+1
  for i = 1, 4 do
    local c = x % 256
    v = v..string.char(c); x = math.floor(x / 256)
  end
  return v
end

--[[--------------------------------------------------------------------
-- Functions to make a binary chunk
-- * many functions have the size parameter removed, since output is
--   in the form of a string and some sizes are implicit or hard-coded
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct DumpState:
--   L  -- lua_State (not used in this script)
--   writer  -- lua_Writer (chunk writer function)
--   data  -- void* (chunk writer context or data already written)
--   strip  -- if true, don't write any debug information
--   status  -- if non-zero, an error has occured
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- dumps a block of bytes
-- * lua_unlock(D.L), lua_lock(D.L) unused
------------------------------------------------------------------------
function luaU:DumpBlock(b, D)
  if D.status == 0 then
    -- lua_unlock(D->L);
    D.status = D.write(b, D.data)
    -- lua_lock(D->L);
  end
end

------------------------------------------------------------------------
-- dumps a char
------------------------------------------------------------------------
function luaU:DumpChar(y, D)
  self:DumpBlock(string.char(y), D)
end

------------------------------------------------------------------------
-- dumps a 32-bit signed or unsigned integer (for int) (hard-coded)
------------------------------------------------------------------------
function luaU:DumpInt(x, D)
  self:DumpBlock(self:from_int(x), D)
end

------------------------------------------------------------------------
-- dumps a lua_Number (hard-coded as a double)
------------------------------------------------------------------------
function luaU:DumpNumber(x, D)
  self:DumpBlock(self:from_double(x), D)
end

------------------------------------------------------------------------
-- dumps a Lua string (size type is hard-coded)
------------------------------------------------------------------------
function luaU:DumpString(s, D)
  if s == nil then
    self:DumpInt(0, D)
  else
    s = s.."\0"  -- include trailing '\0'
    self:DumpInt(#s, D)
    self:DumpBlock(s, D)
  end
end

------------------------------------------------------------------------
-- dumps instruction block from function prototype
------------------------------------------------------------------------
function luaU:DumpCode(f, D)
  local n = f.sizecode
  --was DumpVector
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpBlock(luaP:Instruction(f.code[i]), D)
  end
end

------------------------------------------------------------------------
-- dump constant pool from function prototype
-- * bvalue(o), nvalue(o) and rawtsvalue(o) macros removed
------------------------------------------------------------------------
function luaU:DumpConstants(f, D)
  local n = f.sizek
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    local o = f.k[i]  -- TValue
    local tt = self:ttype(o)
    self:DumpChar(tt, D)
    if tt == self.LUA_TNIL then
    elseif tt == self.LUA_TBOOLEAN then
      self:DumpChar(o.value and 1 or 0, D)
    elseif tt == self.LUA_TNUMBER then
      self:DumpNumber(o.value, D)
    elseif tt == self.LUA_TSTRING then
      self:DumpString(o.value, D)
    else
      --lua_assert(0)  -- cannot happen
    end
  end
  n = f.sizep
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpFunction(f.p[i], f.source, D)
  end
end

------------------------------------------------------------------------
-- dump debug information
------------------------------------------------------------------------
function luaU:DumpDebug(f, D)
  local n
  n = D.strip and 0 or f.sizelineinfo           -- dump line information
  --was DumpVector
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpInt(f.lineinfo[i], D)
  end
  n = D.strip and 0 or f.sizelocvars            -- dump local information
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpString(f.locvars[i].varname, D)
    self:DumpInt(f.locvars[i].startpc, D)
    self:DumpInt(f.locvars[i].endpc, D)
  end
  n = D.strip and 0 or f.sizeupvalues           -- dump upvalue information
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpString(f.upvalues[i], D)
  end
end

------------------------------------------------------------------------
-- dump child function prototypes from function prototype
------------------------------------------------------------------------
function luaU:DumpFunction(f, p, D)
  local source = f.source
  if source == p or D.strip then source = nil end
  self:DumpString(source, D)
  self:DumpInt(f.lineDefined, D)
  self:DumpInt(f.lastlinedefined, D)
  self:DumpChar(f.nups, D)
  self:DumpChar(f.numparams, D)
  self:DumpChar(f.is_vararg, D)
  self:DumpChar(f.maxstacksize, D)
  self:DumpCode(f, D)
  self:DumpConstants(f, D)
  self:DumpDebug(f, D)
end

------------------------------------------------------------------------
-- dump Lua header section (some sizes hard-coded)
------------------------------------------------------------------------
function luaU:DumpHeader(D)
  local h = self:header()
  assert(#h == self.LUAC_HEADERSIZE) -- fixed buffer now an assert
  self:DumpBlock(h, D)
end

------------------------------------------------------------------------
-- make header (from lundump.c)
-- returns the header string
------------------------------------------------------------------------
function luaU:header()
 local x = 1
 return self.LUA_SIGNATURE..
        string.char(
          self.LUAC_VERSION,
          self.LUAC_FORMAT,
          x,                    -- endianness (1=little)
          4,                    -- sizeof(int)
          4,                    -- sizeof(size_t)
          4,                    -- sizeof(Instruction)
          8,                    -- sizeof(lua_Number)
          0)                    -- is lua_Number integral?
end

------------------------------------------------------------------------
-- dump Lua function as precompiled chunk
-- (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)
-- * w, data are created from make_setS, make_setF
------------------------------------------------------------------------
function luaU:dump(L, f, w, data, strip)
  local D = {}  -- DumpState
  D.L = L
  D.write = w
  D.data = data
  D.strip = strip
  D.status = 0
  self:DumpHeader(D)
  self:DumpFunction(f, nil, D)
  -- added: for a chunk writer writing to a file, this final call with
  -- nil data is to indicate to the writer to close the file
  D.write(nil, D.data)
  return D.status
end

return luaU
end
}
--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.LuaP
G2L_MODULES[G2L["78"]] = {
Closure = function()
local script = G2L["78"]
--[[--------------------------------------------------------------------

  lopcodes.lua
  Lua 5 virtual machine opcodes in Lua
  This file is part of Yueliang.

  Copyright (c) 2006 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * an Instruction is a table with OP, A, B, C, Bx elements; this
--   makes the code easy to follow and should allow instruction handling
--   to work with doubles and ints
-- * WARNING luaP:Instruction outputs instructions encoded in little-
--   endian form and field size and positions are hard-coded
--
-- Not implemented:
-- *
--
-- Added:
-- * luaP:CREATE_Inst(c): create an inst from a number (for OP_SETLIST)
-- * luaP:Instruction(i): convert field elements to a 4-char string
-- * luaP:DecodeInst(x): convert 4-char string into field elements
--
-- Changed in 5.1.x:
-- * POS_OP added, instruction field positions changed
-- * some symbol names may have changed, e.g. LUAI_BITSINT
-- * new operators for RK indices: BITRK, ISK(x), INDEXK(r), RKASK(x)
-- * OP_MOD, OP_LEN is new
-- * OP_TEST is now OP_TESTSET, OP_TEST is new
-- * OP_FORLOOP, OP_TFORLOOP adjusted, OP_FORPREP is new
-- * OP_TFORPREP deleted
-- * OP_SETLIST and OP_SETLISTO merged and extended
-- * OP_VARARG is new
-- * many changes to implementation of OpMode data
----------------------------------------------------------------------]]

local luaP = {}

--[[
===========================================================================
  We assume that instructions are unsigned numbers.
  All instructions have an opcode in the first 6 bits.
  Instructions can have the following fields:
        'A' : 8 bits
        'B' : 9 bits
        'C' : 9 bits
        'Bx' : 18 bits ('B' and 'C' together)
        'sBx' : signed Bx

  A signed argument is represented in excess K; that is, the number
  value is the unsigned value minus K. K is exactly the maximum value
  for that argument (so that -max is represented by 0, and +max is
  represented by 2*max), which is half the maximum for the corresponding
  unsigned argument.
===========================================================================
--]]

luaP.OpMode = { iABC = 0, iABx = 1, iAsBx = 2 }  -- basic instruction format

------------------------------------------------------------------------
-- size and position of opcode arguments.
-- * WARNING size and position is hard-coded elsewhere in this script
------------------------------------------------------------------------
luaP.SIZE_C  = 9
luaP.SIZE_B  = 9
luaP.SIZE_Bx = luaP.SIZE_C + luaP.SIZE_B
luaP.SIZE_A  = 8

luaP.SIZE_OP = 6

luaP.POS_OP = 0
luaP.POS_A  = luaP.POS_OP + luaP.SIZE_OP
luaP.POS_C  = luaP.POS_A + luaP.SIZE_A
luaP.POS_B  = luaP.POS_C + luaP.SIZE_C
luaP.POS_Bx = luaP.POS_C

------------------------------------------------------------------------
-- limits for opcode arguments.
-- we use (signed) int to manipulate most arguments,
-- so they must fit in LUAI_BITSINT-1 bits (-1 for sign)
------------------------------------------------------------------------
-- removed "#if SIZE_Bx < BITS_INT-1" test, assume this script is
-- running on a Lua VM with double or int as LUA_NUMBER

luaP.MAXARG_Bx  = math.ldexp(1, luaP.SIZE_Bx) - 1
luaP.MAXARG_sBx = math.floor(luaP.MAXARG_Bx / 2)  -- 'sBx' is signed

luaP.MAXARG_A = math.ldexp(1, luaP.SIZE_A) - 1
luaP.MAXARG_B = math.ldexp(1, luaP.SIZE_B) - 1
luaP.MAXARG_C = math.ldexp(1, luaP.SIZE_C) - 1

-- creates a mask with 'n' 1 bits at position 'p'
-- MASK1(n,p) deleted, not required
-- creates a mask with 'n' 0 bits at position 'p'
-- MASK0(n,p) deleted, not required

--[[--------------------------------------------------------------------
  Visual representation for reference:

   31    |    |     |            0      bit position
    +-----+-----+-----+----------+
    |  B  |  C  |  A  |  Opcode  |      iABC format
    +-----+-----+-----+----------+
    -  9  -  9  -  8  -    6     -      field sizes
    +-----+-----+-----+----------+
    |   [s]Bx   |  A  |  Opcode  |      iABx | iAsBx format
    +-----+-----+-----+----------+

----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- the following macros help to manipulate instructions
-- * changed to a table object representation, very clean compared to
--   the [nightmare] alternatives of using a number or a string
-- * Bx is a separate element from B and C, since there is never a need
--   to split Bx in the parser or code generator
------------------------------------------------------------------------

-- these accept or return opcodes in the form of string names
function luaP:GET_OPCODE(i) return self.ROpCode[i.OP] end
function luaP:SET_OPCODE(i, o) i.OP = self.OpCode[o] end

function luaP:GETARG_A(i) return i.A end
function luaP:SETARG_A(i, u) i.A = u end

function luaP:GETARG_B(i) return i.B end
function luaP:SETARG_B(i, b) i.B = b end

function luaP:GETARG_C(i) return i.C end
function luaP:SETARG_C(i, b) i.C = b end

function luaP:GETARG_Bx(i) return i.Bx end
function luaP:SETARG_Bx(i, b) i.Bx = b end

function luaP:GETARG_sBx(i) return i.Bx - self.MAXARG_sBx end
function luaP:SETARG_sBx(i, b) i.Bx = b + self.MAXARG_sBx end

function luaP:CREATE_ABC(o,a,b,c)
  return {OP = self.OpCode[o], A = a, B = b, C = c}
end

function luaP:CREATE_ABx(o,a,bc)
  return {OP = self.OpCode[o], A = a, Bx = bc}
end

------------------------------------------------------------------------
-- create an instruction from a number (for OP_SETLIST)
------------------------------------------------------------------------
function luaP:CREATE_Inst(c)
  local o = c % 64
  c = (c - o) / 64
  local a = c % 256
  c = (c - a) / 256
  return self:CREATE_ABx(o, a, c)
end

------------------------------------------------------------------------
-- returns a 4-char string little-endian encoded form of an instruction
------------------------------------------------------------------------
function luaP:Instruction(i)
  if i.Bx then
    -- change to OP/A/B/C format
    i.C = i.Bx % 512
    i.B = (i.Bx - i.C) / 512
  end
  local I = i.A * 64 + i.OP
  local c0 = I % 256
  I = i.C * 64 + (I - c0) / 256  -- 6 bits of A left
  local c1 = I % 256
  I = i.B * 128 + (I - c1) / 256  -- 7 bits of C left
  local c2 = I % 256
  local c3 = (I - c2) / 256
  return string.char(c0, c1, c2, c3)
end

------------------------------------------------------------------------
-- decodes a 4-char little-endian string into an instruction struct
------------------------------------------------------------------------
function luaP:DecodeInst(x)
  local byte = string.byte
  local i = {}
  local I = byte(x, 1)
  local op = I % 64
  i.OP = op
  I = byte(x, 2) * 4 + (I - op) / 64  -- 2 bits of c0 left
  local a = I % 256
  i.A = a
  I = byte(x, 3) * 4 + (I - a) / 256  -- 2 bits of c1 left
  local c = I % 512
  i.C = c
  i.B = byte(x, 4) * 2 + (I - c) / 512 -- 1 bits of c2 left
  local opmode = self.OpMode[tonumber(string.sub(self.opmodes[op + 1], 7, 7))]
  if opmode ~= "iABC" then
    i.Bx = i.B * 512 + i.C
  end
  return i
end

------------------------------------------------------------------------
-- Macros to operate RK indices
-- * these use arithmetic instead of bit ops
------------------------------------------------------------------------

-- this bit 1 means constant (0 means register)
luaP.BITRK = math.ldexp(1, luaP.SIZE_B - 1)

-- test whether value is a constant
function luaP:ISK(x) return x >= self.BITRK end

-- gets the index of the constant
function luaP:INDEXK(x) return x - self.BITRK end

luaP.MAXINDEXRK = luaP.BITRK - 1

-- code a constant index as a RK value
function luaP:RKASK(x) return x + self.BITRK end

------------------------------------------------------------------------
-- invalid register that fits in 8 bits
------------------------------------------------------------------------
luaP.NO_REG = luaP.MAXARG_A

------------------------------------------------------------------------
-- R(x) - register
-- Kst(x) - constant (in constant table)
-- RK(x) == if ISK(x) then Kst(INDEXK(x)) else R(x)
------------------------------------------------------------------------

------------------------------------------------------------------------
-- grep "ORDER OP" if you change these enums
------------------------------------------------------------------------

--[[--------------------------------------------------------------------
Lua virtual machine opcodes (enum OpCode):
------------------------------------------------------------------------
name          args    description
------------------------------------------------------------------------
OP_MOVE       A B     R(A) := R(B)
OP_LOADK      A Bx    R(A) := Kst(Bx)
OP_LOADBOOL   A B C   R(A) := (Bool)B; if (C) pc++
OP_LOADNIL    A B     R(A) := ... := R(B) := nil
OP_GETUPVAL   A B     R(A) := UpValue[B]
OP_GETGLOBAL  A Bx    R(A) := Gbl[Kst(Bx)]
OP_GETTABLE   A B C   R(A) := R(B)[RK(C)]
OP_SETGLOBAL  A Bx    Gbl[Kst(Bx)] := R(A)
OP_SETUPVAL   A B     UpValue[B] := R(A)
OP_SETTABLE   A B C   R(A)[RK(B)] := RK(C)
OP_NEWTABLE   A B C   R(A) := {} (size = B,C)
OP_SELF       A B C   R(A+1) := R(B); R(A) := R(B)[RK(C)]
OP_ADD        A B C   R(A) := RK(B) + RK(C)
OP_SUB        A B C   R(A) := RK(B) - RK(C)
OP_MUL        A B C   R(A) := RK(B) * RK(C)
OP_DIV        A B C   R(A) := RK(B) / RK(C)
OP_MOD        A B C   R(A) := RK(B) % RK(C)
OP_POW        A B C   R(A) := RK(B) ^ RK(C)
OP_UNM        A B     R(A) := -R(B)
OP_NOT        A B     R(A) := not R(B)
OP_LEN        A B     R(A) := length of R(B)
OP_CONCAT     A B C   R(A) := R(B).. ... ..R(C)
OP_JMP        sBx     pc+=sBx
OP_EQ         A B C   if ((RK(B) == RK(C)) ~= A) then pc++
OP_LT         A B C   if ((RK(B) <  RK(C)) ~= A) then pc++
OP_LE         A B C   if ((RK(B) <= RK(C)) ~= A) then pc++
OP_TEST       A C     if not (R(A) <=> C) then pc++
OP_TESTSET    A B C   if (R(B) <=> C) then R(A) := R(B) else pc++
OP_CALL       A B C   R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1))
OP_TAILCALL   A B C   return R(A)(R(A+1), ... ,R(A+B-1))
OP_RETURN     A B     return R(A), ... ,R(A+B-2)  (see note)
OP_FORLOOP    A sBx   R(A)+=R(A+2);
                      if R(A) <?= R(A+1) then { pc+=sBx; R(A+3)=R(A) }
OP_FORPREP    A sBx   R(A)-=R(A+2); pc+=sBx
OP_TFORLOOP   A C     R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));
                      if R(A+3) ~= nil then R(A+2)=R(A+3) else pc++
OP_SETLIST    A B C   R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B
OP_CLOSE      A       close all variables in the stack up to (>=) R(A)
OP_CLOSURE    A Bx    R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n))
OP_VARARG     A B     R(A), R(A+1), ..., R(A+B-1) = vararg
----------------------------------------------------------------------]]

luaP.opnames = {}  -- opcode names
luaP.OpCode = {}   -- lookup name -> number
luaP.ROpCode = {}  -- lookup number -> name

------------------------------------------------------------------------
-- ORDER OP
------------------------------------------------------------------------
local i = 0
for v in string.gmatch([[
MOVE LOADK LOADBOOL LOADNIL GETUPVAL
GETGLOBAL GETTABLE SETGLOBAL SETUPVAL SETTABLE
NEWTABLE SELF ADD SUB MUL
DIV MOD POW UNM NOT
LEN CONCAT JMP EQ LT
LE TEST TESTSET CALL TAILCALL
RETURN FORLOOP FORPREP TFORLOOP SETLIST
CLOSE CLOSURE VARARG
]], "%S+") do
  local n = "OP_"..v
  luaP.opnames[i] = v
  luaP.OpCode[n] = i
  luaP.ROpCode[i] = n
  i = i + 1
end
luaP.NUM_OPCODES = i

--[[
===========================================================================
  Notes:
  (*) In OP_CALL, if (B == 0) then B = top. C is the number of returns - 1,
      and can be 0: OP_CALL then sets 'top' to last_result+1, so
      next open instruction (OP_CALL, OP_RETURN, OP_SETLIST) may use 'top'.
  (*) In OP_VARARG, if (B == 0) then use actual number of varargs and
      set top (like in OP_CALL with C == 0).
  (*) In OP_RETURN, if (B == 0) then return up to 'top'
  (*) In OP_SETLIST, if (B == 0) then B = 'top';
      if (C == 0) then next 'instruction' is real C
  (*) For comparisons, A specifies what condition the test should accept
      (true or false).
  (*) All 'skips' (pc++) assume that next instruction is a jump
===========================================================================
--]]

--[[--------------------------------------------------------------------
  masks for instruction properties. The format is:
  bits 0-1: op mode
  bits 2-3: C arg mode
  bits 4-5: B arg mode
  bit 6: instruction set register A
  bit 7: operator is a test

  for OpArgMask:
  OpArgN - argument is not used
  OpArgU - argument is used
  OpArgR - argument is a register or a jump offset
  OpArgK - argument is a constant or register/constant
----------------------------------------------------------------------]]

-- was enum OpArgMask
luaP.OpArgMask = { OpArgN = 0, OpArgU = 1, OpArgR = 2, OpArgK = 3 }

------------------------------------------------------------------------
-- e.g. to compare with symbols, luaP:getOpMode(...) == luaP.OpCode.iABC
-- * accepts opcode parameter as strings, e.g. "OP_MOVE"
------------------------------------------------------------------------

function luaP:getOpMode(m)
  return self.opmodes[self.OpCode[m]] % 4
end

function luaP:getBMode(m)
  return math.floor(self.opmodes[self.OpCode[m]] / 16) % 4
end

function luaP:getCMode(m)
  return math.floor(self.opmodes[self.OpCode[m]] / 4) % 4
end

function luaP:testAMode(m)
  return math.floor(self.opmodes[self.OpCode[m]] / 64) % 2
end

function luaP:testTMode(m)
  return math.floor(self.opmodes[self.OpCode[m]] / 128)
end

-- luaP_opnames[] is set above, as the luaP.opnames table

-- number of list items to accumulate before a SETLIST instruction
luaP.LFIELDS_PER_FLUSH = 50

------------------------------------------------------------------------
-- build instruction properties array
-- * deliberately coded to look like the C equivalent
------------------------------------------------------------------------
local function opmode(t, a, b, c, m)
  local luaP = luaP
  return t * 128 + a * 64 +
         luaP.OpArgMask[b] * 16 + luaP.OpArgMask[c] * 4 + luaP.OpMode[m]
end

-- ORDER OP
luaP.opmodes = {
-- T A B C mode opcode
  opmode(0, 1, "OpArgK", "OpArgN", "iABx"),     -- OP_LOADK
  opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_LOADBOOL
  opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_LOADNIL
  opmode(0, 1, "OpArgU", "OpArgN", "iABC"),     -- OP_GETUPVAL
  opmode(0, 1, "OpArgK", "OpArgN", "iABx"),     -- OP_GETGLOBAL
  opmode(0, 1, "OpArgR", "OpArgK", "iABC"),     -- OP_GETTABLE
  opmode(0, 0, "OpArgK", "OpArgN", "iABx"),     -- OP_SETGLOBAL
  opmode(0, 0, "OpArgU", "OpArgN", "iABC"),     -- OP_SETUPVAL
  opmode(0, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_SETTABLE
  opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_NEWTABLE
  opmode(0, 1, "OpArgR", "OpArgK", "iABC"),     -- OP_SELF
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_ADD
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_SUB
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_MUL
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_DIV
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_MOD
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_POW
  opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_UNM
  opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_NOT
  opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_LEN
  opmode(0, 1, "OpArgR", "OpArgR", "iABC"),     -- OP_CONCAT
  opmode(0, 0, "OpArgR", "OpArgN", "iAsBx"),    -- OP_JMP
  opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_EQ
  opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_LT
  opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_LE
  opmode(1, 1, "OpArgR", "OpArgU", "iABC"),     -- OP_TEST
  opmode(1, 1, "OpArgR", "OpArgU", "iABC"),     -- OP_TESTSET
  opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_CALL
  opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_TAILCALL
  opmode(0, 0, "OpArgU", "OpArgN", "iABC"),     -- OP_RETURN
  opmode(0, 1, "OpArgR", "OpArgN", "iAsBx"),    -- OP_FORLOOP
  opmode(0, 1, "OpArgR", "OpArgN", "iAsBx"),    -- OP_FORPREP
  opmode(1, 0, "OpArgN", "OpArgU", "iABC"),     -- OP_TFORLOOP
  opmode(0, 0, "OpArgU", "OpArgU", "iABC"),     -- OP_SETLIST
  opmode(0, 0, "OpArgN", "OpArgN", "iABC"),     -- OP_CLOSE
  opmode(0, 1, "OpArgU", "OpArgN", "iABx"),     -- OP_CLOSURE
  opmode(0, 1, "OpArgU", "OpArgN", "iABC"),     -- OP_VARARG
}
-- an awkward way to set a zero-indexed table...
luaP.opmodes[0] =
  opmode(0, 1, "OpArgR", "OpArgN", "iABC")      -- OP_MOVE

return luaP
end
}
--JOHNDOE.Main.Shadow.Frame.RemoteHandle.Loadstring.Rerubi
G2L_MODULES[G2L["79"]] = {
Closure = function()
local script = G2L["79"]
local Select	= select;
local Byte		= string.byte;
local Sub		= string.sub;
local Opcode	= { -- Opcode types.
	'ABC',	'ABx',	'ABC',	'ABC';
	'ABC',	'ABx',	'ABC',	'ABx';
	'ABC',	'ABC',	'ABC',	'ABC';
	'ABC',	'ABC',	'ABC',	'ABC';
	'ABC',	'ABC',	'ABC',	'ABC';
	'ABC',	'ABC',	'AsBx',	'ABC';
	'ABC',	'ABC',	'ABC',	'ABC';
	'ABC',	'ABC',	'ABC',	'AsBx';
	'AsBx',	'ABC',	'ABC',	'ABC';
	'ABx',	'ABC';
};

-- rlbi author -> Rerumu
-- special thanks;
--	@cntkillme for providing faster bit extraction
--	@Eternal for being #1 bug finder and providing better float decoder
--	@stravant for contributing to the original project this is derived from

-- rerubi is an upgrade to the original Lua VM in Lua
-- the prime goal of rerubi is to be the fastest:tm: alternative
-- to a Lua in Lua bytecode execution

local function gBit(Bit, Start, End) -- No tail-calls, yay.
	if End then -- Thanks to cntkillme for giving input on this shorter, better approach.
		local Res	= (Bit / 2 ^ (Start - 1)) % 2 ^ ((End - 1) - (Start - 1) + 1);

		return Res - Res % 1;
	else
		local Plc = 2 ^ (Start - 1);

		if (Bit % (Plc + Plc) >= Plc) then
			return 1;
		else
			return 0;
		end;
	end;
end;

local function GetMeaning(ByteString)
	local Pos	= 1;
	local gSizet;
	local gInt;

	local function gBits8() -- Get the next byte in the stream.
		local F	= Byte(ByteString, Pos, Pos);

		Pos	= Pos + 1;

		return F;
	end;

	local function gBits32()
		local W, X, Y, Z	= Byte(ByteString, Pos, Pos + 3);

		Pos	= Pos + 4;

		return (Z * 16777216) + (Y * 65536) + (X * 256) + W;
	end;

	local function gBits64()
		return gBits32() * 4294967296 + gBits32();
	end;

	local function gFloat()
		-- thanks @Eternal for giving me this so I could mangle it in here and have it work
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1
		local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32))
						+ Left;

		local Exponent = gBit(Right, 21, 31);
		local Sign = ((-1) ^ gBit(Right, 32));

		if (Exponent == 0) then
			if (Mantissa == 0) then
				return Sign * 0 -- +-0
			else
				Exponent = 1
				IsNormal = 0
			end
		elseif (Exponent == 2047) then
			if (Mantissa == 0) then
				return Sign * (1 / 0) -- +-Inf
			else
				return Sign * (0 / 0) -- +-Q/Nan
			end
		end

		-- sign * 2**e-1023 * isNormal.mantissa
		return math.ldexp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)))
	end;

	local function gString(Len)
		local Str;

		if Len then
			Str	= Sub(ByteString, Pos, Pos + Len - 1);

			Pos = Pos + Len;
		else
			Len = gSizet();

			if (Len == 0) then return; end;

			Str	= Sub(ByteString, Pos, Pos + Len - 1);

			Pos = Pos + Len;
		end;

		return Str;
	end;

	local function ChunkDecode()
		local Instr	= {};
		local Const	= {};
		local Proto	= {};
		local Chunk	= {
			Instr	= Instr; -- Instructions
			Const	= Const; -- Constants
			Proto	= Proto; -- Prototypes
			Lines	= {}; -- Lines
			Name	= gString(); -- Grab name string.
			FirstL	= gInt(); -- First line.
			LastL	= gInt(); -- Last line.
			Upvals	= gBits8(); -- Upvalue count.
			Args	= gBits8(); -- Arg count.
			Vargs	= gBits8(); -- Vararg type.
			Stack	= gBits8(); -- Stack.
		};

		if Chunk.Name then
			Chunk.Name	= Sub(Chunk.Name, 1, -2);
		end;

		for Idx = 1, gInt() do -- Loading instructions to the chunk.
			local Data	= gBits32();
			local Opco	= gBit(Data, 1, 6);
			local Type	= Opcode[Opco + 1];
			local Inst;

			if Type then
				Inst	= {
					Enum	= Opco;
					gBit(Data, 7, 14); -- Register A.
				};

				if (Type == 'ABC') then -- Most common, basic instruction type.
					Inst[2]	= gBit(Data, 24, 32);
					Inst[3]	= gBit(Data, 15, 23);
				elseif (Type == 'ABx') then
					Inst[2]	= gBit(Data, 15, 32);
				elseif (Type == 'AsBx') then
					Inst[2]	= gBit(Data, 15, 32) - 131071;
				end;
			else
				Inst	= Data; -- Extended SETLIST
			end;

			Instr[Idx]	= Inst;
		end;

		for Idx = 1, gInt() do -- Load constants.
			local Type	= gBits8();
			local Cons;

			if (Type == 1) then -- Boolean
				Cons	= (gBits8() ~= 0);
			elseif (Type == 3) then -- Float/Double
				Cons	= gFloat();
			elseif (Type == 4) then
				Cons	= Sub(gString(), 1, -2);
			end;

			Const[Idx - 1]	= Cons;
		end;

		for Idx = 1, gInt() do -- Nested function prototypes.
			Proto[Idx - 1]	= ChunkDecode();
		end;

		do -- Debugging
			local Lines	= Chunk.Lines;

			for Idx = 1, gInt() do
				Lines[Idx]	= gBits32();
			end;

			for _ = 1, gInt() do -- Locals in stack.
				gString(); -- Name of local.
				gBits32(); -- Starting point.
				gBits32(); -- End point.
			end;

			for _ = 1, gInt() do -- Upvalues.
				gString(); -- Name of upvalue.
			end;
		end;

		return Chunk; -- Finished chunk.
	end;

	do -- Most of this chunk I was too lazy to reformat or change
		assert(gString(4) == "\27Lua", "Lua bytecode expected.");
		assert(gBits8() == 0x51, "Only Lua 5.1 is supported.");

		gBits8(); -- Probably version control.
		gBits8(); -- Is small endians.

		local IntSize	= gBits8(); -- Int size
		local Sizet		= gBits8(); -- size_t

		if (IntSize == 4) then
			gInt	= gBits32;
		elseif (IntSize == 8) then
			gInt	= gBits64;
		else
			error('Integer size not supported', 2);
		end;

		if (Sizet == 4) then
			gSizet	= gBits32;
		elseif (Sizet == 8) then
			gSizet	= gBits64;
		else
			error('Sizet size not supported', 2);
		end;

		assert(gString(3) == "\4\8\0", "Unsupported bytecode target platform");
	end;

	return ChunkDecode();
end;

local function _Returns(...)
	return Select('#', ...), {...};
end;

local function Wrap(Chunk, Env, Upvalues)
	local Instr	= Chunk.Instr;
	local Const	= Chunk.Const;
	local Proto	= Chunk.Proto;

	local function OnError(Err, Position) -- Handle your errors in whatever way.
		local Name	= Chunk.Name or 'Code';
		local Line	= Chunk.Lines[Position] or '?';

		Err	= tostring(Err):match'^.+:%s*(.+)' or Err;

		error(string.format('%s (%s): %s', Name, Line, Err), 0);
	end;

	return function(...)
		-- Returned function to run bytecode chunk (Don't be stupid, you can't setfenv this to work your way).
		local InstrPoint, Top	= 1, -1;
		local Vararg, Varargsz	= {}, Select('#', ...) - 1;

		local GStack	= {};
		local Lupvals	= {};
		local Stack		= setmetatable({}, {
			__index		= GStack;
			__newindex	= function(_, Key, Value)
				if (Key > Top) then
					Top	= Key;
				end;

				GStack[Key]	= Value;
			end;
		});

		local function Loop()
			local Inst, Enum;

			while true do
				Inst		= Instr[InstrPoint];
				Enum		= Inst.Enum;
				InstrPoint	= InstrPoint + 1;

				if (Enum == 0) then -- MOVE
					Stack[Inst[1]]	= Stack[Inst[2]];
				elseif (Enum == 1) then -- LOADK
					Stack[Inst[1]]	= Const[Inst[2]];
				elseif (Enum == 2) then -- LOADBOOL
					Stack[Inst[1]]	= (Inst[2] ~= 0);

					if (Inst[3] ~= 0) then
						InstrPoint	= InstrPoint + 1;
					end;
				elseif (Enum == 3) then -- LOADNIL
					local Stk	= Stack;

					for Idx = Inst[1], Inst[2] do
						Stk[Idx]	= nil;
					end;
				elseif (Enum == 4) then -- GETUPVAL
					Stack[Inst[1]]	= Upvalues[Inst[2]];
				elseif (Enum == 5) then -- GETGLOBAL
					Stack[Inst[1]]	= Env[Const[Inst[2]]];
				elseif (Enum == 6) then -- GETTABLE
					local C		= Inst[3];
					local Stk	= Stack;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= Stk[Inst[2]][C];
				elseif (Enum == 7) then -- SETGLOBAL
					Env[Const[Inst[2]]]	= Stack[Inst[1]];
				elseif (Enum == 8) then -- SETUPVAL
					Upvalues[Inst[2]]	= Stack[Inst[1]];
				elseif (Enum == 9) then -- SETTABLE
					local B, C	= Inst[2], Inst[3];
					local Stk	= Stack;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]][B]	= C;
				elseif (Enum == 10) then -- NEWTABLE
					Stack[Inst[1]]	= {};
				elseif (Enum == 11) then -- SELF
					local A		= Inst[1];
					local B		= Inst[2];
					local C		= Inst[3];
					local Stk	= Stack;

					B = Stk[B];

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[A + 1]	= B;
					Stk[A]		= B[C];
				elseif (Enum == 12) then -- ADD
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk = Stack;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B + C;
				elseif (Enum == 13) then -- SUB
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk = Stack;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B - C;
				elseif (Enum == 14) then -- MUL
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk = Stack;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B * C;
				elseif (Enum == 15) then -- DIV
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk = Stack;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B / C;
				elseif (Enum == 16) then -- MOD
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk = Stack;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B % C;
				elseif (Enum == 17) then -- POW
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk = Stack;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B ^ C;
				elseif (Enum == 18) then -- UNM
					Stack[Inst[1]]	= -Stack[Inst[2]];
				elseif (Enum == 19) then -- NOT
					Stack[Inst[1]]	= (not Stack[Inst[2]]);
				elseif (Enum == 20) then -- LEN
					Stack[Inst[1]]	= #Stack[Inst[2]];
				elseif (Enum == 21) then -- CONCAT
					local Stk	= Stack;
					local B		= Inst[2];
					local K 	= Stk[B];

					for Idx = B + 1, Inst[3] do
						K = K .. Stk[Idx];
					end;

					Stack[Inst[1]]	= K;
				elseif (Enum == 22) then -- JMP
					InstrPoint	= InstrPoint + Inst[2];
				elseif (Enum == 23) then -- EQ
					local A	= Inst[1] ~= 0;
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk = Stack;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					if (B == C) ~= A then
						InstrPoint	= InstrPoint + 1;
					end;
				elseif (Enum == 24) then -- LT
					local A	= Inst[1] ~= 0;
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk = Stack;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					if (B < C) ~= A then
						InstrPoint	= InstrPoint + 1;
					end;
				elseif (Enum == 25) then -- LE
					local A	= Inst[1] ~= 0;
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk = Stack;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					if (B <= C) ~= A then
						InstrPoint	= InstrPoint + 1;
					end;
				elseif (Enum == 26) then -- TEST
					if (not not Stack[Inst[1]]) == (Inst[3] == 0) then
						InstrPoint	= InstrPoint + 1;
					end;
				elseif (Enum == 27) then -- TESTSET
					local B	= Stack[Inst[2]];

					if (not not B) == (Inst[3] == 0) then
						InstrPoint	= InstrPoint + 1;
					else
						Stack[Inst[1]] = B;
					end;
				elseif (Enum == 28) then -- CALL
					local A	= Inst[1];
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk	= Stack;
					local Args, Results;
					local Limit, Loop;

					Args	= {};

					if (B ~= 1) then
						if (B ~= 0) then
							Limit = A + B - 1;
						else
							Limit = Top;
						end;

						Loop	= 0;

						for Idx = A + 1, Limit do
							Loop = Loop + 1;

							Args[Loop] = Stk[Idx];
						end;

						Limit, Results = _Returns(Stk[A](unpack(Args, 1, Limit - A)));
					else
						Limit, Results = _Returns(Stk[A]());
					end;

					Top = A - 1;

					if (C ~= 1) then
						if (C ~= 0) then
							Limit = A + C - 2;
						else
							Limit = Limit + A - 1;
						end;

						Loop	= 0;

						for Idx = A, Limit do
							Loop = Loop + 1;

							Stk[Idx] = Results[Loop];
						end;
					end;
				elseif (Enum == 29) then -- TAILCALL
					local A	= Inst[1];
					local B	= Inst[2];
					local Stk	= Stack;
					local Args, Results;
					local Limit, Loop;
					local Rets = 0;

					Args = {};

					if (B ~= 1) then
						if (B ~= 0) then
							Limit = A + B - 1;
						else
							Limit = Top;
						end

						Loop = 0;

						for Idx = A + 1, Limit do
							Loop = Loop + 1;

							Args[#Args + 1] = Stk[Idx];
						end

						Results = {Stk[A](unpack(Args, 1, Limit - A))};
					else
						Results = {Stk[A]()};
					end;

					for Index in next, Results do -- get return count
						if (Index > Rets) then
							Rets = Index;
						end;
					end;

					return Results, Rets;
				elseif (Enum == 30) then -- RETURN
					local A	= Inst[1];
					local B	= Inst[2];
					local Stk	= Stack;
					local Loop, Output;
					local Limit;

					if (B == 1) then
						return;
					elseif (B == 0) then
						Limit	= Top;
					else
						Limit	= A + B - 2;
					end;

					Output = {};
					Loop = 0;

					for Idx = A, Limit do
						Loop	= Loop + 1;

						Output[Loop] = Stk[Idx];
					end;

					return Output, Loop;
				elseif (Enum == 31) then -- FORLOOP
					local A		= Inst[1];
					local Stk	= Stack;

					local Step	= Stk[A + 2];
					local Index	= Stk[A] + Step;

					Stk[A]	= Index;

					if (Step > 0) then
						if Index <= Stk[A + 1] then
							InstrPoint	= InstrPoint + Inst[2];

							Stk[A + 3] = Index;
						end;
					else
						if Index >= Stk[A + 1] then
							InstrPoint	= InstrPoint + Inst[2];

							Stk[A + 3] = Index;
						end
					end
				elseif (Enum == 32) then -- FORPREP
					local A		= Inst[1];
					local Stk	= Stack;

					-- As per mirroring the real vm
					Stk[A] = assert(tonumber(Stk[A]), '`for` initial value must be a number');
					Stk[A + 1] = assert(tonumber(Stk[A + 1]), '`for` limit must be a number');
					Stk[A + 2] = assert(tonumber(Stk[A + 2]), '`for` step must be a number');

					Stk[A]	= Stk[A] - Stk[A + 2];

					InstrPoint	= InstrPoint + Inst[2];
				elseif (Enum == 33) then -- TFORLOOP
					local A		= Inst[1];
					local C		= Inst[3];
					local Stk	= Stack;

					local Offset	= A + 2;
					local Result	= {Stk[A](Stk[A + 1], Stk[A + 2])};

					for Idx = 1, C do
						Stack[Offset + Idx] = Result[Idx];
					end;

					if (Stk[A + 3] ~= nil) then
						Stk[A + 2]	= Stk[A + 3];
					else
						InstrPoint	= InstrPoint + 1;
					end;
				elseif (Enum == 34) then -- SETLIST
					local A		= Inst[1];
					local B		= Inst[2];
					local C		= Inst[3];
					local Stk	= Stack;

					if (C == 0) then
						InstrPoint	= InstrPoint + 1;
						C			= Instr[InstrPoint]; -- This implementation was ambiguous! Will eventually re-test.
					end;

					local Offset	= (C - 1) * 50;
					local T			= Stk[A]; -- Assuming T is the newly created table.

					if (B == 0) then
						B	= Top;
					end;

					for Idx = 1, B do
						T[Offset + Idx] = Stk[A + Idx];
					end;
				elseif (Enum == 35) then -- CLOSE
					local A		= Inst[1];
					local Cls	= {}; -- Slight doubts on any issues this may cause

					for Idx = 1, #Lupvals do
						local List = Lupvals[Idx];

						for Idz = 0, #List do
							local Upv	= List[Idz];
							local Stk	= Upv[1];
							local Pos	= Upv[2];

							if (Stk == Stack) and (Pos >= A) then
								Cls[Pos]	= Stk[Pos];
								Upv[1]		= Cls; -- @memcorrupt credit me for the spoonfeed
							end;
						end;
					end;
				elseif (Enum == 36) then -- CLOSURE
					local NewProto	= Proto[Inst[2]];
					local Stk	= Stack;

					local Indexes;
					local NewUvals;

					if (NewProto.Upvals ~= 0) then
						Indexes		= {};
						NewUvals	= setmetatable({}, {
								__index = function(_, Key)
									local Val	= Indexes[Key];

									return Val[1][Val[2]];
								end,
								__newindex = function(_, Key, Value)
									local Val	= Indexes[Key];

									Val[1][Val[2]]	= Value;
								end;
							}
						);

						for Idx = 1, NewProto.Upvals do
							local Mvm	= Instr[InstrPoint];

							if (Mvm.Enum == 0) then -- MOVE
								Indexes[Idx - 1] = {Stk, Mvm[2]};
							elseif (Mvm.Enum == 4) then -- GETUPVAL
								Indexes[Idx - 1] = {Upvalues, Mvm[2]};
							end;

							InstrPoint	= InstrPoint + 1;
						end;

						Lupvals[#Lupvals + 1]	= Indexes;
					end;

					Stk[Inst[1]]			= Wrap(NewProto, Env, NewUvals);
				elseif (Enum == 37) then -- VARARG
					local A	= Inst[1];
					local B	= Inst[2];
					local Stk, Vars	= Stack, Vararg;

					Top = A - 1;

					for Idx = A, A + (B > 0 and B - 1 or Varargsz) do
						Stk[Idx]	= Vars[Idx - A];
					end;
				end;
			end;
		end;

		local Args	= {...};

		for Idx = 0, Varargsz do
			if (Idx >= Chunk.Args) then
				Vararg[Idx - Chunk.Args] = Args[Idx + 1];
			else
				Stack[Idx] = Args[Idx + 1];
			end;
		end;

		local A, B, C	= pcall(Loop); -- Pcalling to allow yielding

		if A then -- We're always expecting this to come out true (because errorless code)
			if B and (C > 0) then -- So I flipped the conditions.
				return unpack(B, 1, C);
			end;

			return;
		else
			OnError(B, InstrPoint - 1); -- Didn't get time to test the `-1` honestly, but I assume it works properly
		end;
	end;
end;

return function(BCode, Env) -- lua_function LoadBytecode (string BCode, table Env)
	local Buffer	= GetMeaning(BCode);

	return Wrap(Buffer, Env or getfenv(0)), Buffer;
end;
end
}
--JOHNDOE.Main.Dragify
local function C_G2L_81()
local script = G2L["81"]
local UIS = game:GetService("UserInputService")
function dragify(Frame)
    dragToggle = nil
    local dragSpeed = 0
    dragInput = nil
    dragStart = nil
    local dragPos = nil
    function updateInput(input)
        local Delta = input.Position - dragStart
        local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
        game:GetService("TweenService"):Create(Frame, TweenInfo.new(0.25), {Position = Position}):Play()
    end
    Frame.InputBegan:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and UIS:GetFocusedTextBox() == nil then
            dragToggle = true
            dragStart = input.Position
            startPos = Frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)
    Frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragToggle then
            updateInput(input)
        end
    end)
end

dragify(script.Parent)
end
task.spawn(C_G2L_81)


--JOHNDOE.loader.Frame.Frame.button.bar2_Roundify_12px.manager
local function C_G2L_92()
local script = G2L["92"]
script.Parent.txt.Visible = false
wait(4.5)
script.Parent.txt.Visible = true
script.Parent.txt.TextTransparency = 1
wait(0.1)
script.Parent.txt.TextTransparency = 0.9
wait(0.1)
script.Parent.txt.TextTransparency = 0.8
wait(0.1)

script.Parent.txt.TextTransparency = 0.7
wait(0.1)

script.Parent.txt.TextTransparency = 0.6
wait(0.1)

script.Parent.txt.TextTransparency = 0.5
wait(0.1)

script.Parent.txt.TextTransparency = 0.4
wait(0.1)
script.Parent.txt.TextTransparency = 0.3
wait(0.1)
script.Parent.txt.TextTransparency = 0.2
wait(0.1)
script.Parent.txt.TextTransparency = 0.1
wait(0.1)
script.Parent.txt.TextTransparency = 0





wait(1)
script.Parent.txt.Text = " Loading"
wait(0.5)
script.Parent.txt.Text = " Loading."
wait(0.5)
script.Parent.txt.Text = " Loading.."
wait(0.5)
script.Parent.txt.Text = " Loading..."
wait(0.5)
script.Parent.txt.Text = " Loading."
wait(0.5)
script.Parent.txt.Text = " Loading.."
wait(0.5)
script.Parent.txt.Text = " Loaded!"
wait(0.5)
script.Parent.txt.Text = " Launching"
wait(0.5)
script.Parent.txt.Text = " Enjoy!"

end
task.spawn(C_G2L_92)


--JOHNDOE.loader.Frame.newscreen.WelcomeBack.LocalScript
local function C_G2L_96()
local script = G2L["96"]
 	
    script.Parent.TextTransparency = 1

wait(4)
 script.Parent.TextTransparency = 0.9
wait(0.1)
 script.Parent.TextTransparency = 0.8
wait(0.1)
 script.Parent.TextTransparency = 0.7
wait(0.1)
 script.Parent.TextTransparency = 0.6
wait(0.1)
 script.Parent.TextTransparency = 0.5
wait(0.1)
 script.Parent.TextTransparency = 0.4
wait(0.1)
 script.Parent.TextTransparency = 0.3
wait(0.1)
 script.Parent.TextTransparency = 0.2
wait(0.1)
 script.Parent.TextTransparency = 0.1
wait(0.1)
 script.Parent.TextTransparency = 0
wait(0.1)

end
task.spawn(C_G2L_96)


--JOHNDOE.loader.Frame.newscreen.user.fade
local function C_G2L_98()
local script = G2L["98"]
 	
    script.Parent.TextTransparency = 1

wait(4)
wait(1)
 script.Parent.TextTransparency = 0.9
wait(0.1)
 script.Parent.TextTransparency = 0.8
wait(0.1)
 script.Parent.TextTransparency = 0.7
wait(0.1)
 script.Parent.TextTransparency = 0.6
wait(0.1)
 script.Parent.TextTransparency = 0.5
wait(0.1)
 script.Parent.TextTransparency = 0.4
wait(0.1)
 script.Parent.TextTransparency = 0.3
wait(0.1)
 script.Parent.TextTransparency = 0.2
wait(0.1)
 script.Parent.TextTransparency = 0.1
wait(0.1)
 script.Parent.TextTransparency = 0
wait(0.1)

end
task.spawn(C_G2L_98)


--JOHNDOE.loader.Frame.newscreen.user.usermanage
local function C_G2L_99()
local script = G2L["99"]
script.Parent.Text = "Error"
script.Parent.Text = game.Players.LocalPlayer.Name
end
task.spawn(C_G2L_99)


--JOHNDOE.loader.Frame.Dragify
local function C_G2L_100()
local script = G2L["100"]
local UIS = game:GetService("UserInputService")
function dragify(Frame)
    dragToggle = nil
    local dragSpeed = 0
    dragInput = nil
    dragStart = nil
    local dragPos = nil
    function updateInput(input)
        local Delta = input.Position - dragStart
        local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
        game:GetService("TweenService"):Create(Frame, TweenInfo.new(0.25), {Position = Position}):Play()
    end
    Frame.InputBegan:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and UIS:GetFocusedTextBox() == nil then
            dragToggle = true
            dragStart = input.Position
            startPos = Frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)
    Frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragToggle then
            updateInput(input)
        end
    end)
end

dragify(script.Parent)
end
task.spawn(C_G2L_100)



return G2L["0"], require;
